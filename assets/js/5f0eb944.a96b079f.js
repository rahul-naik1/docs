"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1811],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return m}});var a=t(67294);function l(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){l(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function r(e,n){if(null==e)return{};var t,a,l=function(e,n){if(null==e)return{};var t,a,l={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(l[t]=e[t]);return l}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(l[t]=e[t])}return l}var c=a.createContext({}),s=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=s(e.components);return a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,l=e.mdxType,o=e.originalType,c=e.parentName,u=r(e,["components","mdxType","originalType","parentName"]),d=s(t),m=l,y=d["".concat(c,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(y,i(i({ref:n},u),{},{components:t})):a.createElement(y,i({ref:n},u))}));function m(e,n){var t=arguments,l=n&&n.mdxType;if("string"==typeof e||l){var o=t.length,i=new Array(o);i[0]=d;var r={};for(var c in n)hasOwnProperty.call(n,c)&&(r[c]=n[c]);r.originalType=e,r.mdxType="string"==typeof e?e:l,i[1]=r;for(var s=2;s<o;s++)i[s]=t[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72360:function(e,n,t){t.d(n,{Z:function(){return i}});var a=t(67294),l=t(86010),o="tabItem_OmH5";function i(e){var n=e.children,t=e.hidden,i=e.className;return a.createElement("div",{role:"tabpanel",className:(0,l.Z)(o,i),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(87462),l=t(67294),o=t(72389),i=t(67392),r=t(7094),c=t(12466),s=t(86010),u="tabList_uSqn",p="tabItem_LplD";function d(e){var n,t,o,d=e.lazy,m=e.block,y=e.defaultValue,k=e.values,v=e.groupId,g=e.className,f=l.Children.map(e.children,(function(e){if((0,l.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=k?k:f.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,i.l)(h,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var C=null===y?y:null!=(n=null!=y?y:null==(t=f.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=f[0])?void 0:o.props.value;if(null!==C&&!h.some((function(e){return e.value===C})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+C+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var x=(0,r.U)(),_=x.tabGroupChoices,N=x.setTabGroupChoices,T=(0,l.useState)(C),w=T[0],I=T[1],j=[],V=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=v){var K=_[v];null!=K&&K!==w&&h.some((function(e){return e.value===K}))&&I(K)}var P=function(e){var n=e.currentTarget,t=j.indexOf(n),a=h[t].value;a!==w&&(V(n),I(a),null!=v&&N(v,a))},D=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=j.indexOf(e.currentTarget)+1;t=j[a]||j[0];break;case"ArrowLeft":var l=j.indexOf(e.currentTarget)-1;t=j[l]||j[j.length-1]}null==(n=t)||n.focus()};return l.createElement("div",{className:(0,s.Z)("tabs-container",u)},l.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":m},g)},h.map((function(e){var n=e.value,t=e.label,o=e.attributes;return l.createElement("li",(0,a.Z)({role:"tab",tabIndex:w===n?0:-1,"aria-selected":w===n,key:n,ref:function(e){return j.push(e)},onKeyDown:D,onFocus:P,onClick:P},o,{className:(0,s.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":w===n})}),null!=t?t:n)}))),d?(0,l.cloneElement)(f.filter((function(e){return e.props.value===w}))[0],{className:"margin-top--md"}):l.createElement("div",{className:"margin-top--md"},f.map((function(e,n){return(0,l.cloneElement)(e,{key:n,hidden:e.props.value!==w})}))))}function m(e){var n=(0,o.Z)();return l.createElement(d,(0,a.Z)({key:String(n)},e))}},48960:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return u},default:function(){return k},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return m}});var a=t(87462),l=t(63366),o=(t(67294),t(3905)),i=t(9877),r=t(72360),c=["components"],s={sidebar_position:1,title:"Quickstart"},u=void 0,p={unversionedId:"collections/keyvalue/quickstart",id:"collections/keyvalue/quickstart",title:"Quickstart",description:"Macrometa GDN is a geodistributed real-time coordination-free materialized views engine that supports multiple data models. You can use GDN as a geo-replicated real-time key-value datastore or database.",source:"@site/docs/collections/keyvalue/quickstart.md",sourceDirName:"collections/keyvalue",slug:"/collections/keyvalue/quickstart",permalink:"/docs/collections/keyvalue/quickstart",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/keyvalue/quickstart.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Quickstart"},sidebar:"tutorialSidebar",previous:{title:"Credits & Acknowledgements",permalink:"/docs/essentials/credits"},next:{title:"Using Rest APIs",permalink:"/docs/collections/keyvalue/tutorials/using-rest-api"}},d={},m=[{value:"Driver download",id:"driver-download",level:2},{value:"Connect to GDN",id:"connect-to-gdn",level:2},{value:"Create Collection",id:"create-collection",level:2},{value:"Insert Key Value Pairs",id:"insert-key-value-pairs",level:2},{value:"Get Value",id:"get-value",level:2},{value:"Get Key-Value Count",id:"get-key-value-count",level:2},{value:"Update Value",id:"update-value",level:2},{value:"Delete Key-Value",id:"delete-key-value",level:2},{value:"Delete Collection",id:"delete-collection",level:2},{value:"Complete Example",id:"complete-example",level:2}],y={toc:m};function k(e){var n=e.components,t=(0,l.Z)(e,c);return(0,o.kt)("wrapper",(0,a.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Macrometa GDN is a geodistributed real-time coordination-free materialized views engine that supports multiple data models. You can use GDN as a geo-replicated real-time key-value datastore or database. "),(0,o.kt)("p",null,"If you are new to Macrometa GDN, start by reading the ",(0,o.kt)("a",{parentName:"p",href:"../../essentials/overview"},"essentials")," of Macrometa GDN."),(0,o.kt)("p",null,"Each document stored in a ",(0,o.kt)("em",{parentName:"p"},"collection")," (or table) contains a primary key ",(0,o.kt)("inlineCode",{parentName:"p"},"_key"),". The rest of the document is considered a value. The collection behaves like a simple ",(0,o.kt)("em",{parentName:"p"},"key-value")," (KV) store if it has no secondary indexes."),(0,o.kt)("p",null,"The key-value store has no query languages. The permissible operations are key look-ups (single & batch) and key-value pair insertions, updates and deletions. If you don't specify a sharding attribute, we use ",(0,o.kt)("inlineCode",{parentName:"p"},"_key")," to shard the data. The simplicity of this model makes a key-value store fast, easy to use, scalable, portable, and flexible."),(0,o.kt)("p",null,"You can enable ",(0,o.kt)("inlineCode",{parentName:"p"},"time_to_live")," (TTL) during collection creation and add an ",(0,o.kt)("inlineCode",{parentName:"p"},"expireAt")," value to specify the expiration time for each document in the KV collection. "),(0,o.kt)("p",null,"For the following examples, assume these credentials:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tenant name: ",(0,o.kt)("a",{parentName:"li",href:"mailto:nemo@nautilus.com"},"nemo@nautilus.com")),(0,o.kt)("li",{parentName:"ul"},"Password: xxxxxx")),(0,o.kt)("h2",{id:"driver-download"},"Driver download"),(0,o.kt)("p",null,"Download the appropriate drivers for Python or JavaScript."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the driver outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,o.kt)("h2",{id:"connect-to-gdn"},"Connect to GDN"),(0,o.kt)("p",null,"Establish connection to a local region. When this code runs, it initializes the server connection to the region URL you specify. You can create an API key from the GUI or REST API."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"  from c8 import C8Client\n\n  # Simple Way\n  print(\"--- Connecting to C8\")\n  client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                          email='nemo@nautilus.com', password=\"xxxxxx\",\n                          geofabric='_system')\n\n  # Or Using token\n  client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n  token=\"XXXX\")\n\n  # Or Using API Key\n  client = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n  apikey=\"<your-api-key>\")\n"))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  // Simple Way\n  const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "", fabricName: \'_system\'});\n  // ----- OR -----\n  const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "<your-api-key>", fabricName: \'_system\'});\n\n  // To use advanced options\n  const client = new jsc8("https://gdn.paas.macrometa.io"); \n')))),(0,o.kt)("h2",{id:"create-collection"},"Create Collection"),(0,o.kt)("p",null,"Create a Collection for saving the key-value pairs."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n\n  # Create a new collection if it does not exist\n  if client.has_collection(collection_name):\n      print("Collection exists")\n  else:\n      client.create_collection_kv(name=collection_name)\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  // Add this snippet in previously created main function\n  let coll = await client.getKVCollections();\n  console.log("Existing Collections: ", coll.result);\n  try{\n      await client.createKVCollection(collectionName);\n      console.log("Collection Created Successfully");\n  }\n  catch(e){\n      console.log("Collection creation did not succeed due to " + e);\n  }\n')))),(0,o.kt)("h2",{id:"insert-key-value-pairs"},"Insert Key Value Pairs"),(0,o.kt)("p",null,"Insert key-value pairs into the collection."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n  # Insert Key Value pairs\n  data = [\n    {\n      "_key": "John",\n      "value": "Science",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alice",\n      "value": "Maths",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alex",\n      "value": "Physics",\n      "expireAt": 0\n    },\n    {\n      "_key": "Monika",\n      "value": "Chemistry",\n      "expireAt": 0\n    }\n  ]\n\n  client.insert_key_value_pair(collection_name, data)\n  print("KV Pairs Inserted")\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  // Insert Key Value pairs\n  var data = [\n    {\n      "_key": "John",\n      "value": "Science",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alice",\n      "value": "Maths",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alex",\n      "value": "Physics",\n      "expireAt": 0\n    },\n    {\n      "_key": "Monika",\n      "value": "Chemistry",\n      "expireAt": 0\n    }\n  ]\n  try{\n      await client.insertKVPairs(collectionName, data);\n      console.log("Key Value pairs inserted successfully.");\n  }\n  catch(e){\n      console.log("Key Value Pairs not inserted due to " + e);\n  }\n')))),(0,o.kt)("h2",{id:"get-value"},"Get Value"),(0,o.kt)("p",null,"Get value for a given key."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n  # Get value for a key\n  print("Value for the provided key: ",client.get_value_for_key(collection_name, "Monika"))\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  const result = await client.getValueForKey(collectionName, 'Monika');\n  console.log(\"Value for provided key: \", result);\n")))),(0,o.kt)("h2",{id:"get-key-value-count"},"Get Key-Value Count"),(0,o.kt)("p",null,"Get key-value count from a given collection."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n\n  # Get KV count of a collection\n  print("Number of kv pairs in your collection: ",client.get_kv_count(collection_name))\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  // Get KV count of a collection\n  const count = await client.getKVCount(collectionName);\n  console.log("Number of kv pairs in your collection: ", count.count);\n')))),(0,o.kt)("h2",{id:"update-value"},"Update Value"),(0,o.kt)("p",null,"Update value for a given key."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n\n  # Update value for a key\n  data = {\n      "_key": "John",\n      "value": "Biology",\n      "expireAt": 0\n  }\n  client.insert_key_value_pair(collection_name, data)\n  print("Updated the specified KV pair")\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  //Update value for a key\n  data = {\n      "_key": "John",\n      "value": "Biology",\n      "expireAt": 0\n  }\n  try{\n      client.insertKVPairs(collectionName, data)\n      console.log("Updated the specified KV pair")\n  }\n  catch(e){\n    console.log("Key Value Pair not updated due to " + e)\n\n  }\n')))),(0,o.kt)("h2",{id:"delete-key-value"},"Delete Key-Value"),(0,o.kt)("p",null,"Delete key-value pairs from a collection."),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n\n  # Delete entry for a key\n  print("Deleted Entry for the specified Key: ",client.delete_entry_for_key(collection_name, "John"))\n\n  # Delete entry for multiple keys\n  print("Deleted Entries for the list of keys: ",client.delete_entry_for_keys(collection_name, ["Monika", "Alex", "Alice"]))\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  try{\n      // Delete entry for a key\n      await client.deleteEntryForKey(collectionName, \'John\');\n\n      // Delete entries for multiple keys\n      await client.deleteEntryForKeys(collectionName, ["Monika", "Alex", "Alice"])\n  }\n  catch(e){\n      console.log("Failed to delete entries due to " + e)\n\n  }\n')))),(0,o.kt)("h2",{id:"delete-collection"},"Delete Collection"),(0,o.kt)("p",null,"Delete key-value collection"),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n\n  # Delete Collection\n  print("Collection Deleted: ",client.delete_collection_kv(collection_name))\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  // Delete Collection\n  try{\n      await client.deleteKVCollection(collectionName)\n      console.log("Collection Deleted")\n  }\n  catch(e){\n      console.log("Failed to delete collection due to " + e)\n  }\n')))),(0,o.kt)("h2",{id:"complete-example"},"Complete Example"),(0,o.kt)("p",null,"The following complete examples are a composite of the previous code snippets:"),(0,o.kt)(i.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(r.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n\n  key = "<your-api-key>"\n  collection_name = "students"\n\n  # Create a connection to gdn\n  client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  apikey=key)\n\n  # client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  #                          email=\'nemo@nautilus.com\', password="xxxxxx",\n  #                          geofabric=\'_system\')\n\n  # OR Using token\n  # client = C8Client(protocol=\'https\', host=\'gdn.paas.macrometa.io\', port=443,\n  #  token="XXXX")\n\n\n  # Create a new collection if it does not exist\n  if client.has_collection(collection_name):\n      print("Collection exists")\n  else:\n      client.create_collection_kv(name=collection_name)\n\n  # Insert Key Value pairs\n  data = [\n    {\n      "_key": "John",\n      "value": "Science",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alice",\n      "value": "Maths",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alex",\n      "value": "Physics",\n      "expireAt": 0\n    },\n    {\n      "_key": "Monika",\n      "value": "Chemistry",\n      "expireAt": 0\n    }\n  ]\n\n  client.insert_key_value_pair(collection_name, data)\n  print("KV Pairs Inserted")\n\n  # Get value for a key\n  print("Value for the provided key: ",client.get_value_for_key(collection_name, "Monika"))\n\n  # Get KV count of a collection\n  print("Number of kv pairs in your collection: ",client.get_kv_count(collection_name))\n\n  # Update value for a key\n  data = {\n      "_key": "John",\n      "value": "Biology",\n      "expireAt": 0\n  }\n  client.insert_key_value_pair(collection_name, data)\n  print("Updated the specified KV pair")\n\n  # Delete entry for a key\n  print("Deleted Entry for the specified Key: ",client.delete_entry_for_key(collection_name, "John"))\n\n  # Delete entry for multiple keys\n  print("Deleted Entries for the list of keys: ",client.delete_entry_for_keys(collection_name, ["Monika", "Alex", "Alice"]))\n\n  # Delete Collection\n  print("Collection Deleted: ",client.delete_collection_kv(collection_name))\n'))),(0,o.kt)(r.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  const jsc8 = require("jsc8");\n\n  const key = "<your-api-key>";\n  const collectionName = "students";\n\n  // Connect to gdn\n  const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: key});\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: "https://gdn.paas.macrometa.io", apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email & Password to Authenticate client instance\n  // const client = new jsc8("https://gdn.paas.macrometa.io");\n\n  // await client.login("nemo@nautilus.com", "xxxxx");\n\n  async function main(){\n  // Create a Collection  \n  let coll = await client.getKVCollections();\n  console.log("Existing Collections: ", coll.result);\n  try{\n      await client.createKVCollection(collectionName);\n      console.log("Collection Created Successfully");\n  }\n  catch(e){\n      console.log("Collection creation did not succeed due to " + e);\n  }\n\n  // Insert Key Value pairs\n  var data = [\n    {\n      "_key": "John",\n      "value": "Science",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alice",\n      "value": "Maths",\n      "expireAt": 0\n    },\n    {\n      "_key": "Alex",\n      "value": "Physics",\n      "expireAt": 0\n    },\n    {\n      "_key": "Monika",\n      "value": "Chemistry",\n      "expireAt": 0\n    }\n  ]\n  try{\n      await client.insertKVPairs(collectionName, data);\n      console.log("Key Value pairs inserted successfully.");\n  }\n  catch(e){\n      console.log("Key Value Pairs not inserted due to " + e);\n  }\n\n  // Get value for a key\n  const result = await client.getValueForKey(collectionName, \'Monika\');\n  console.log("Value for provided key: ", result);\n\n  // Get KV count of a collection\n  const count = await client.getKVCount(collectionName);\n  console.log("Number of kv pairs in your collection: ", count.count);\n\n  //Update value for a key\n  data = {\n      "_key": "John",\n      "value": "Biology",\n      "expireAt": 0\n  }\n  try{\n      client.insertKVPairs(collectionName, data);\n      console.log("Updated the specified KV pair");\n  }\n  catch(e){\n    console.log("Key Value Pair not updated due to " + e);\n\n  }\n  try{\n      // Delete entry for a key\n      await client.deleteEntryForKey(collectionName, \'John\');\n\n      // Delete entries for multiple keys\n      await client.deleteEntryForKeys(collectionName, ["Monika", "Alex", "Alice"]);\n  }\n  catch(e){\n      console.log("Failed to delete entries due to " + e);\n\n  }\n\n  // Delete Collection\n  try{\n      await client.deleteKVCollection(collectionName);\n      console.log("Collection Deleted");\n  }\n  catch(e){\n      console.log("Failed to delete collection due to " + e);\n  }\n\n\n  }\n\n  main();\n')))))}k.isMDXComponent=!0}}]);