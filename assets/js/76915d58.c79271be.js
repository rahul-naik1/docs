"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9979],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return N}});var a=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var u=a.createContext({}),k=function(t){var e=a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=k(t.components);return a.createElement(u.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},o=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,u=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),o=k(n),N=l,d=o["".concat(u,".").concat(N)]||o[N]||s[N]||r;return n?a.createElement(d,i(i({ref:e},m),{},{components:n})):a.createElement(d,i({ref:e},m))}));function N(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=o;var p={};for(var u in e)hasOwnProperty.call(e,u)&&(p[u]=e[u]);p.originalType=t,p.mdxType="string"==typeof t?t:l,i[1]=p;for(var k=2;k<r;k++)i[k]=n[k];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}o.displayName="MDXCreateElement"},16099:function(t,e,n){n.r(e),n.d(e,{assets:function(){return m},contentTitle:function(){return u},default:function(){return N},frontMatter:function(){return p},metadata:function(){return k},toc:function(){return s}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],p={sidebar_position:4},u="List",k={unversionedId:"cep/reference/extensions/execution/list",id:"cep/reference/extensions/execution/list",title:"List",description:"This extension provides capability to generate and manipulate list data objects.",source:"@site/docs/cep/reference/extensions/execution/list.md",sourceDirName:"cep/reference/extensions/execution",slug:"/cep/reference/extensions/execution/list",permalink:"/docs/cep/reference/extensions/execution/list",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/extensions/execution/list.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"JSON",permalink:"/docs/cep/reference/extensions/execution/json"},next:{title:"Math",permalink:"/docs/cep/reference/extensions/execution/math"}},m={},s=[{value:"Features",id:"features",level:2},{value:"collect",id:"collect",level:2},{value:"merge",id:"merge",level:2},{value:"add",id:"add",level:2},{value:"addAll",id:"addall",level:2},{value:"clear",id:"clear",level:2},{value:"clone",id:"clone",level:2},{value:"contains",id:"contains",level:2},{value:"containsAll",id:"containsall",level:2},{value:"create",id:"create",level:2},{value:"get",id:"get",level:2},{value:"indexOf",id:"indexof",level:2},{value:"isEmpty",id:"isempty",level:2},{value:"isList",id:"islist",level:2},{value:"lastIndexOf",id:"lastindexof",level:2},{value:"remove",id:"remove",level:2},{value:"removeAll",id:"removeall",level:2},{value:"removeByIndex",id:"removebyindex",level:2},{value:"retainAll",id:"retainall",level:2},{value:"setValue",id:"setvalue",level:2},{value:"size",id:"size",level:2},{value:"sort",id:"sort",level:2},{value:"tokenize",id:"tokenize",level:2}],o={toc:s};function N(t){var e=t.components,n=(0,l.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},o,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"list"},"List"),(0,r.kt)("p",null,"This extension provides capability to generate and manipulate list data objects."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#collect"},"collect (Aggregate Function)"))),(0,r.kt)("p",{parentName:"li"},"  Collects multiple values to construct a list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#merge"},"merge (Aggregate Function)"))),(0,r.kt)("p",{parentName:"li"},"  Collects multiple lists to merge as a single list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#add"},"add (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the updated list after adding the given value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#addall"},"addAll (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the updated list after adding all the values from\nthe given list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#clear"},"clear (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the cleared list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#clone"},"clone (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the cloned list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#contains"},"contains (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function checks whether the list contains the specific value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#containsall"},"containsAll (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function checks whether the list contains all the values in the\ngiven list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#create"},"create (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function creates a list containing all values provided.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#get"},"get (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the value at the specific index, null if index is\nout of range.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#indexof"},"indexOf (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the last index of the given element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#isempty"},"isEmpty (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function checks if the list is empty.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#islist"},"isList (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function checks if the object is type of a list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#lastindexof"},"lastIndexOf (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the index of the given value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#remove"},"remove (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the updated list after removing the element with\nthe specified value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#removeall"},"removeAll (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the updated list after removing all the element\nwith the specified list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#removebyindex"},"removeByIndex (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the updated list after removing the element with\nthe specified index.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#retainall"},"retainAll (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the updated list after retaining all the elements\nin the specified list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#setvalue"},"setValue (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns the updated list after replacing the element in the\ngiven index by the given value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#size"},"size (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function to return the size of the list.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#sort"},"sort (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function returns lists sorted in ascending or descending order.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#tokenize"},"tokenize (StreamProcessor)"))),(0,r.kt)("p",{parentName:"li"},"  Tokenize the list and return each key, value as new attributes in\nevents"))),(0,r.kt)("h2",{id:"collect"},"collect"),(0,r.kt)("p",null,"Collects multiple values to construct a list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:collect(<OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value)\n<OBJECT> list:collect(<OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value, <BOOL> is.distinct)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Value of the list element"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is.distinct"),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," only distinct elements are collected"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"insert into OutputStream\nselect list:collect(symbol) as stockSymbols\nfrom StockStream#window.lengthBatch(10);\n")),(0,r.kt)("p",null,"For the window expiry of 10 events, the collect() function will collect\nattributes of ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," to a single list and return as stockSymbols."),(0,r.kt)("h2",{id:"merge"},"merge"),(0,r.kt)("p",null,"Collects multiple lists to merge as a single list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:merge(<OBJECT> list)\n<OBJECT> list:merge(<OBJECT> list, <BOOL> is.distinct)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"List to be merged"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is.distinct"),(0,r.kt)("td",{parentName:"tr",align:null},"Whether to return list with distinct values"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"insert into OutputStream\nselect list:merge(list) as stockSymbols\nfrom StockStream#window.lengthBatch(2);\n")),(0,r.kt)("p",null,"For the window expiry of 2 events, the merge() function will collect\nattributes of ",(0,r.kt)("inlineCode",{parentName:"p"},"list")," and merge them to a single list, returned as\nstockSymbols."),(0,r.kt)("h2",{id:"add"},"add"),(0,r.kt)("p",null,"Function returns the updated list after adding the given value."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:add(<OBJECT> list, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value)\n<OBJECT> list:add(<OBJECT> list, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value, <INT> index)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list to which the value should be added."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"The value to be added."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"The index in which the value should to be added."),(0,r.kt)("td",{parentName:"tr",align:null},"last"),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:add(stockSymbols, 'IBM')\n")),(0,r.kt)("p",null,"Function returns the updated list after adding the value ",(0,r.kt)("inlineCode",{parentName:"p"},"IBM")," in the\nlast index."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:add(stockSymbols, 'IBM', 0)\n")),(0,r.kt)("p",null,"Function returns the updated list after adding the value ",(0,r.kt)("inlineCode",{parentName:"p"},"IBM")," in the\n0th index."),(0,r.kt)("h2",{id:"addall"},"addAll"),(0,r.kt)("p",null,"Function returns the updated list after adding all the values from the\ngiven list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:addAll(<OBJECT> to.list, <OBJECT> from.list)\n<OBJECT> list:addAll(<OBJECT> to.list, <OBJECT> from.list, <BOOL> is.distinct)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"to.list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list into which the values need to copied."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"from.list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list from which the values are copied."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"is.distinct"),(0,r.kt)("td",{parentName:"tr",align:null},"If ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," returns list with distinct values"),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:putAll(toList, fromList)\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"toList")," contains values ",(0,r.kt)("em",{parentName:"p"},"('IBM', 'GDN')"),", and if ",(0,r.kt)("inlineCode",{parentName:"p"},"fromList"),"\ncontains values ",(0,r.kt)("em",{parentName:"p"},"('IBM', 'XYZ')")," then the function returns updated\n",(0,r.kt)("inlineCode",{parentName:"p"},"toList")," with values ",(0,r.kt)("em",{parentName:"p"},"('IBM', 'GDN', 'IBM', 'XYZ')"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:putAll(toList, fromList, true)\n")),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"toList")," contains values ",(0,r.kt)("em",{parentName:"p"},"('IBM', 'GDN')"),", and if ",(0,r.kt)("inlineCode",{parentName:"p"},"fromList"),"\ncontains values ",(0,r.kt)("em",{parentName:"p"},"('IBM', 'XYZ')")," then the function returns updated\n",(0,r.kt)("inlineCode",{parentName:"p"},"toList")," with values ",(0,r.kt)("em",{parentName:"p"},"('IBM', 'GDN', 'XYZ')"),"."),(0,r.kt)("h2",{id:"clear"},"clear"),(0,r.kt)("p",null,"Function returns the cleared list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:clear(<OBJECT> list)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list which needs to be cleared"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:clear(stockDetails)\n")),(0,r.kt)("p",null,"Returns an empty list."),(0,r.kt)("h2",{id:"clone"},"clone"),(0,r.kt)("p",null,"Function returns the cloned list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:clone(<OBJECT> list)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list to which needs to be cloned."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:clone(stockSymbols)\n")),(0,r.kt)("p",null,"Function returns cloned list of stockSymbols."),(0,r.kt)("h2",{id:"contains"},"contains"),(0,r.kt)("p",null,"Function checks whether the list contains the specific value."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> list:contains(<OBJECT> list, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list that needs to be checked on whether it contains the value or not."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that needs to be checked."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:contains(stockSymbols, 'IBM')\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the stockSymbols list contains value ",(0,r.kt)("inlineCode",{parentName:"p"},"IBM")," else it\nreturns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h2",{id:"containsall"},"containsAll"),(0,r.kt)("p",null,"Function checks whether the list contains all the values in the given\nlist."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> list:containsAll(<OBJECT> list, <OBJECT> given.list)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list that needs to be checked on whether it contains all the values or not."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"given.list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list which contains all the values to be checked."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:containsAll(stockSymbols, latestStockSymbols)\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the stockSymbols list contains values in\nlatestStockSymbols else it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h2",{id:"create"},"create"),(0,r.kt)("p",null,"Function creates a list containing all values provided."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:create()\n<OBJECT> list:create(<OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value1)\n<OBJECT> list:create(<OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value1, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> ...)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value1"),(0,r.kt)("td",{parentName:"tr",align:null},"Value 1"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:create(1, 2, 3, 4, 5, 6)\n")),(0,r.kt)("p",null,"This returns a list with values ",(0,r.kt)("inlineCode",{parentName:"p"},"1"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"2"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"4"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"5")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"6"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:create()\n")),(0,r.kt)("p",null,"This returns an empty list."),(0,r.kt)("h2",{id:"get"},"get"),(0,r.kt)("p",null,"Function returns the value at the specific index, null if index is out\nof range."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> list:get(<OBJECT> list, <INT> index)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"Attribute containing the list"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"Index of the element"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:get(stockSymbols, 1)\n")),(0,r.kt)("p",null,"This returns the element in the 1st index in the stockSymbols list."),(0,r.kt)("h2",{id:"indexof"},"indexOf"),(0,r.kt)("p",null,"Function returns the last index of the given element."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT> list:indexOf(<OBJECT> list, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list to be checked to get index of an element."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Value for which last index needs to be identified."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:indexOf(stockSymbols. `IBM`)\n")),(0,r.kt)("p",null,"Returns the last index of the element ",(0,r.kt)("inlineCode",{parentName:"p"},"IBM")," if present else it returns\n-1."),(0,r.kt)("h2",{id:"isempty"},"isEmpty"),(0,r.kt)("p",null,"Function checks if the list is empty."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> list:isEmpty(<OBJECT> list)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list that needs to be checked whether it's empty or not."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:isEmpty(stockSymbols)\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the stockSymbols list is empty else it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h2",{id:"islist"},"isList"),(0,r.kt)("p",null,"Function checks if the object is type of a list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> list:isList(<OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> arg)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg"),(0,r.kt)("td",{parentName:"tr",align:null},"The argument the need to be determined whether it's a list or not."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:isList(stockSymbols)\n")),(0,r.kt)("p",null,"Returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if the stockSymbols is and an instance of\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.List")," else it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,r.kt)("h2",{id:"lastindexof"},"lastIndexOf"),(0,r.kt)("p",null,"Function returns the index of the given value."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT> list:lastIndexOf(<OBJECT> list, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list to be checked to get index of an element."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Value for which last index needs to be identified."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:lastIndexOf(stockSymbols. `IBM`)\n")),(0,r.kt)("p",null,"Returns the last index of the element ",(0,r.kt)("inlineCode",{parentName:"p"},"IBM")," if present else it returns\n-1."),(0,r.kt)("h2",{id:"remove"},"remove"),(0,r.kt)("p",null,"Function returns the updated list after removing the element with the\nspecified value."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:remove(<OBJECT> list, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list that needs to be updated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the element that needs to removed."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:remove(stockSymbols, 'IBM')\n")),(0,r.kt)("p",null,"This returns the updated list, stockSymbols after stockSymbols the value\n",(0,r.kt)("inlineCode",{parentName:"p"},"IBM"),"."),(0,r.kt)("h2",{id:"removeall"},"removeAll"),(0,r.kt)("p",null,"Function returns the updated list after removing all the element with\nthe specified list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:removeAll(<OBJECT> list, <OBJECT> given.list)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list that needs to be updated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"given.list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list with all the elements that needs to removed."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:removeAll(stockSymbols, latestStockSymbols)\n")),(0,r.kt)("p",null,"This returns the updated list, stockSymbols after removing all the\nvalues in latestStockSymbols."),(0,r.kt)("h2",{id:"removebyindex"},"removeByIndex"),(0,r.kt)("p",null,"Function returns the updated list after removing the element with the\nspecified index."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:removeByIndex(<OBJECT> list, <INT> index)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list that needs to be updated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"The index of the element that needs to removed."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:removeByIndex(stockSymbols, 0)\n")),(0,r.kt)("p",null,"This returns the updated list, stockSymbols after removing value at 0 th\nindex."),(0,r.kt)("h2",{id:"retainall"},"retainAll"),(0,r.kt)("p",null,"Function returns the updated list after retaining all the elements in\nthe specified list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:retainAll(<OBJECT> list, <OBJECT> given.list)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list that needs to be updated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"given.list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list with all the elements that needs to reatined."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:retainAll(stockSymbols, latestStockSymbols)\n")),(0,r.kt)("p",null,"This returns the updated list, stockSymbols after retaining all the\nvalues in latestStockSymbols."),(0,r.kt)("h2",{id:"setvalue"},"setValue"),(0,r.kt)("p",null,"Function returns the updated list after replacing the element in the\ngiven index by the given value."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:setValue(<OBJECT> list, <INT> index, <OBJECT|INT|LONG|FLOAT|DOUBLE|BOOL|STRING> value)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list to which the value should be updated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"The index in which the value should to be updated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"The value to be updated with."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT INT LONG FLOAT DOUBLE BOOL STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:set(stockSymbols, 0, 'IBM')\n")),(0,r.kt)("p",null,"Function returns the updated list after replacing the value at 0th index\nwith the value ",(0,r.kt)("inlineCode",{parentName:"p"},"IBM")),(0,r.kt)("h2",{id:"size"},"size"),(0,r.kt)("p",null,"Function to return the size of the list."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT> list:size(<OBJECT> list)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list for which size should be returned."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:size(stockSymbols)\n")),(0,r.kt)("p",null,"Returns size of the ",(0,r.kt)("inlineCode",{parentName:"p"},"stockSymbols")," list."),(0,r.kt)("h2",{id:"sort"},"sort"),(0,r.kt)("p",null,"Function returns lists sorted in ascending or descending order."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> list:sort(<OBJECT> list)\n<OBJECT> list:sort(<OBJECT> list, <STRING> order)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"The list which should be sorted."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"order"),(0,r.kt)("td",{parentName:"tr",align:null},"Order in which the list needs to be sorted (ASC/DESC/REV)."),(0,r.kt)("td",{parentName:"tr",align:null},"REV"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:sort(stockSymbols)\n")),(0,r.kt)("p",null,"Function returns the sorted list in ascending order."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:sort(stockSymbols, 'DESC')\n")),(0,r.kt)("p",null,"Function returns the sorted list in descending order."),(0,r.kt)("h2",{id:"tokenize"},"tokenize"),(0,r.kt)("p",null,"Tokenize the list and return each key, value as new attributes in events"),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:tokenize(<OBJECT> list)\nlist:tokenize(<OBJECT> list, <OBJECT> ...)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"list"),(0,r.kt)("td",{parentName:"tr",align:null},"Array list which needs to be tokenized"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"Extra Return Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Types"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"index"),(0,r.kt)("td",{parentName:"tr",align:null},"Index of an entry consisted in the list"),(0,r.kt)("td",{parentName:"tr",align:null},"INT")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"Value of an entry consisted in the list"),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT")))),(0,r.kt)("p",null,"Examples EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"list:tokenize(customList)\n")),(0,r.kt)("p",null,"If custom list contains ",(0,r.kt)("em",{parentName:"p"},"('GDN', 'IBM', 'XYZ')")," elements, then\ntokenize function will return 3 events with value attributes ",(0,r.kt)("inlineCode",{parentName:"p"},"GDN"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"IBM"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"XYZ")," respectively."))}N.isMDXComponent=!0}}]);