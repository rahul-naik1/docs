"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6282],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return f}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=r.createContext({}),p=function(e){var t=r.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return r.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,u=l(e,["components","mdxType","originalType","parentName"]),c=p(n),f=a,d=c["".concat(s,".").concat(f)]||c[f]||m[f]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=c;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}c.displayName="MDXCreateElement"},59571:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return s},default:function(){return f},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return m}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),i=["components"],l={sidebar_position:5,title:"Data Transformation"},s=void 0,p={unversionedId:"cep/reference/data-transformation",id:"cep/reference/data-transformation",title:"Data Transformation",description:"Math & Logical Operations",source:"@site/docs/cep/reference/data-transformation.md",sourceDirName:"cep/reference",slug:"/cep/reference/data-transformation",permalink:"/docs/cep/reference/data-transformation",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/data-transformation.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5,title:"Data Transformation"},sidebar:"tutorialSidebar",previous:{title:"Data Cleansing",permalink:"/docs/cep/reference/data-cleansing"},next:{title:"Data Summarizations (Aggregations)",permalink:"/docs/cep/reference/data-summarization"}},u={},m=[{value:"Math &amp; Logical Operations",id:"math--logical-operations",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Transform JSON",id:"transform-json",level:2},{value:"Input",id:"input-1",level:3},{value:"Output",id:"output-1",level:3}],c={toc:m};function f(e){var t=e.components,n=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"math--logical-operations"},"Math & Logical Operations"),(0,o.kt)("p",null,"This example shows the use of math or logical operations on events."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM TemperatureStream (sensorId string, temperature double);\n\n@info(name = 'celciusTemperature')\n\n-- Converts Celsius value into Fahrenheit.\ninsert into FahrenheitTemperatureStream\nselect sensorId, (temperature * 9 / 5) + 32 as temperature\nfrom TemperatureStream;\n\n\n@info(name = 'Overall-analysis')\n-- Calculate approximated temperature to the first digit \ninsert all events into OverallTemperatureStream\nselect sensorId, math:floor(temperature) as approximateTemp \nfrom FahrenheitTemperatureStream;\n\n@info(name = 'RangeFilter') \n-- Filter out events where `-2 < approximateTemp < 40`\ninsert into NormalTemperatureStream\nselect *\nfrom OverallTemperatureStream[ approximateTemp > -2 and approximateTemp < 40];\n")),(0,o.kt)("h3",{id:"input"},"Input"),(0,o.kt)("p",null,"Below event is sent to ",(0,o.kt)("inlineCode",{parentName:"p"},"TemperatureStream"),","),(0,o.kt)("p",null,"[",(0,o.kt)("inlineCode",{parentName:"p"},"'SensorId'"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"-17"),"]"),(0,o.kt)("h3",{id:"output"},"Output"),(0,o.kt)("p",null,"After processing, the following events will be arriving at each stream:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"FahrenheitTemperatureStream: ","[",(0,o.kt)("inlineCode",{parentName:"li"},"'SensorId'"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"1.4"),"]"),(0,o.kt)("li",{parentName:"ul"},"OverallTemperatureStream: ","[",(0,o.kt)("inlineCode",{parentName:"li"},"'SensorId'"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"1.0"),"]"),(0,o.kt)("li",{parentName:"ul"},"NormalTemperatureStream: ","[",(0,o.kt)("inlineCode",{parentName:"li"},"'SensorId'"),", ",(0,o.kt)("inlineCode",{parentName:"li"},"1.0"),"]")),(0,o.kt)("h2",{id:"transform-json"},"Transform JSON"),(0,o.kt)("p",null,"This example shows transforming JSON objects within a stream application."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM InputStream(jsonString string);\n\n-- Transforms JSON string to JSON object which can then be manipulated\ninsert into PersonalDetails\nselect json:toObject(jsonString) as jsonObj \nfrom InputStream ;\n\ninsert into OutputStream\nselect jsonObj, \n-- Get the `name` element(string) form the JSON\n    json:getString(jsonObj,'$.name') as name,\n\n-- Validate if `salary` element is available\n    json:isExists(jsonObj, '$.salary') as isSalaryAvailable,\n\n-- Stringify the JSON object\n    json:toString(jsonObj) as jsonString\nfrom PersonalDetails;\n\n\n-- Set `salary` element to `0` is not available \ninsert into PreprocessedStream\nselect json:setElement(jsonObj, '$', 0f, 'salary') as jsonObj\nfrom OutputStream[isSalaryAvailable == false];\n")),(0,o.kt)("h3",{id:"input-1"},"Input"),(0,o.kt)("p",null,"Below event is sent to ",(0,o.kt)("inlineCode",{parentName:"p"},"InputStream"),","),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "name" : "streamapp.user",\n        "address" : {\n            "country": "USA"\n        },\n        "contact": "+9xxxxxxxx"\n    }\n]\n')),(0,o.kt)("h3",{id:"output-1"},"Output"),(0,o.kt)("p",null,"After processing, the following events will be arriving:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"OutputStream:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[ \n    {\n        "address": {\n            "country":"USA"\n        },\n        "contact":"+9xxxxxxxx",\n        "name":"streamapp.user"\n    }\n]\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"PreprocessedStream:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'[\n    {\n        "name" : "streamapp.user",\n        "salary": 0.0,\n        "address" : {\n            "country": "USA"\n        },\n        "contact": "+9xxxxxxxx"\n    }\n]\n')))}f.isMDXComponent=!0}}]);