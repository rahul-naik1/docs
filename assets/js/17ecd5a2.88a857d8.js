"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[9334],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return u}});var s=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,s,a=function(e,n){if(null==e)return{};var t,s,a={},l=Object.keys(e);for(s=0;s<l.length;s++)t=l[s],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(s=0;s<l.length;s++)t=l[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=s.createContext({}),i=function(e){var n=s.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=i(e.components);return s.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,a=e.mdxType,l=e.originalType,c=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),d=i(t),u=a,y=d["".concat(c,".").concat(u)]||d[u]||m[u]||l;return t?s.createElement(y,r(r({ref:n},p),{},{components:t})):s.createElement(y,r({ref:n},p))}));function u(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var l=t.length,r=new Array(l);r[0]=d;var o={};for(var c in n)hasOwnProperty.call(n,c)&&(o[c]=n[c]);o.originalType=e,o.mdxType="string"==typeof e?e:a,r[1]=o;for(var i=2;i<l;i++)r[i]=t[i];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72360:function(e,n,t){t.d(n,{Z:function(){return r}});var s=t(67294),a=t(86010),l="tabItem_OmH5";function r(e){var n=e.children,t=e.hidden,r=e.className;return s.createElement("div",{role:"tabpanel",className:(0,a.Z)(l,r),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return u}});var s=t(87462),a=t(67294),l=t(72389),r=t(67392),o=t(7094),c=t(12466),i=t(86010),p="tabList_uSqn",m="tabItem_LplD";function d(e){var n,t,l,d=e.lazy,u=e.block,y=e.defaultValue,v=e.values,b=e.groupId,_=e.className,g=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),A=null!=v?v:g.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,r.l)(A,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var E=null===y?y:null!=(n=null!=y?y:null==(t=g.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(l=g[0])?void 0:l.props.value;if(null!==E&&!A.some((function(e){return e.value===E})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+E+'" but none of its children has the corresponding value. Available values are: '+A.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var C=(0,o.U)(),f=C.tabGroupChoices,L=C.setTabGroupChoices,h=(0,a.useState)(E),T=h[0],R=h[1],x=[],S=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=b){var D=f[b];null!=D&&D!==T&&A.some((function(e){return e.value===D}))&&R(D)}var N=function(e){var n=e.currentTarget,t=x.indexOf(n),s=A[t].value;s!==T&&(S(n),R(s),null!=b&&L(b,s))},w=function(e){var n,t=null;switch(e.key){case"ArrowRight":var s=x.indexOf(e.currentTarget)+1;t=x[s]||x[0];break;case"ArrowLeft":var a=x.indexOf(e.currentTarget)-1;t=x[a]||x[x.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,i.Z)("tabs-container",p)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},_)},A.map((function(e){var n=e.value,t=e.label,l=e.attributes;return a.createElement("li",(0,s.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return x.push(e)},onKeyDown:w,onFocus:N,onClick:N},l,{className:(0,i.Z)("tabs__item",m,null==l?void 0:l.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),d?(0,a.cloneElement)(g.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},g.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function u(e){var n=(0,l.Z)();return a.createElement(d,(0,s.Z)({key:String(n)},e))}},11054:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return v},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return u}});var s=t(87462),a=t(63366),l=(t(67294),t(3905)),r=t(9877),o=t(72360),c=["components"],i={sidebar_position:6,title:"Drivers",slug:"drivers"},p=void 0,m={unversionedId:"essentials/Drivers",id:"essentials/Drivers",title:"Drivers",description:"Pre-requisite",source:"@site/docs/essentials/Drivers.md",sourceDirName:"essentials",slug:"/essentials/drivers",permalink:"/docs/essentials/drivers",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/essentials/Drivers.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6,title:"Drivers",slug:"drivers"},sidebar:"tutorialSidebar",previous:{title:"Tenant Quotas & Limits",permalink:"/docs/essentials/quotas"},next:{title:"Overview",permalink:"/docs/essentials/CLI/overview"}},d={},u=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"Driver download",id:"driver-download",level:2},{value:"Connect to GDN",id:"connect-to-gdn",level:2},{value:"Create an API Key",id:"create-an-api-key",level:2},{value:"Set Permissions",id:"set-permissions",level:2},{value:"Get Access Levels",id:"get-access-levels",level:2},{value:"Clear Access Level",id:"clear-access-level",level:2},{value:"Remove an API Key",id:"remove-an-api-key",level:2},{value:"Complete Example",id:"complete-example",level:2}],y={toc:u};function v(e){var n=e.components,t=(0,a.Z)(e,c);return(0,l.kt)("wrapper",(0,s.Z)({},y,t,{components:n,mdxType:"MDXLayout"}),(0,l.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,l.kt)("p",null,"Let's assume your"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},"tenant name is ",(0,l.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and "),(0,l.kt)("li",{parentName:"ul"},"user password is ",(0,l.kt)("inlineCode",{parentName:"li"},"xxxxx"),".")),(0,l.kt)("h2",{id:"driver-download"},"Driver download"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"With Yarn or NPM\n\nyarn add jsc8\n(or)\nnpm install jsc8\n\nIf you want to use the driver outside of the current directory, you can also install it globally using the `--global` flag:\n\nnpm install --global jsc8\n\nFrom source,\n\ngit clone https://github.com/macrometacorp/jsc8.git\ncd jsC8\nnpm install\nnpm run dist\n"))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\nTo install pyC8, simply run\n\n$ pip3 install pyC8\n\nor, if you prefer to use conda:\n\nconda install -c conda-forge pyC8\n\nor pipenv:\n\npipenv install --pre pyC8\n\nOnce the installation process is finished, you can begin developing applications in Python.\n")))),(0,l.kt)("h2",{id:"connect-to-gdn"},"Connect to GDN"),(0,l.kt)("p",null,"The first step in using GDN is to establish a connection to a local region. When this code executes, it initializes the server connection to the region URL you sepcified. You can create an API key from the GUI or REST API."),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\nconst client = new jsc8({url: "https://gdn.paas.macrometa.io", token: "xxxx", fabricName: \'_system\'});\n'))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                    email='nemo@nautilus.com', password='xxxxx',\n                    geofabric='_system')\n\n# OR Using token\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443, token=\"XXXX\")\n"))),(0,l.kt)(o.Z,{value:"",label:"Rest",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'import requests\nimport json\n\n# Constants\nFEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nEMAIL = "nemo@nautilus.com"\nPASSWORD = "xxxxxx"\nAUTH_TOKEN = "bearer "\n\n# Create a HTTPS Session\nurl = "{}/_open/auth".format(FED_URL)\npayload = {\n\'email\':EMAIL,\n\'password\':PASSWORD\n}\nheaders = {\n\'content-type\': \'application/json\'\n}\n\nresponse = requests.post(url, data = json.dumps(payload), headers = headers)\n\nif response.status_code == 200:\nresp_body = json.loads(response.text)\nAUTH_TOKEN += resp_body["jwt"]\nTENANT = resp_body["tenant"]\nelse:\nraise Exception("Error while getting auth token. Code:{}, Reason:{}".format(response.status_code,response.reason))\n\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})  \n')))),(0,l.kt)("h2",{id:"create-an-api-key"},"Create an API Key"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"try{\nawait client.createApiKey(keyid);\n}\ncatch(e){\nconsole.log('API Creation Failed: ', e);\n}\n"))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                    email='nemo@nautilus.com', password='xxxxx',\n                    geofabric='_system')\n\n# Create an api key\nprint(\"Create API Key: \", client.create_api_key('id1'))\n"))),(0,l.kt)(o.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'# Create an API Key\nFEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nkeyid = "id1"\nurl = FED_URL + "/_api/key"\npayload= {\n"keyid": keyid\n}\n\nresp = session.post(url, data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\nprint("ERROR: " , resp)\nelse:\nprint("API Key Created: ", resp)\n')))),"## Get Accessible Resources",(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"//Fetch accessible databases\ntry{\n    var databases = await client.listAccessibleDatabases(keyid)\n    console.log(\"Accessible Databases\")\n    console.log(databases.result)\n}\ncatch(e){\n    console.log('Failed to fetch accessible dataases: ', e);\n\n}\n// Fetch accessible streams\ntry{\n    streams = await client.listAccessibleStreams(keyid, '_system', full=false)\n    console.log(\"Accessible Streams\")\n    console.log(streams.result)\n}\ncatch(e){\n    console.log('Failed to fetch accessible streams: ', e);\n\n}\n"))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                        email='nemo@nautilus.com', password='xxxxx',\n                        geofabric='_system')\n\n# Fetch List of accessible databases and streams\nprint(\"Accessible Databases: \", client.list_accessible_databases('id1'))\n\nprint(\"Accessible Streams of a db: \", client.list_accessible_streams('id1', '_system'))\n"))),(0,l.kt)(o.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'# Fetch List of accessible databases and streams\nFEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nkeyid = "id1"\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Streams: ", resp)\n\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Collections: ", resp)\n\nurl = FED_URL + "/_api/key/" + keyid + "/database"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Databases: ", resp)\n')))),(0,l.kt)("h2",{id:"set-permissions"},"Set Permissions"),(0,l.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,l.kt)("div",{parentName:"div",className:"admonition-heading"},(0,l.kt)("h5",{parentName:"div"},(0,l.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,l.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,l.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,l.kt)("div",{parentName:"div",className:"admonition-content"},(0,l.kt)("ul",{parentName:"div"},(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"rw")," to set the access level to ",(0,l.kt)("inlineCode",{parentName:"li"},"Administrate"),"."),(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"ro")," to set the access level to ",(0,l.kt)("inlineCode",{parentName:"li"},"Read Only"),"."),(0,l.kt)("li",{parentName:"ul"},"Use ",(0,l.kt)("inlineCode",{parentName:"li"},"none")," to set the access level to ",(0,l.kt)("inlineCode",{parentName:"li"},"No access"),".")))),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Set Access Level for an API Key\n// Create Colleciton\nvar coll = await client.getCollections();\nvar collectionName = 'testCollection'\nvar streamName = 'testStream'\nconsole.log(\"Existing Collections: \", coll.result)\ntry{\n    await client.createCollection(collectionName);\n    console.log(\"Collection Created Successfully\")\n}\ncatch(e){\n    console.log(\"Collection creation did not succeed due to \" + e)\n}\ntry{\n    await client.setCollectionAccessLevel(keyid, '_system', collectionName, 'rw')\n}\ncatch(e){\n    console.log(\"Failed to set Collection Access Level: \",e)\n}\n// Create stream\ntry{\n    await client.createStream(streamName)\n}\ncatch(e){\n    console.log(\"Stream Creation Failed: \",e)\n}\ntry{\n    await client.setStreamAccessLevel(keyid, '_system', \"c8globals.\"+streamName, 'ro')\n}\ncatch(e){\n    console.log(\"Failed to set Stream Access Level: \",e)\n}\ntry{\n    await client.setDatabaseAccessLevel(keyid, '_system', 'rw')\n}\ncatch(e){\n    console.log(\"Failed to set Database Access Level: \",e)\n}\n"))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                        email='nemo@nautilus.com', password='xxxxx',\n                        geofabric='_system')\n\n# Set Accesslevels for an API Key\n\n# Create a new collection if it does not exist\nif client.has_collection('testCollection'):\n    print(\"Collection exists\")\nelse:\n    client.create_collection_kv(name='testCollection')\n# Create a new stream\n# print(client.create_stream('testStream'))\n\nprint(\"Set Database Access Level: \", client.set_database_access_level('id1', '_system', 'rw'))\n\nprint(\"Set Collection Access Level: \", client.set_collection_access_level('id1', 'testCollection', '_system', 'rw'))\n\nprint(\"Set Stream Access Level: \", client.set_stream_access_level('id1','c8globals.testStream', '_system'))\n"))),(0,l.kt)(o.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'FEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nkeyid = "id1"\n# Set Database Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Database Access Level: ", resp)\n\n# Set Collection Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Collection Access Level: ", resp)\n\n# Set Stream Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Stream Access Level: ", resp)\n')))),(0,l.kt)("h2",{id:"get-access-levels"},"Get Access Levels"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'try{\n    await client.getCollectionAccessLevel(keyid, \'_system\', collectionName)\n}\ncatch(e){\n    console.log("Failed to Get Access Level for the Collection: ",e)\n}\ntry{\n    await client.getStreamAccessLevel(keyid, \'_system\', "c8globals."+streamName)\n}\ncatch(e){\n    console.log("Failed to Get Access Level for the Stream: ",e)\n}\ntry{\n    await client.getDatabaseAccessLevel(keyid, \'_system\')\n\n}\ncatch(e){\n    console.log("Failed to Get Access Level for the Database: ",e)\n}\n'))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                        email='nemo@nautilus.com', password='xxxxx',\n                        geofabric='_system')\n\n# Get AccessLevel\nprint(\"Get DB Access Level\", client.get_database_access_level('id1','_system'))\n\nprint(\"Get Coll Access Level: \", client.get_collection_access_level('id1','testCollection', '_system'))\n\nprint(\"Get Stream Access Level: \", client.get_stream_access_level('id1','c8globals.testStream', '_system'))\n"))),(0,l.kt)(o.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'FEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nkeyid = "id1"\n# Get Database Acces Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Database Access Level: ", resp)\n\n# Get Stream Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Stream Access Level: ", resp)\n\n# Get Collection Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Collection Access Level: ", resp)\n')))),(0,l.kt)("h2",{id:"clear-access-level"},"Clear Access Level"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'// Clear Access Level\ntry{\n    await client.clearDatabaseAccessLevel(keyid, \'_system\')\n}\ncatch(e){\n    console.log("Clearing Access Level for Database Failed: ",e)\n}\ntry{\n    await client.clearStreamAccessLevel(keyid, \'_system\', "c8globals."+streamName)\n\n}\ncatch(e){\n    console.log("Clearing Access Level for Stream Failed: ",e)\n}\ntry{\n    await client.clearCollectionAccessLevel(keyid, \'_system\', collectionName)\n}\ncatch(e){\n    console.log("Clearing Access Level for Collection Failed: ",e)\n}\n'))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                        email='nemo@nautilus.com', password='xxxxx',\n                        geofabric='_system')\n\n# Clear Access Level\nprint(\"Clear DB Access Level: \", client.clear_database_access_level('id1','_system'))\n\nprint(\"Clear Coll Access Level: \", client.clear_collection_access_level('id1','testCollection', '_system'))\n\nprint(\"Clear Stream Access Level: \", client.clear_stream_access_level('id1','c8globals.testStream', '_system'))\n"))),(0,l.kt)(o.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'FEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nkeyid = "id1"\n# Clear Database Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Database Access Level: ", resp)\n\n# Clear Collection Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Collection Access Level: ", resp)\n\n# Clear Stream Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Stream Access Level: ", resp)\n')))),(0,l.kt)("h2",{id:"remove-an-api-key"},"Remove an API Key"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},"// Remove an api key\ntry{\n    await client.removeApiKey(keyid);\n}\ncatch(e){\n    console.log('API Deletion Failed: ', e);   \n}\n"))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                        email='nemo@nautilus.com', password='xxxxx',\n                        geofabric='_system')\n\n# Remove api key\nremove = client.remove_api_key('id1')\n\nprint(remove)\n"))),(0,l.kt)(o.Z,{value:"RA",label:"Rest API",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'FEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nkeyid = "id1"\n# Delete an API Key\nurl = FED_URL + "/_api/key/"+ keyid\nresp = session.delete(url, data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("API Key Deleted: ", resp)\n')))),(0,l.kt)("h2",{id:"complete-example"},"Complete Example"),(0,l.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'const jsc8 = require("jsc8");\nconst client = new jsc8("https://gdn.paas.macrometa.io");\n\nasync function main(){\n    const keyid="id1";\n    await client.login("nemo@nautilus.com", "xxxxxx");\n    // Create an api key\n    try{\n        await client.createApiKey(keyid);\n    }\n    catch(e){\n        console.log(\'API Creation Failed: \', e);\n    }\n\n    //Fetch accessible databases\n    try{\n        var databases = await client.listAccessibleDatabases(keyid)\n        console.log("Accessible Databases")\n        console.log(databases.result)\n    }\n    catch(e){\n        console.log(\'Failed to fetch accessible dataases: \', e);\n\n    }\n    // Fetch accessible streams\n    try{\n        streams = await client.listAccessibleStreams(keyid, \'_system\', full=false)\n        console.log("Accessible Streams")\n        console.log(streams.result)\n    }\n    catch(e){\n        console.log(\'Failed to fetch accessible streams: \', e);\n\n    }\n\n    // Set Access Level for an API Key\n    // Create Colleciton\n    var coll = await client.getCollections();\n    var collectionName = \'testCollection\'\n    var streamName = \'testStream\'\n    console.log("Existing Collections: ", coll.result)\n    try{\n        await client.createCollection(collectionName);\n        console.log("Collection Created Successfully")\n    }\n    catch(e){\n        console.log("Collection creation did not succeed due to " + e)\n    }\n    try{\n        await client.setCollectionAccessLevel(keyid, \'_system\', collectionName, \'rw\')\n    }\n    catch(e){\n        console.log("Failed to set Collection Access Level: ",e)\n    }\n    // Create stream\n    try{\n        await client.createStream(streamName)\n    }\n    catch(e){\n        console.log("Stream Creation Failed: ",e)\n    }\n    try{\n        await client.setStreamAccessLevel(keyid, \'_system\', "c8globals."+streamName, \'ro\')\n    }\n    catch(e){\n        console.log("Failed to set Stream Access Level: ",e)\n    }\n    try{\n        await client.setDatabaseAccessLevel(keyid, \'_system\', \'rw\')\n    }\n    catch(e){\n        console.log("Failed to set Database Access Level: ",e)\n    }\n\n    // Get Access Levels\n    try{\n        await client.getCollectionAccessLevel(keyid, \'_system\', collectionName)\n    }\n    catch(e){\n        console.log("Failed to Get Access Level for the Collection: ",e)\n    }\n    try{\n        await client.getStreamAccessLevel(keyid, \'_system\', "c8globals."+streamName)\n    }\n    catch(e){\n        console.log("Failed to Get Access Level for the Stream: ",e)\n    }\n    try{\n        await client.getDatabaseAccessLevel(keyid, \'_system\')\n\n    }\n    catch(e){\n        console.log("Failed to Get Access Level for the Database: ",e)\n    }\n    // Clear Access Level\n    try{\n        await client.clearDatabaseAccessLevel(keyid, \'_system\')\n    }\n    catch(e){\n        console.log("Clearing Access Level for Database Failed: ",e)\n    }\n    try{\n        await client.clearStreamAccessLevel(keyid, \'_system\', "c8globals."+streamName)\n\n    }\n    catch(e){\n        console.log("Clearing Access Level for Stream Failed: ",e)\n    }\n    try{\n        await client.clearCollectionAccessLevel(keyid, \'_system\', collectionName)\n    }\n    catch(e){\n        console.log("Clearing Access Level for Collection Failed: ",e)\n\n    }\n    // Remove an api key\n    try{\n        await client.removeApiKey(keyid);\n    }\n    catch(e){\n        console.log(\'API Deletion Failed: \', e);\n\n    }\n}\n\nmain();\n'))),(0,l.kt)(o.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},"from c8 import C8Client\n# Create a connection to gdn\nclient = C8Client(protocol='https', host='gdn.paas.macrometa.io', port=443,\n                        email='nemo@nautilus.com', password='xxxxx',\n                        geofabric='_system')\n\n#remove = client.remove_api_key('id1')\n\n# Create an api key\nprint(\"Create API Key: \", client.create_api_key('id1'))\n\n# Fetch List of accessible databases and streams\nprint(\"Accessible Databases: \", client.list_accessible_databases('id1'))\n\nprint(\"Accessible Streams of a db: \", client.list_accessible_streams('id1', '_system'))\n\n# Set Accesslevels for an API Key\n\n# Create a new collection if it does not exist\nif client.has_collection('testCollection'):\n    print(\"Collection exists\")\nelse:\n    client.create_collection_kv(name='testCollection')\n# Create a new stream\n# print(client.create_stream('testStream'))\n\nprint(\"Set DB Access Level: \", client.set_database_access_level('id1', '_system', 'rw'))\n\nprint(\"Set Coll Access Level: \", client.set_collection_access_level('id1', 'testCollection', '_system', 'rw'))\n\nprint(\"Set Stream Access Level: \", client.set_stream_access_level('id1','c8globals.testStream', '_system'))\n\n# Get AccessLevel\nprint(\"Get DB Access Level\", client.get_database_access_level('id1','_system'))\n\nprint(\"Get Coll Access Level: \", client.get_collection_access_level('id1','testCollection', '_system'))\n\nprint(\"Get Stream Access Level: \", client.get_stream_access_level('id1','c8globals.testStream', '_system'))\n\n# Clear Access Level\nprint(\"Clear DB Access Level: \", client.clear_database_access_level('id1','_system'))\n\nprint(\"Clear Coll Access Level: \", client.clear_collection_access_level('id1','testCollection', '_system'))\n\nprint(\"Clear Stream Access Level: \", client.clear_stream_access_level('id1','c8globals.testStream', '_system'))\n\n# Remove api key\nremove = client.remove_api_key('id1')\n\nprint(remove)\n"))),(0,l.kt)(o.Z,{value:"RA p",label:"Rest API (python)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-py"},'import requests\nimport json\n\n# Constants\n\nFEDERATION = "api-gdn.macrometa.io"\nFED_URL = "https://{}".format(FEDERATION)\nEMAIL = "nemo@nautilus.com"\nPASSWORD = "xxxxxx"\nAUTH_TOKEN = "bearer "\n\n# Create a HTTPS Session\n\nurl = "{}/_open/auth".format(FED_URL)\npayload = {\n    \'email\':EMAIL,\n    \'password\':PASSWORD\n    }\nheaders = {\n    \'content-type\': \'application/json\'\n    }\n\nresponse = requests.post(url, data = json.dumps(payload), headers = headers)\n\nif response.status_code == 200:\n    resp_body = json.loads(response.text)\n    AUTH_TOKEN += resp_body["jwt"]\n    TENANT = resp_body["tenant"]\nelse:\n    raise Exception("Error while getting auth token. Code:{}, Reason:{}".format(response.status_code,response.reason))\n\n\nsession = requests.session()\nsession.headers.update({"content-type": \'application/json\'})\nsession.headers.update({"authorization": AUTH_TOKEN})\n\n# Create an API Key\nkeyid = "id1"\nurl = FED_URL + "/_api/key"\npayload= {\n"keyid": keyid\n}\n\nresp = session.post(url, data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("API Key Created: ", resp)\n        \n# Fetch List of accessible databases and streams\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Streams: ", resp)\n\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Collections: ", resp)\n\nurl = FED_URL + "/_api/key/" + keyid + "/database"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Accessible Databases: ", resp)\n\n# Set Database Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Database Access Level: ", resp)\n\n# Set Collection Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Collection Access Level: ", resp)\n\n# Set Stream Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\npayload={\n"grant": "rw"\n}\nresp = session.put(url,data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Set Stream Access Level: ", resp)\n\n# Get Database Acces Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Database Access Level: ", resp)\n\n# Get Stream Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Stream Access Level: ", resp)\n\n# Get Collection Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\nresp = session.get(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Get Collection Access Level: ", resp)\n\n# Clear Database Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Database Access Level: ", resp)\n\n# Clear Collection Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/collection/testCollection"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Collection Access Level: ", resp)\n\n# Clear Stream Access Level\nurl = FED_URL + "/_api/key/" + keyid + "/database/_system/stream/c8globals.testStream"\nresp = session.delete(url)\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("Clear Stream Access Level: ", resp)\n\n# Delete an API Key\nurl = FED_URL + "/_api/key/"+ keyid\nresp = session.delete(url, data = json.dumps(payload))\nresp = json.loads(resp.text)\nif resp[\'error\'] is True:\n    print("ERROR: " , resp)\nelse:\n    print("API Key Deleted: ", resp)\n'))),(0,l.kt)(o.Z,{value:"RA js",label:"Rest API (javascript)",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'class APIRequest {\n_headers = {\nAccept: "application/json",\n"Content-Type": "application/json",\n};\n\nconstructor(url) {\nthis._url = url;\n}\n\nlogin(email, password) {\nconst endpoint = "/_open/auth";\n\nconst self = this;\n\nreturn new Promise(function (resolve, reject) {\nself\n.req(endpoint, {\nbody: { email, password },\nmethod: "POST",\n})\n.then(({ jwt, ...data }) => {\nself._headers.authorization = bearer `${jwt}`;\nresolve(data);\n})\n.catch(reject);\n});\n}\n\n_handleResponse(response, resolve, reject) {\nif (response.ok) {\nresolve(response.json());\n} else {\nreject(response);\n}\n}\n\nreq(endpoint, { body, ...options } = {}) {\nconst self = this;\nreturn new Promise(function (resolve, reject) {\nfetch(self._url + endpoint, {\nheaders: self._headers,\nbody: body ? JSON.stringify(body) : undefined,\n...options,\n}).then((response) => self._handleResponse(response, resolve, reject));\n});\n}\n}\nconst EMAIL = "nemo@nautilus.com";\nconst PASSWORD = "xxxxxx";\nconst FEDERATION_URL = "https://api-gdn.prod.macrometa.io";\n\nconst COLLECTION_NAME = "testCollection";\nconst STREAM_NAME = "testStream"\nconst KEY_ID = "id1"\nconst run = async function () {\ntry {\nconst connection = new APIRequest(FEDERATION_URL);\n\n/* -------------------- Login (nemo@nautilus.com/xxxxxx) -------------------- */\n\nawait connection.login(EMAIL, PASSWORD);\n\nconsole.log("Login Successfully using", EMAIL);\n\n/* -------------------------- Create an API Key ------------------------- */\n\nconst apiKey = await connection.req(\n`/_fabric/_system/_api/key`,\n{\nmethod: "POST",\nbody: {\n    "keyid": KEY_ID\n}\n}\n);\n\nconsole.log("API KEY CREATED SUCCESSFULLY", apiKey);\n\n/* ---------------------------- Get List of Accessible Databases and Streams ---------------------------- */\n\nconst accessibleStreams = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream`,\n{\nmethod: "GET",\n}\n);\n\nconsole.log("ACCESSIBLE STREAMS", accessibleStreams);\n\nconst accessibleCollections = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection`,\n{\nmethod: "GET",\n}\n);\n\nconsole.log("ACCESSIBLE COLLECTIONS", accessibleCollections);\n\nconst accessibleDatabases = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database`,\n{\nmethod: "GET",\n}\n);\n\nconsole.log("ACCESSIBLE DATABASES", accessibleDatabases);\n    \n\n/* ----------------------------- Set Access Level ----------------------------- */\nconst setDatabaseAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system`,\n{\nmethod: "PUT",\nbody:{\n    "grant": "rw"\n}\n}\n);\nconsole.log("SET DATABASE ACCESS LEVEL", setDatabaseAccessLevel);\n\n\nconst setCollectionAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection/${COLLECTION_NAME}`,\n{\nmethod: "PUT",\nbody:{\n    "grant": "rw"\n}\n}\n);\n    \nconsole.log("SET COLLECTION ACCESS LEVEL", setCollectionAccessLevel);\n\nconst setStreamAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream/c8globals.${STREAM_NAME}`,\n{\nmethod: "PUT",\nbody:{\n    "grant": "rw"\n}\n}\n);\n    \nconsole.log("SET STREAM ACCESS LEVEL", setStreamAccessLevel);\n\n    \n/* ---------------------------- Get Access Level ---------------------------- */\n\nconst getStreamAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream/c8globals.${STREAM_NAME}`,\n{\nmethod: "GET",\n}\n);\n    \nconsole.log("GET STREAM ACCESS LEVEL", getStreamAccessLevel);\n\nconst getCollectionAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection/${COLLECTION_NAME}`,\n{\nmethod: "GET",\n}\n);\n    \nconsole.log("GET COLLECTION ACCESS LEVEL", getCollectionAccessLevel);\n\nconst getDatabaseAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system`,\n{\nmethod: "GET",\n}\n);\nconsole.log("SET DATABASE ACCESS LEVEL", getDatabaseAccessLevel);\n\n\n\n/* -----------------------------Clear Access Level ----------------------------- */\n\nconst clearDatabaseAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system`,\n{\nmethod: "DELETE",\n}\n);\nconsole.log("CLEAR DATABASE ACCESS LEVEL", clearDatabaseAccessLevel);\n\nconst clearCollectionAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/collection/${COLLECTION_NAME}`,\n{\nmethod: "DELETE",\n}\n);\n        \nconsole.log("CLEAR COLLECTION ACCESS LEVEL", clearCollectionAccessLevel);\n\nconst clearStreamAccessLevel = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}/database/_system/stream/c8globals.${STREAM_NAME}`,\n{\nmethod: "DELETE",\n}\n);\n    \nconsole.log("CLEAR STREAM ACCESS LEVEL", clearStreamAccessLevel);\n/* --------------------------- Delete API Key ---------------------------- */\n\nconst removeApiKey = await connection.req(\n`/_fabric/_system/_api/key/${KEY_ID}`,\n{\nmethod: "DELETE",\n}\n);\n    \nconsole.log("CLEAR STREAM ACCESS LEVEL", removeApiKey);\n\n    \n} catch (e) {\nconsole.error(e);\n}\n};\n\nrun();\n')))))}v.isMDXComponent=!0}}]);