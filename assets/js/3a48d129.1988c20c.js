"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2381],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var l=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);n&&(l=l.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,l)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,l,a=function(e,n){if(null==e)return{};var t,l,a={},o=Object.keys(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(l=0;l<o.length;l++)t=o[l],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=l.createContext({}),s=function(e){var n=l.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},u=function(e){var n=s(e.components);return l.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return l.createElement(l.Fragment,{},n)}},m=l.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(t),d=a,b=m["".concat(c,".").concat(d)]||m[d]||p[d]||o;return t?l.createElement(b,r(r({ref:n},u),{},{components:t})):l.createElement(b,r({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,r=new Array(o);r[0]=m;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,r[1]=i;for(var s=2;s<o;s++)r[s]=t[s];return l.createElement.apply(null,r)}return l.createElement.apply(null,t)}m.displayName="MDXCreateElement"},72360:function(e,n,t){t.d(n,{Z:function(){return r}});var l=t(67294),a=t(86010),o="tabItem_OmH5";function r(e){var n=e.children,t=e.hidden,r=e.className;return l.createElement("div",{role:"tabpanel",className:(0,a.Z)(o,r),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return d}});var l=t(87462),a=t(67294),o=t(72389),r=t(67392),i=t(7094),c=t(12466),s=t(86010),u="tabList_uSqn",p="tabItem_LplD";function m(e){var n,t,o,m=e.lazy,d=e.block,b=e.defaultValue,f=e.values,g=e.groupId,v=e.className,h=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),y=null!=f?f:h.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),k=(0,r.l)(y,(function(e,n){return e.value===n.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var _=null===b?b:null!=(n=null!=b?b:null==(t=h.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=h[0])?void 0:o.props.value;if(null!==_&&!y.some((function(e){return e.value===_})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+_+'" but none of its children has the corresponding value. Available values are: '+y.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var w=(0,i.U)(),T=w.tabGroupChoices,C=w.setTabGroupChoices,E=(0,a.useState)(_),O=E[0],x=E[1],N=[],D=(0,c.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var j=T[g];null!=j&&j!==O&&y.some((function(e){return e.value===j}))&&x(j)}var S=function(e){var n=e.currentTarget,t=N.indexOf(n),l=y[t].value;l!==O&&(D(n),x(l),null!=g&&C(g,l))},P=function(e){var n,t=null;switch(e.key){case"ArrowRight":var l=N.indexOf(e.currentTarget)+1;t=N[l]||N[0];break;case"ArrowLeft":var a=N.indexOf(e.currentTarget)-1;t=N[a]||N[N.length-1]}null==(n=t)||n.focus()};return a.createElement("div",{className:(0,s.Z)("tabs-container",u)},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,s.Z)("tabs",{"tabs--block":d},v)},y.map((function(e){var n=e.value,t=e.label,o=e.attributes;return a.createElement("li",(0,l.Z)({role:"tab",tabIndex:O===n?0:-1,"aria-selected":O===n,key:n,ref:function(e){return N.push(e)},onKeyDown:P,onFocus:S,onClick:S},o,{className:(0,s.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":O===n})}),null!=t?t:n)}))),m?(0,a.cloneElement)(h.filter((function(e){return e.props.value===O}))[0],{className:"margin-top--md"}):a.createElement("div",{className:"margin-top--md"},h.map((function(e,n){return(0,a.cloneElement)(e,{key:n,hidden:e.props.value!==O})}))))}function d(e){var n=(0,o.Z)();return a.createElement(m,(0,l.Z)({key:String(n)},e))}},1972:function(e,n,t){t.r(n),t.d(n,{assets:function(){return m},contentTitle:function(){return u},default:function(){return f},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return d}});var l=t(87462),a=t(63366),o=(t(67294),t(3905)),r=t(9877),i=t(72360),c=["components"],s={sidebar_position:4,title:"Realtime Updates"},u=void 0,p={unversionedId:"collections/documents/tutorials/using-realtime-updates",id:"collections/documents/tutorials/using-realtime-updates",title:"Realtime Updates",description:"This tutorial is about using Macrometa GDN as a realtime database with local latencies across the globe.",source:"@site/docs/collections/documents/tutorials/using-realtime-updates.md",sourceDirName:"collections/documents/tutorials",slug:"/collections/documents/tutorials/using-realtime-updates",permalink:"/docs/collections/documents/tutorials/using-realtime-updates",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/documents/tutorials/using-realtime-updates.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Realtime Updates"},sidebar:"tutorialSidebar",previous:{title:"Bulk Update with RestQL",permalink:"/docs/collections/documents/tutorials/bulk-update-restql"},next:{title:"Maps, Sets, SortedSets",permalink:"/docs/collections/documents/tutorials/maps_sets_sortedsets"}},m={},d=[{value:"Pre-requisite",id:"pre-requisite",level:2},{value:"Driver download",id:"driver-download",level:2},{value:"Code Sample",id:"code-sample",level:2}],b={toc:d};function f(e){var n=e.components,t=(0,a.Z)(e,c);return(0,o.kt)("wrapper",(0,l.Z)({},b,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"This tutorial is about using Macrometa GDN as a realtime database with local latencies across the globe."),(0,o.kt)("h2",{id:"pre-requisite"},"Pre-requisite"),(0,o.kt)("p",null,"Let's assume your"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Tenant name is ",(0,o.kt)("inlineCode",{parentName:"li"},"nemo@nautilus.com")," and"),(0,o.kt)("li",{parentName:"ul"},"User password is ",(0,o.kt)("inlineCode",{parentName:"li"},"xxxxxx"),".")),(0,o.kt)("h2",{id:"driver-download"},"Driver download"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"  pyC8 requires Python 3.5+. Python 3.6 or higher is recommended\n\n  To install pyC8, simply run\n\n      $ pip3 install pyC8\n\n  or, if you prefer to use conda:\n\n      conda install -c conda-forge pyC8\n\n  or pipenv:\n\n      pipenv install --pre pyC8\n\n  Once the installation process is finished, you can begin developing applications in Python.\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"  With Yarn or NPM\n\n      yarn add jsc8\n      (or)\n      npm install jsc8\n\n  If you want to use the driver outside of the current directory, you can also install it globally using the `--global` flag:\n\n      npm install --global jsc8\n\n  From source,\n\n      git clone https://github.com/macrometacorp/jsc8.git\n      cd jsC8\n      npm install\n      npm run dist\n")))),(0,o.kt)("h2",{id:"code-sample"},"Code Sample"),(0,o.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},'  from c8 import C8Client\n  import threading\n  import pprint\n  import time\n\n  # Variables - URLs\n  global_url = "gdn.paas.macrometa.io"\n\n\n  # Variables - DB\n  email = "nemo@nautilus.com"\n  password = "xxxxx"\n  geo_fabric = "_system"\n  collection_name = "ddos"\n\n  # Variables - Data\n  data = [\n      {"ip": "10.1.1.1", "action": "block", "rule": "blacklistA"},\n      {"ip": "20.1.1.2", "action": "block", "rule": "blacklistA"},\n      {"ip": "30.1.1.3", "action": "block", "rule": "blacklistB"},\n      {"ip": "40.1.1.4", "action": "block", "rule": "blacklistA"},\n      {"ip": "50.1.1.5", "action": "block", "rule": "blacklistB"},\n    ]\n\n  pp = pprint.PrettyPrinter(indent=4)\n\n  if __name__ == \'__main__\':\n\n    # Step1: Open connection to GDN. You will be routed to closest region.\n    print("\\n1. CONNECT: federation: {},  user: {}".format(global_url, email))\n    client = C8Client(protocol=\'https\', host=global_url, port=443,\n                      email=email, password=password,\n                      geofabric=geo_fabric)      \n\n    # Step2: Create a collection if not exists\n    print("\\n2. CREATE_COLLECTION: region: {},  collection: {}".format(global_url, collection_name))\n    if client.has_collection(collection_name):\n        collection = client.collection(collection_name)\n    else:\n        collection = client.create_collection(collection_name)\n\n    # Subscriber to receive events when changes are made to collection.\n    def create_callback():\n      def callback_fn(event):\n          pp.pprint(event)\n          return\n      client.on_change(collection_name, callback=callback_fn)\n\n    # Step3: Subscribe to receive documents in realtime (PUSH model)\n    print("\\n3. SUBSCRIBE_COLLECTION: region: {},  collection: {}".format(global_url, collection_name))\n    rt_thread = threading.Thread(target=create_callback)\n    rt_thread.start()\n    time.sleep(2)\n    print("Callback registered for collection: {}".format(collection_name))\n\n    # Step4: Subscribe to receive documents in realtime (PUSH model)\n    print("\\n4. INSERT_DOCUMENTS: region: {},  collection: {}".format(global_url, collection_name))\n    client.insert_document(collection_name, document=data)\n    \n    # Step5: Wait to close the callback.\n    print("\\n5. Waiting to close callback")\n    rt_thread.join()\n\n    # Step6: Delete data.\n    print("\\n6. DELETE_DATA: region: {}, collection: {}".format(global_url, collection_name))\n    collection.truncate()\n    #client.delete_collection(collection_name)\n'))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'  \'use strict\'\n\n  const jsc8 = require(\'jsc8\');\n\n  // Variables - DB\n  const global_url = "https://gdn.paas.macrometa.io";\n\n  // Crete a authenticated instance with Token / Apikey\n  // const client = new jsc8({url: global_url, token: "XXXX", fabricName: \'_system\'});\n  // const client = new jsc8({url: global_url, apiKey: "XXXX", fabricName: \'_system\'});\n  // await console.log("Authentication done!!...");\n\n  // Or use Email & Password to Authenticate client instance\n  const client = new jsc8(global_url);\n\n  await client.login("nemo@nautilus.com", "xxxxxx");\n\n  //Variables\n  const collection_name = "ddos";\n  let collectionDetails;\n\n  // Variables - Data\n  const data = [\n    {"ip": "10.1.1.1", "action": "block", "rule": "blacklistA"},\n    {"ip": "20.1.1.2", "action": "block", "rule": "blacklistA"},\n    {"ip": "30.1.1.3", "action": "block", "rule": "blacklistB"},\n    {"ip": "40.1.1.4", "action": "block", "rule": "blacklistA"},\n    {"ip": "50.1.1.5", "action": "block", "rule": "blacklistB"},\n  ];\n\n  async function createCollection() {\n    console.log("\\n 2. CREATE_COLLECTION");\n\n    try{\n        console.log(`Creating the collection ${collection_name}...`);\n        const exists_coll = await client.hasCollection(collection_name);\n        if (exists_coll === false) {\n            await client.createCollection(collection_name);\n        }\n\n        // adding a onChange listner for collection\n          const listener = await client.onCollectionChange(collection_name);\n          listener.on(\'message\',(msg) => console.log("message=>", msg));\n          listener.on(\'open\',() => {\n            this.callback_fn(collection);\n          });\n          listener.on(\'close\',() => console.log("connection closed"));\n      }\n      catch (e) {\n        await console.log("Collection creation did not succeed due to " + e);\n      }\n  }\n\n  async function insertData() {\n    console.log(`\\n 3. INSERT_DATA in region ${global_url}`);\n    await client.insertDocumentMany(collection_name, data);\n  }\n\n  async function deleteData(){\n    console.log("\\n 4. DELETE_DATA");\n    await client.deleteCollection(collection_name);\n  }\n\n  (async function(){\n    await createCollection();\n    await insertData();\n    await deleteData();\n  })();\n')))))}f.isMDXComponent=!0}}]);