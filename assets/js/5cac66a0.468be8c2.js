"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4240],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return d}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},c=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),m=p(r),d=a,g=m["".concat(l,".").concat(d)]||m[d]||u[d]||i;return r?n.createElement(g,o(o({ref:t},c),{},{components:r})):n.createElement(g,o({ref:t},c))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:a,o[1]=s;for(var p=2;p<i;p++)o[p]=r[p];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},48164:function(e,t,r){r.r(t),r.d(t,{assets:function(){return c},contentTitle:function(){return l},default:function(){return d},frontMatter:function(){return s},metadata:function(){return p},toc:function(){return u}});var n=r(87462),a=r(63366),i=(r(67294),r(3905)),o=["components"],s={sidebar_position:14,title:"Traversals"},l=void 0,p={unversionedId:"c8ql/examples/traversals",id:"c8ql/examples/traversals",title:"Traversals",description:"Finding the start vertex via a geo query",source:"@site/docs/c8ql/examples/traversals.md",sourceDirName:"c8ql/examples",slug:"/c8ql/examples/traversals",permalink:"/docs/c8ql/examples/traversals",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/c8ql/examples/traversals.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,title:"Traversals"},sidebar:"tutorialSidebar",previous:{title:"Subqueries",permalink:"/docs/c8ql/examples/subqueries"},next:{title:"Overview",permalink:"/docs/c8ql/operations/overview"}},c={},u=[{value:"Finding the start vertex via a geo query",id:"finding-the-start-vertex-via-a-geo-query",level:2}],m={toc:u};function d(e){var t=e.components,s=(0,a.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},m,s,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"finding-the-start-vertex-via-a-geo-query"},"Finding the start vertex via a geo query"),(0,i.kt)("p",null,"Our first example will locate the start vertex for a graph traversal via ",(0,i.kt)("a",{parentName:"p",href:"../../collections/documents/indexing/index-basics#geo-index"},"a geo index"),"."),(0,i.kt)("p",null,"We use the city graph and its geo indices: ",(0,i.kt)("img",{alt:"cities_graph(1)",src:r(62417).Z,width:"992",height:"777"})),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'var examples = require("@c8_db/graph-examples/example-graph.js");\nvar g = examples.loadGraph("routeplanner");\nvar bonn=[50.7340, 7.0998];\ndb._query(`FOR startCity IN\n........>             WITHIN(germanCity, @lat, @long, @radius)\n........>               RETURN startCity`,\n........>   {lat: bonn[0], long: bonn[1], radius: 400000}\n........> ).toArray()\n')),(0,i.kt)("p",null,"We search all german cities in a range of 400 km around the ex-capital ",(0,i.kt)("strong",{parentName:"p"},"Bonn"),": ",(0,i.kt)("strong",{parentName:"p"},"Hamburg")," and ",(0,i.kt)("strong",{parentName:"p"},"Cologne"),". We won't find ",(0,i.kt)("strong",{parentName:"p"},"Paris")," since its in the ",(0,i.kt)("inlineCode",{parentName:"p"},"frenchCity")," collection."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"db._query(`FOR startCity IN\n........>             WITHIN(germanCity, @lat, @long, @radius)\n........>               FOR v, e, p IN 1..1 OUTBOUND startCity\n........>                 GRAPH 'routeplanner'\n........>     RETURN {startcity: startCity._key, traversedCity: v}`,\n........> {\n........>  lat: bonn[0],\n........>  long: bonn[1],\n........>  radius: 400000\n........> } ).toArray()\n")),(0,i.kt)("p",null,"The geo index query returns us ",(0,i.kt)("inlineCode",{parentName:"p"},"startCity")," (",(0,i.kt)("strong",{parentName:"p"},"Cologne")," and ",(0,i.kt)("strong",{parentName:"p"},"Hamburg"),") which we then use as starting point for our graph traversal. For simplicity we only return their direct neighbours. We format the return result so we can see from which ",(0,i.kt)("inlineCode",{parentName:"p"},"startCity")," the traversal came."),(0,i.kt)("p",null,"Alternatively we could use a ",(0,i.kt)("inlineCode",{parentName:"p"},"LET")," statement with a subquery to group the traversals by their ",(0,i.kt)("inlineCode",{parentName:"p"},"startCity")," efficiently:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},"db._query(`FOR startCity IN\n........>            WITHIN(germanCity, @lat, @long, @radius)\n........>              LET oneCity = (FOR v, e, p IN 1..1 OUTBOUND startCity\n........>                GRAPH 'routeplanner' RETURN v)\n........>              return {startCity: startCity._key, connectedCities: oneCity}`,\n........> {\n........>  lat: bonn[0],\n........>  long: bonn[1],\n........>  radius: 400000\n........> } ).toArray();\n")),(0,i.kt)("p",null,"Finally, we clean up again:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'examples.dropGraph("routeplanner");\n')))}d.isMDXComponent=!0},62417:function(e,t,r){t.Z=r.p+"assets/images/cities_graph-d8e1073687e912930a91dbfc98bd8fe3.png"}}]);