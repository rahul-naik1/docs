"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2641],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return d}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var u=a.createContext({}),o=function(e){var t=a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=o(e.components);return a.createElement(u.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,u=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),c=o(n),d=r,g=c["".concat(u,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(g,i(i({ref:t},s),{},{components:n})):a.createElement(g,i({ref:t},s))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=c;var p={};for(var u in t)hasOwnProperty.call(t,u)&&(p[u]=t[u]);p.originalType=e,p.mdxType="string"==typeof e?e:r,i[1]=p;for(var o=2;o<l;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},25292:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return u},default:function(){return d},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return m}});var a=n(87462),r=n(63366),l=(n(67294),n(3905)),i=["components"],p={sidebar_position:6},u="Regex",o={unversionedId:"cep/reference/extensions/execution/regex",id:"cep/reference/extensions/execution/regex",title:"Regex",description:"This extension provides basic RegEx execution capabilities such as find, match, etc.",source:"@site/docs/cep/reference/extensions/execution/regex.md",sourceDirName:"cep/reference/extensions/execution",slug:"/cep/reference/extensions/execution/regex",permalink:"/docs/cep/reference/extensions/execution/regex",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/extensions/execution/regex.md",tags:[],version:"current",sidebarPosition:6,frontMatter:{sidebar_position:6},sidebar:"tutorialSidebar",previous:{title:"Math",permalink:"/docs/cep/reference/extensions/execution/math"},next:{title:"Reorder",permalink:"/docs/cep/reference/extensions/execution/reorder"}},s={},m=[{value:"Features",id:"features",level:2},{value:"find",id:"find",level:2},{value:"group",id:"group",level:2},{value:"lookingAt",id:"lookingat",level:2},{value:"matches",id:"matches",level:2}],c={toc:m};function d(e){var t=e.components,n=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"regex"},"Regex"),(0,l.kt)("p",null,"This extension provides basic RegEx execution capabilities such as ",(0,l.kt)("inlineCode",{parentName:"p"},"find"),", ",(0,l.kt)("inlineCode",{parentName:"p"},"match"),", etc."),(0,l.kt)("h2",{id:"features"},"Features"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"#find"},"find (Function)"))),(0,l.kt)("p",{parentName:"li"},"  Finds the subsequence that matches the given regex pattern.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"#group"},"group (Function)"))),(0,l.kt)("p",{parentName:"li"},"  Returns the subsequence captured by the given group during the regex match operation.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"#lookingat"},"lookingAt (Function)"))),(0,l.kt)("p",{parentName:"li"},"  Matches the input.sequence from the beginning against the regex pattern, and unlike regex:matches() it does not require that the entire input.sequence be matched.")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("p",{parentName:"li"},(0,l.kt)("strong",{parentName:"p"},(0,l.kt)("a",{parentName:"strong",href:"#matches"},"matches (Function)"))),(0,l.kt)("p",{parentName:"li"},"  Matches the entire input.sequence against the regex pattern."))),(0,l.kt)("h2",{id:"find"},"find"),(0,l.kt)("p",null,"Finds the subsequence that matches the given regex pattern."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"\n<BOOL> regex:find(<STRING> regex, <STRING> input.sequence)\n<BOOL> regex:find(<STRING> regex, <STRING> input.sequence, <INT> starting.index)\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Query Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"regex"),(0,l.kt)("td",{parentName:"tr",align:null},"A regular expression that is matched to a sequence in order to find the subsequence of the same. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"\\d\\d(.*)macrometa"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input.sequence"),(0,l.kt)("td",{parentName:"tr",align:null},"The input sequence to be matched with the regular expression. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"2 products are produced by Macrometa"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"starting.index"),(0,l.kt)("td",{parentName:"tr",align:null},"The starting index of the input sequence from where the input sequence ismatched with the given regex pattern.For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"10"),"."),(0,l.kt)("td",{parentName:"tr",align:null},"INT"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,l.kt)("p",null,"EXAMPLE 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\nregex:find("\\d\\d(.*)Macrometa", "2 products are produced by Macrometa currently")\n\n')),(0,l.kt)("p",null,"This method attempts to find the subsequence of the input.sequence that matches the regex pattern, ",(0,l.kt)("inlineCode",{parentName:"p"},"\\d\\d(.*)Macrometa"),". It returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true")," as a subsequence exists."),(0,l.kt)("p",null,"EXAMPLE 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\nregex:find("\\d\\d(.*)Macrometa", "2 products are produced by Macrometa.", 4)\n\n')),(0,l.kt)("p",null,"This method attempts to find the subsequence of the input.sequence that matches the regex pattern, ",(0,l.kt)("inlineCode",{parentName:"p"},"\\d\\d(.*)Macrometa")," starting from index ",(0,l.kt)("inlineCode",{parentName:"p"},"4"),". It returns 'false' as subsequence does not exists."),(0,l.kt)("h2",{id:"group"},"group"),(0,l.kt)("p",null,"Returns the subsequence captured by the given group during the regex match operation."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"\n<STRING> regex:group(<STRING> regex, <STRING> input.sequence, <INT> group.id)\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Query Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"regex"),(0,l.kt)("td",{parentName:"tr",align:null},"A regular expression. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"\\d\\d(.*)Macrometa.")),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input.sequence"),(0,l.kt)("td",{parentName:"tr",align:null},"The input sequence to be matched with the regular expression. For example, 2",(0,l.kt)("inlineCode",{parentName:"td"},"1 products are produced by Macrometa")),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"group.id"),(0,l.kt)("td",{parentName:"tr",align:null},"The given group id of the regex expression. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"2")),(0,l.kt)("td",{parentName:"tr",align:null},"INT"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,l.kt)("p",null,"EXAMPLE 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\nregex:group("\\d\\d(.*)(Macrometa.*)(Macrometa.*)", "2 products are produced within 2 years by Macrometa currently by Macrometa employees", 3)\n\n')),(0,l.kt)("p",null,"Function returns 'Macrometa employees', the subsequence captured by the  groupID 3 according to the regex pattern, ",(0,l.kt)("inlineCode",{parentName:"p"},"\\d\\d(.*)(Macrometa.*)(Macrometa.*)"),"."),(0,l.kt)("h2",{id:"lookingat"},"lookingAt"),(0,l.kt)("p",null,"Matches the input.sequence from the beginning against the regex pattern, and unlike ",(0,l.kt)("inlineCode",{parentName:"p"},"regex:matches() it does not require that the entire input.sequence be matched."),"."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"\n<BOOL> regex:lookingAt(<STRING> regex, <STRING> input.sequence)\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Query Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"regex"),(0,l.kt)("td",{parentName:"tr",align:null},"A regular expression. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"\\d\\d(.*)Macrometa.")),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input.sequence"),(0,l.kt)("td",{parentName:"tr",align:null},"The input sequence to be matched with the regular expression. For example, 2",(0,l.kt)("inlineCode",{parentName:"td"},"1 products are produced by Macrometa")),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,l.kt)("p",null,"EXAMPLE 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\nregex:lookingAt("\\d\\d(.*)(Macrometa.*)", "21 products are produced by Macrometa currently in Sri Lanka")\n\n')),(0,l.kt)("p",null,"Function matches the input.sequence against the regex pattern, ",(0,l.kt)("inlineCode",{parentName:"p"},"\\d\\d(.*)(Macrometa.*)")," from the beginning, and as it matches it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"EXAMPLE 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\nregex:lookingAt("Macrometa(.*)middleware(.*)", "sample test string and Macrometa is situated in trace and it\'s a middleware company")\n\n')),(0,l.kt)("p",null,"Function matches the input.sequence against the regex pattern, ",(0,l.kt)("inlineCode",{parentName:"p"},"Macrometa(.*)middleware(.*)")," from the beginning, and as it does not match it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."),(0,l.kt)("h2",{id:"matches"},"matches"),(0,l.kt)("p",null,"Matches the entire input.sequence against the regex pattern."),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Syntax:")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},"\n<BOOL> regex:matches(<STRING> regex, <STRING> input.sequence)\n\n")),(0,l.kt)("p",null,(0,l.kt)("strong",{parentName:"p"},"Query Parameters:")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:null},"Name"),(0,l.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,l.kt)("th",{parentName:"tr",align:null},"Optional"),(0,l.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"regex"),(0,l.kt)("td",{parentName:"tr",align:null},"A regular expression. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"\\d\\d(.*)Macrometa.")),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:null},"input.sequence"),(0,l.kt)("td",{parentName:"tr",align:null},"The input sequence to be matched with the regular expression. For example, ",(0,l.kt)("inlineCode",{parentName:"td"},"2 products are produced by Macrometa")),(0,l.kt)("td",{parentName:"tr",align:null},"STRING"),(0,l.kt)("td",{parentName:"tr",align:null},"No"),(0,l.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,l.kt)("p",null,"EXAMPLE 1"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\nregex:matches("Macrometa(.*)middleware(.*)", "Macrometa is situated in trace and its a middleware company")\n\n')),(0,l.kt)("p",null,"Function matches the entire input.sequence against ",(0,l.kt)("inlineCode",{parentName:"p"},"Macrometa(.*)middleware(.*)")," regex pattern, and as it matches it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"true"),"."),(0,l.kt)("p",null,"EXAMPLE 2"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-bash"},'\nregex:matches("Macrometa(.*)middleware", "Macrometa is situated in trace and its a middleware company")\n\n')),(0,l.kt)("p",null,"Function matches the entire input.sequence against ",(0,l.kt)("inlineCode",{parentName:"p"},"Macrometa(.*)middleware")," regex pattern. As it does not match it returns ",(0,l.kt)("inlineCode",{parentName:"p"},"false"),"."))}d.isMDXComponent=!0}}]);