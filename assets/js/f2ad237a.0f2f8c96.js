"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7667],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return m}});var a=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var l=a.createContext({}),u=function(e){var n=a.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},c=function(e){var n=u(e.components);return a.createElement(l.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=u(t),m=r,h=d["".concat(l,".").concat(m)]||d[m]||p[m]||o;return t?a.createElement(h,s(s({ref:n},c),{},{components:t})):a.createElement(h,s({ref:n},c))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,s=new Array(o);s[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:r,s[1]=i;for(var u=2;u<o;u++)s[u]=t[u];return a.createElement.apply(null,s)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72360:function(e,n,t){t.d(n,{Z:function(){return s}});var a=t(67294),r=t(86010),o="tabItem_OmH5";function s(e){var n=e.children,t=e.hidden,s=e.className;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(o,s),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return m}});var a=t(87462),r=t(67294),o=t(72389),s=t(67392),i=t(7094),l=t(12466),u=t(86010),c="tabList_uSqn",p="tabItem_LplD";function d(e){var n,t,o,d=e.lazy,m=e.block,h=e.defaultValue,f=e.values,g=e.groupId,y=e.className,v=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),b=null!=f?f:v.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),_=(0,s.l)(b,(function(e,n){return e.value===n.value}));if(_.length>0)throw new Error('Docusaurus error: Duplicate values "'+_.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var k=null===h?h:null!=(n=null!=h?h:null==(t=v.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(o=v[0])?void 0:o.props.value;if(null!==k&&!b.some((function(e){return e.value===k})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+k+'" but none of its children has the corresponding value. Available values are: '+b.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,i.U)(),C=N.tabGroupChoices,w=N.setTabGroupChoices,E=(0,r.useState)(k),T=E[0],O=E[1],j=[],A=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=g){var D=C[g];null!=D&&D!==T&&b.some((function(e){return e.value===D}))&&O(D)}var x=function(e){var n=e.currentTarget,t=j.indexOf(n),a=b[t].value;a!==T&&(A(n),O(a),null!=g&&w(g,a))},I=function(e){var n,t=null;switch(e.key){case"ArrowRight":var a=j.indexOf(e.currentTarget)+1;t=j[a]||j[0];break;case"ArrowLeft":var r=j.indexOf(e.currentTarget)-1;t=j[r]||j[j.length-1]}null==(n=t)||n.focus()};return r.createElement("div",{className:(0,u.Z)("tabs-container",c)},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,u.Z)("tabs",{"tabs--block":m},y)},b.map((function(e){var n=e.value,t=e.label,o=e.attributes;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:T===n?0:-1,"aria-selected":T===n,key:n,ref:function(e){return j.push(e)},onKeyDown:I,onFocus:x,onClick:x},o,{className:(0,u.Z)("tabs__item",p,null==o?void 0:o.className,{"tabs__item--active":T===n})}),null!=t?t:n)}))),d?(0,r.cloneElement)(v.filter((function(e){return e.props.value===T}))[0],{className:"margin-top--md"}):r.createElement("div",{className:"margin-top--md"},v.map((function(e,n){return(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==T})}))))}function m(e){var n=(0,o.Z)();return r.createElement(d,(0,a.Z)({key:String(n)},e))}},57291:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return u},metadata:function(){return p},toc:function(){return m}});var a=t(87462),r=t(63366),o=(t(67294),t(3905)),s=t(9877),i=t(72360),l=["components"],u={sidebar_position:1,title:"Using Rest API"},c=void 0,p={unversionedId:"collections/graphs/tutorials/using_rest_api",id:"collections/graphs/tutorials/using_rest_api",title:"Using Rest API",description:"Today\u2019s applications are required to be highly responsive and always online. They need to be deployed in datacenters closer to their users and can access data instantly across the globe.",source:"@site/docs/collections/graphs/tutorials/using_rest_api.md",sourceDirName:"collections/graphs/tutorials",slug:"/collections/graphs/tutorials/using_rest_api",permalink:"/docs/collections/graphs/tutorials/using_rest_api",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/graphs/tutorials/using_rest_api.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Using Rest API"},sidebar:"tutorialSidebar",previous:{title:"Graph Queries",permalink:"/docs/collections/graphs/tutorials/graph-queries"},next:{title:"Overview",permalink:"/docs/search/overview"}},d={},m=[{value:"Pre-Requiste",id:"pre-requiste",level:2},{value:"API Browser",id:"api-browser",level:2},{value:"Working with Graphs",id:"working-with-graphs",level:2}],h={toc:m};function f(e){var n=e.components,u=(0,r.Z)(e,l);return(0,o.kt)("wrapper",(0,a.Z)({},h,u,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Today\u2019s applications are required to be highly responsive and always online. They need to be deployed in datacenters closer to their users and can access data instantly across the globe. "),(0,o.kt)("p",null,"Macrometa global data network (GDN) is a fully managed realtime materialzed view engine that provides access to data instantly to Apps & APIs in a simple & single interface. "),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you are new to Macrometa GDN, we strongly recommend reading ",(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"/docs/essentials/overview"},"Essentials"))," of Macrometa GDN."))),(0,o.kt)("h2",{id:"pre-requiste"},"Pre-Requiste"),(0,o.kt)("p",null,"A tenant account (and credentials) with Macrometa GDN."),(0,o.kt)("h2",{id:"api-browser"},"API Browser"),(0,o.kt)("p",null,"Your best friend when working with REST APIs is the REST API browser available in ",(0,o.kt)("a",{parentName:"p",href:"https://gdn.paas.macrometa.io"},"GDN")," GUI. From there, you can execute various rest apis and see exactly what the inputs and outputs are."),(0,o.kt)("p",null,(0,o.kt)("img",{alt:"GDN API Browser",src:t(25369).Z,width:"2474",height:"1896"})),(0,o.kt)("h2",{id:"working-with-graphs"},"Working with Graphs"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Edge documents (edges)")," are similar to standard documents but with two additional required fields ",(0,o.kt)("inlineCode",{parentName:"p"},"_from")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_to"),'. Values of these fields must be the handles of "from" and "to" vertex documents linked by the edge document in question. Here is an example of a valid edge document:'),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "_id": "friends/001",\n  "_key": "001",\n  "_rev": "_Wm3dyle--_",\n  "_from": "students/john",\n  "_to": "students/jane",\n  "closeness": 9.5\n}\n')),(0,o.kt)("p",null,"A ",(0,o.kt)("strong",{parentName:"p"},"Graph")," consists of vertices and edges. Edges are stored as documents in edge collections. A vertex can be a document of a document collection or of an edge collection (so edges can be used as vertices). Which collections are used within a named graph is defined via edge definitions. A ",(0,o.kt)("inlineCode",{parentName:"p"},"named graph")," can contain more than one edge definition, at least one is needed. Graphs allow you to structure your models in line with your domain and group them logically in collections and giving you the power to query them in the same graph queries."),(0,o.kt)("p",null,"In SQL you commonly have the construct of a relation table to store ",(0,o.kt)("inlineCode",{parentName:"p"},"n:m")," relations between two data tables. An ",(0,o.kt)("inlineCode",{parentName:"p"},"edge collection")," is somewhat similar to these relation tables. ",(0,o.kt)("inlineCode",{parentName:"p"},"Vertex collections")," resemble the data tables with the objects to connect."),(0,o.kt)("p",null,"While simple graph queries with fixed number of hops via the relation table may be doable in SQL with several nested joins, graph databases can handle an arbitrary number of these hops over edge collections - this is called ",(0,o.kt)("inlineCode",{parentName:"p"},"traversal"),". Also edges in one edge collection may point to several vertex collections. Its common to have attributes attached to edges, i.e. a label naming this interconnection."),(0,o.kt)("p",null,"Edges have a direction, with their relations ",(0,o.kt)("inlineCode",{parentName:"p"},"_from")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"_to")," pointing from one document to another document stored in vertex collections. In queries you can define in which directions the edge relations may be followed i.e.,"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"OUTBOUND: ",(0,o.kt)("inlineCode",{parentName:"li"},"_from")," \u2192 ",(0,o.kt)("inlineCode",{parentName:"li"},"_to")),(0,o.kt)("li",{parentName:"ul"},"INBOUND: ",(0,o.kt)("inlineCode",{parentName:"li"},"_from")," \u2190 ",(0,o.kt)("inlineCode",{parentName:"li"},"_to")),(0,o.kt)("li",{parentName:"ul"},"ANY: ",(0,o.kt)("inlineCode",{parentName:"li"},"_from")," \u2194 ",(0,o.kt)("inlineCode",{parentName:"li"},"_to"),".")),(0,o.kt)("p",null,"An ",(0,o.kt)("strong",{parentName:"p"},"edge collection")," contains edge documents and shares its namespace with all other types of collections. You can manage edge documents via standard collection API wrappers, but using edge collection API wrappers provides additional safeguards:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"All modifications are executed in transactions."),(0,o.kt)("li",{parentName:"ul"},"Edge documents are checked against the edge definitions on insert.")),(0,o.kt)("p",null,"To create ",(0,o.kt)("inlineCode",{parentName:"p"},"edge collection")," use same endpoint ",(0,o.kt)("inlineCode",{parentName:"p"},"/_fabric/{fabric_name}/_api/collection")," and pass ",(0,o.kt)("inlineCode",{parentName:"p"},"type:3")," in payload."),(0,o.kt)(s.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,o.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-py"},"    import requests\n    import json\n\n    # Constants\n\n    FEDERATION = \"api-gdn.paas.macrometa.io\"\n    FED_URL = \"https://{}\".format(FEDERATION)\n    EMAIL = \"nemo@nautilus.com\"\n    PASSWORD = \"xxxxxx\"\n    AUTH_TOKEN = \"bearer \"\n    COLLECTION_NAME_1 = \"teachers\"\n    COLLECTION_NAME_2 = \"lectures\"\n    EDGE_COLL_NAME = \"teach\"\n    GRAPH_NAME = \"lectureteacher\"\n\n\n    # Create a HTTPS Session\n\n    url = \"{}/_open/auth\".format(FED_URL)\n    payload = {\n        'email':EMAIL,\n        'password':PASSWORD\n        }\n    headers = {\n        'content-type': 'application/json'\n        }\n\n    response = requests.post(url, data = json.dumps(payload), headers = headers)\n\n    if response.status_code == 200:\n        resp_body = json.loads(response.text)\n        AUTH_TOKEN += resp_body[\"jwt\"]\n        TENANT = resp_body[\"tenant\"]\n    else:\n        raise Exception(\"Error while getting auth token. Code:{}, Reason:{}\".format(response.status_code,response.reason))\n\n\n    session = requests.session()\n    session.headers.update({\"content-type\": 'application/json'})\n    session.headers.update({\"authorization\": AUTH_TOKEN})\n\n    # Create Doc Collections and Insert Data to Document Collections\n\n\n    url = FED_URL + \"/_api/collection\"\n    payload = { 'name': COLLECTION_NAME_1 }\n\n    resp = session.post(url,data=json.dumps(payload))\n    result = json.loads(resp.text)\n    print(\"\\nDocument Collection1 Created: \",result)\n\n    payload = { 'name': COLLECTION_NAME_2 }\n\n    resp = session.post(url,data=json.dumps(payload))\n    result = json.loads(resp.text)\n    print(\"\\nDocument Collection2 Created: \",result)\n\n    payload = [\n        {\n            '_key':'Jean',\n            'firstname': 'Jean',\n            'lastname':'Picard',\n            'email':'jean.picard@macrometa.io'\n        },\n        {\n            '_key':'James',\n            'firstname': 'James',\n            'lastname':'Kirk',\n            'email':'james.kirk@macrometa.io'\n        },\n        {\n            '_key': 'Han',\n            'firstname': 'Han',\n            'lastname':'Solo',\n            'email':'han.solo@macrometa.io'\n        },\n        {\n            '_key': 'Bruce',\n            'firstname': 'Bruce',\n            'lastname':'Wayne',\n            'email':'bruce.wayne@macrometa.io'\n        }\n    ]\n\n    url = FED_URL + \"/_api/document/\" + COLLECTION_NAME_1\n    resp = session.post(url,data=json.dumps(payload))\n    result = json.loads(resp.text)\n    print(\"\\nDocuments Inserted: \",result)\n\n    payload = [\n        {'_id': 'lectures/CSC101', 'difficulty': 'easy', '_key':'CSC101', 'firstname':'Jean'},\n        {'_id': 'lectures/CSC102', 'difficulty': 'hard', '_key':'CSC102','firstname':'Jean'},\n        {'_id': 'lectures/CSC103', 'difficulty': 'hard', '_key':'CSC103','firstname':'Jean'},\n        {'_id': 'lectures/CSC104', 'difficulty': 'moderate', '_key':'CSC104','firstname':'Jean'}\n\n    ]\n\n    url = FED_URL + \"/_api/document/\" + COLLECTION_NAME_2\n    resp = session.post(url,data=json.dumps(payload))\n    result = json.loads(resp.text)\n    print(\"\\nDocuments Inserted: \",result)\n\n    # Create Edge Collection\n\n    payload = { 'name': EDGE_COLL_NAME, \"type\":3 }\n\n    url = FED_URL + \"/_api/collection\"\n    resp = session.post(url,data=json.dumps(payload))\n    result = json.loads(resp.text)\n    print(\"\\nEdge Collection Created: \",result)\n    payload = [\n        {\n        '_key': 'Jean-CSC101',\n        '_from': 'teachers/Jean',\n        '_to': 'lectures/CSC101',\n        'online': False\n        },\n        {\n        '_key': 'Jean-CSC102',\n        '_from': 'teachers/Jean',\n        '_to': 'lectures/CSC102',\n        'online': True\n        },\n        {\n        '_key': 'Jean-CSC103',\n        '_from': 'teachers/Jean',\n        '_to': 'lectures/CSC103',\n        'online': False\n        },\n        {\n        '_key': 'Bruce-CSC101',\n        '_from': 'teachers/Bruce',\n        '_to': 'lectures/CSC101',\n        'online': True\n        }\n\n    ]\n\n    url = FED_URL + \"/_api/document/\" + EDGE_COLL_NAME\n    resp = session.post(url,data=json.dumps(payload))\n    result = json.loads(resp.text)\n    print(\"\\nDocuments Inserted: \",result)\n    # Create a Graph\n    payload ={\n      \"edgeDefinitions\": [\n        {\n          \"collection\": EDGE_COLL_NAME,\n          \"from\": [\n            \"teachers\"\n          ],\n          \"to\": [\n            \"lectures\"\n          ]\n        }\n      ],\n      \"name\": GRAPH_NAME,\n      \"options\": {}\n    }\n\n    url = FED_URL + \"/_api/graph\"\n    resp = session.post(url,data=json.dumps(payload))\n    result = json.loads(resp.text)\n    print(\"\\nGraph Created: \",result)\n\n    # Graph Traversal\n    # Note :- To use Outbound Traversal use direction: out and direction: in for Inbound Traversal\n    params = {\n        \"vertex\": \"Jean\",\n        \"direction\": \"out\"\n    }\n\n    url = FED_URL + \"/_api/edges/\" + EDGE_COLL_NAME\n\n    resp = session.get(url,params=params)\n    result = json.loads(resp.text)\n    print(\"\\nGraph Traversal: \",result)\n\n    # Delete Graph and Collections\n    # Note:- If you want to delete just the graph and keep collections then\n    # set dropCollection to False\n    params = {\"dropCollection\": True}\n\n    url = FED_URL + \"/_api/graph/\" + GRAPH_NAME\n\n    resp = session.delete(url,params=params)\n    result = json.loads(resp.text)\n    print(\"Graph and Collections Deleted: \", result)\n"))),(0,o.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},'    class APIRequest {\n      _headers = {\n        Accept: "application/json",\n        "Content-Type": "application/json",\n      };\n\n      constructor(url) {\n        this._url = url;\n      }\n\n      login(email, password) {\n        const endpoint = "/_open/auth";\n\n        const self = this;\n\n        return new Promise(function (resolve, reject) {\n          self\n            .req(endpoint, {\n              body: { email, password },\n              method: "POST",\n            })\n            .then(({ jwt, ...data }) => {\n              self._headers.authorization = `bearer ${jwt}`;\n              resolve(data);\n            })\n            .catch(reject);\n        });\n      }\n\n      _handleResponse(response, resolve, reject) {\n        if (response.ok) {\n          resolve(response.json());\n        } else {\n          reject(response);\n        }\n      }\n\n      req(endpoint, { body, ...options } = {}) {\n        const self = this;\n        return new Promise(function (resolve, reject) {\n          fetch(self._url + endpoint, {\n            headers: self._headers,\n            body: body ? JSON.stringify(body) : undefined,\n            ...options,\n          }).then((response) => self._handleResponse(response, resolve, reject));\n        });\n      }\n    }\n    TBD\n')))))}f.isMDXComponent=!0},25369:function(e,n,t){n.Z=t.p+"assets/images/gdn-api-browser-0c8c99ab1aea5bc3346f0788df0606c5.png"}}]);