"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1527],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return d}});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var p=r.createContext({}),l=function(e){var t=r.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=l(e.components);return r.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},c=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,p=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),c=l(a),d=n,g=c["".concat(p,".").concat(d)]||c[d]||u[d]||o;return a?r.createElement(g,i(i({ref:t},m),{},{components:a})):r.createElement(g,i({ref:t},m))}));function d(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=c;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:n,i[1]=s;for(var l=2;l<o;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}c.displayName="MDXCreateElement"},87688:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var r=a(87462),n=a(63366),o=(a(67294),a(3905)),i=["components"],s={sidebar_position:4},p="Transforming Data",l={unversionedId:"cep/tutorials/transforming-data",id:"cep/tutorials/transforming-data",title:"Transforming Data",description:"Introduction",source:"@site/docs/cep/tutorials/transforming-data.md",sourceDirName:"cep/tutorials",slug:"/cep/tutorials/transforming-data",permalink:"/docs/cep/tutorials/transforming-data",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/tutorials/transforming-data.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4},sidebar:"tutorialSidebar",previous:{title:"Consuming Data",permalink:"/docs/cep/tutorials/consuming-data"},next:{title:"Enriching Data",permalink:"/docs/cep/tutorials/enriching-data"}},m={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Transform data using Operators",id:"transform-data-using-operators",level:2},{value:"Transform data using Plugins",id:"transform-data-using-plugins",level:2},{value:"Transforming message formats",id:"transforming-message-formats",level:2}],c={toc:u};function d(e){var t=e.components,a=(0,n.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"transforming-data"},"Transforming Data"),(0,o.kt)("h2",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The stream processor allows you to perform a wide range of transformations to the input data received. The transformations are carried out via operators that are defined inline within the stream application."),(0,o.kt)("h2",{id:"transform-data-using-operators"},"Transform data using Operators"),(0,o.kt)("p",null,"The operators that you can configure inline within Stream applications in order to carry out data transformations are listed in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cep/reference/query-guide"},"Stream Processor Query Guide - Inbuild Aggregation Functions section"),"."),(0,o.kt)("p",null,"To show how an inline operators are configured, let's consider an example where readings from a sensor that indicates\nthe temperature of a room every second are transformed to indicate the average temperature and the average humidity as at each second."),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Open the GUI. Click the ",(0,o.kt)("strong",{parentName:"p"},"Stream Apps")," tab.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Click ",(0,o.kt)("strong",{parentName:"p"},"New")," to define a new stream application.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Type a ",(0,o.kt)("strong",{parentName:"p"},"Name"),". For example, ",(0,o.kt)("inlineCode",{parentName:"p"},"TemperatureApp"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Type a ",(0,o.kt)("strong",{parentName:"p"},"Description"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the following sample stream application.")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Let's define the input stream to define the schema based on which data is selected to the streaming integration flow."),(0,o.kt)("p",{parentName:"li"},"In this example, let's assume that each event indicates the device ID, the room ID, and the temperature. Therefore, let's define an input stream as follows:"),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM TempStream (deviceID long, roomNo int, temp double);\n")),(0,o.kt)("p",{parentName:"li"},"!!!info\nFor more information about defining input streams to receive events, see the ",(0,o.kt)("a",{parentName:"p",href:"/docs/cep/tutorials/consuming-data"},"Consuming Data page"),".")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To do the required transformation, let's add the query as follows:"),(0,o.kt)("ol",{parentName:"li"},(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add a ",(0,o.kt)("inlineCode",{parentName:"p"},"select")," to select the fields required to calculate the average temperature. Apply the ",(0,o.kt)("inlineCode",{parentName:"p"},"avg()")," to the ",(0,o.kt)("inlineCode",{parentName:"p"},"temp")," attribute, and then specify ",(0,o.kt)("inlineCode",{parentName:"p"},"avgTemp")," as the name with which the result should be output. "),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"select roomNo, avg(temp) as avgTemp\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the ",(0,o.kt)("inlineCode",{parentName:"p"},"from")," clause with the name of the input stream to indicate that the events to be processed are taken from the input stream."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"from TempStream\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To group by a specific attribute (by the ",(0,o.kt)("inlineCode",{parentName:"p"},"roomNo")," attribute in this example), specify it via the ",(0,o.kt)("inlineCode",{parentName:"p"},"group by")," clause as shown below."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into OutputStream\nselect roomNo, avg(temp) as avgTemp\nfrom TempStream\ngroup by roomNo;\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Add the ",(0,o.kt)("inlineCode",{parentName:"p"},"insert into")," clause with the name of the output stream to indicate that the processed events are directed to that stream."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into OutputStream\nfrom TempStream;\n"))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"To group by a specific attribute (by the ",(0,o.kt)("inlineCode",{parentName:"p"},"roomNo")," attribute in this example), specify it via the ",(0,o.kt)("inlineCode",{parentName:"p"},"group by")," clause as shown below."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"insert into OutputStream\nselect roomNo, deviceID, avg(temp) as avgTemp\nfrom TempStream\ngroup by roomNo;\n"))))),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Save the stream application. The completed stream application is as follows."),(0,o.kt)("pre",{parentName:"li"},(0,o.kt)("code",{parentName:"pre",className:"language-sql"},"@App:name(\"TemperatureApp\")\n@App:description(\"Calculate an average temperature of the room\")\n@App:qlVersion(\"2\")\n\nCREATE STREAM TempStream (deviceID long, roomNo int, temp double);\n\nCREATE STREAM OutputStream WITH (type='stream', stream='OutputStream', map.type='json') (roomNo int, avgTemp double);\n\ninsert into OutputStream\nselect roomNo, avg(temp) as avgTemp\nfrom TempStream\ngroup by roomNo;\n")))),(0,o.kt)("h2",{id:"transform-data-using-plugins"},"Transform data using Plugins"),(0,o.kt)("p",null,"The stream processor offers a variety of options to carry out data transformations via in-built plugins. The following table describes the complete list of plugins that provide data transformation functionality."),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Plugin"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"math"),(0,o.kt)("td",{parentName:"tr",align:null},"Transforms data by performing mathematical operations.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"unitconversion"),(0,o.kt)("td",{parentName:"tr",align:null},"Performs unit conversions ranging from length, weight, volume, etc.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"string"),(0,o.kt)("td",{parentName:"tr",align:null},"Performs string manipulations.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"time"),(0,o.kt)("td",{parentName:"tr",align:null},"Performs time-based transformations such as converting time zones.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"map"),(0,o.kt)("td",{parentName:"tr",align:null},"Converts events into maps and performs transformations such as concatenating and removing attributes.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"reorder"),(0,o.kt)("td",{parentName:"tr",align:null},"Rearranges the order of the incoming event flow.")),(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"json"),(0,o.kt)("td",{parentName:"tr",align:null},"Performs manipulations to JSON strings.")))),(0,o.kt)("h2",{id:"transforming-message-formats"},"Transforming message formats"),(0,o.kt)("p",null,"These transformations involve converting the message format to a different format after a the message is received, or\nconverting the format before publishing the message. This is managed via mapping. For detailed instructions to convert message formats via mapping, see the following guides:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/consuming-data#supported-message-formats"},"Consuming Messages - Supported Message Formats")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/cep/tutorials/publishing-data#supported-message-formats"},"Publishing Messages - Supported Message Formats"))))}d.isMDXComponent=!0}}]);