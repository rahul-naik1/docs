"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2953],{3905:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return N}});var a=n(67294);function l(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function r(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function i(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?r(Object(n),!0).forEach((function(e){l(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function p(t,e){if(null==t)return{};var n,a,l=function(t,e){if(null==t)return{};var n,a,l={},r=Object.keys(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||(l[n]=t[n]);return l}(t,e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(t);for(a=0;a<r.length;a++)n=r[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(l[n]=t[n])}return l}var u=a.createContext({}),o=function(t){var e=a.useContext(u),n=e;return t&&(n="function"==typeof t?t(e):i(i({},e),t)),n},m=function(t){var e=o(t.components);return a.createElement(u.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},k=a.forwardRef((function(t,e){var n=t.components,l=t.mdxType,r=t.originalType,u=t.parentName,m=p(t,["components","mdxType","originalType","parentName"]),k=o(n),N=l,d=k["".concat(u,".").concat(N)]||k[N]||s[N]||r;return n?a.createElement(d,i(i({ref:e},m),{},{components:n})):a.createElement(d,i({ref:e},m))}));function N(t,e){var n=arguments,l=e&&e.mdxType;if("string"==typeof t||l){var r=n.length,i=new Array(r);i[0]=k;var p={};for(var u in e)hasOwnProperty.call(e,u)&&(p[u]=e[u]);p.originalType=t,p.mdxType="string"==typeof t?t:l,i[1]=p;for(var o=2;o<r;o++)i[o]=n[o];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},26458:function(t,e,n){n.r(e),n.d(e,{assets:function(){return m},contentTitle:function(){return u},default:function(){return N},frontMatter:function(){return p},metadata:function(){return o},toc:function(){return s}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],p={sidebar_position:5},u="Math",o={unversionedId:"cep/reference/extensions/execution/math",id:"cep/reference/extensions/execution/math",title:"Math",description:"This extension provides useful mathematical functions such as power, round, random, cos, log, etc.",source:"@site/docs/cep/reference/extensions/execution/math.md",sourceDirName:"cep/reference/extensions/execution",slug:"/cep/reference/extensions/execution/math",permalink:"/docs/cep/reference/extensions/execution/math",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/extensions/execution/math.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"tutorialSidebar",previous:{title:"List",permalink:"/docs/cep/reference/extensions/execution/list"},next:{title:"Regex",permalink:"/docs/cep/reference/extensions/execution/regex"}},m={},s=[{value:"Features",id:"features",level:2},{value:"percentile",id:"percentile",level:2},{value:"abs",id:"abs",level:2},{value:"acos",id:"acos",level:2},{value:"asin",id:"asin",level:2},{value:"atan",id:"atan",level:2},{value:"bin",id:"bin",level:2},{value:"cbrt",id:"cbrt",level:2},{value:"ceil",id:"ceil",level:2},{value:"conv",id:"conv",level:2},{value:"copySign",id:"copysign",level:2},{value:"cos",id:"cos",level:2},{value:"cosh",id:"cosh",level:2},{value:"e",id:"e",level:2},{value:"exp",id:"exp",level:2},{value:"floor",id:"floor",level:2},{value:"getExponent",id:"getexponent",level:2},{value:"hex",id:"hex",level:2},{value:"isInfinite",id:"isinfinite",level:2},{value:"isNan",id:"isnan",level:2},{value:"ln",id:"ln",level:2},{value:"log",id:"log",level:2},{value:"log10",id:"log10",level:2},{value:"log2",id:"log2",level:2},{value:"max",id:"max",level:2},{value:"min",id:"min",level:2},{value:"oct",id:"oct",level:2},{value:"parseDouble",id:"parsedouble",level:2},{value:"parseFloat",id:"parsefloat",level:2},{value:"parseInt",id:"parseint",level:2},{value:"parseLong",id:"parselong",level:2},{value:"pi",id:"pi",level:2},{value:"power",id:"power",level:2},{value:"rand",id:"rand",level:2},{value:"round",id:"round",level:2},{value:"signum",id:"signum",level:2},{value:"sin",id:"sin",level:2},{value:"sinh",id:"sinh",level:2},{value:"sqrt",id:"sqrt",level:2},{value:"tan",id:"tan",level:2},{value:"tanh",id:"tanh",level:2},{value:"toDegrees",id:"todegrees",level:2},{value:"toRadians",id:"toradians",level:2}],k={toc:s};function N(t){var e=t.components,n=(0,l.Z)(t,i);return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:e,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"math"},"Math"),(0,r.kt)("p",null,"This extension provides useful mathematical functions such as power, round, random, cos, log, etc."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#percentile"},"percentile (AggregateFunction)"))),(0,r.kt)("p",{parentName:"li"},"  This functions returns the pth percentile value of a given argument.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#abs"},"abs (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the absolute value of the given parameter. It\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.abs()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#acos"},"acos (Function)"))),(0,r.kt)("p",{parentName:"li"},"  If ",(0,r.kt)("inlineCode",{parentName:"p"},"-1 <= p1 <= 1"),", this function returns the arc-cosine (inverse\ncosine) value of p1.If the domain is invalid, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". The\nvalue returned is in radian scale. This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.acos()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#asin"},"asin (Function)"))),(0,r.kt)("p",{parentName:"li"},"  If ",(0,r.kt)("inlineCode",{parentName:"p"},"-1 <= p1 <= 1"),", this function returns the arc-sin (inverse sine)\nvalue of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),". If the domain is invalid, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". The value\nreturned is in radian scale. This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.asin()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#atan"},"atan (Function)"))),(0,r.kt)("ol",{parentName:"li"},(0,r.kt)("li",{parentName:"ol"},"If a single ",(0,r.kt)("inlineCode",{parentName:"li"},"p1")," is received, this function returns the\narc-tangent (inverse tangent) value of ",(0,r.kt)("inlineCode",{parentName:"li"},"p1"),"."),(0,r.kt)("li",{parentName:"ol"},"If ",(0,r.kt)("inlineCode",{parentName:"li"},"p1")," is received along with an optional ",(0,r.kt)("inlineCode",{parentName:"li"},"p1"),", it considers\nthem as x and y coordinates and returns the arc-tangent (inverse\ntangent) value.\nThe returned value is in radian scale. This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"li"},"java.lang.Math.atan()")," function."))),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#bin"},"bin (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns a string representation of the p1 argument,\nthat is of either ",(0,r.kt)("inlineCode",{parentName:"p"},"integer")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"long")," data type, as an unsigned\ninteger in base 2. It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Integer.toBinaryString"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Long.toBinaryString")," methods.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#cbrt"},"cbrt (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the cube-root of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," which is in radians.\nIt wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.cbrt()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#ceil"},"ceil (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the smallest double value, i.e., the closest\nto the negative infinity, that is greater than or equal to the ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),"\nargument, and is equal to a mathematical integer. It wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.ceil()")," method.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#conv"},"conv (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function converts ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromBase")," base to the ",(0,r.kt)("inlineCode",{parentName:"p"},"toBase"),"\nbase.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#copysign"},"copySign (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns a value of an input with the received\n",(0,r.kt)("inlineCode",{parentName:"p"},"magnitude")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"sign")," of another input. It wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.copySign()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#cos"},"cos (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the cosine of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," which is in radians. It\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.cos()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#cosh"},"cosh (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the hyperbolic cosine of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," which is in\nradians. It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.cosh()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#e"},"e (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.E")," constant, which is the\nclosest double value to e, where e is the base of the natural\nlogarithms.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#exp"},"exp (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the Euler's number ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," raised to the power of\n",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),". It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.exp()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#floor"},"floor (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.floor()")," function and\nreturns the largest value, i.e., closest to the positive infinity,\nthat is less than or equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),", and is equal to a mathematical\ninteger.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getexponent"},"getExponent (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the unbiased exponent that is used in the\nrepresentation of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),". This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.getExponent()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#hex"},"hex (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Double.toHexString()")," function. It returns a hexadecimal string representation of the input, ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#isinfinite"},"isInfinite (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Float.isInfinite()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Double.isInfinite()")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," is\ninfinitely large in magnitude and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if otherwise.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#isnan"},"isNan (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Float.isNaN()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Double.isNaN()")," functions and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," is\nNaN (Not-a-Number), and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if otherwise.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#ln"},"ln (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the natural logarithm (base e) of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#log"},"log (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the logarithm of the received ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," as per\nthe given ",(0,r.kt)("inlineCode",{parentName:"p"},"base"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#log10"},"log10 (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the base 10 logarithm of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#log2"},"log2 (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the base 2 logarithm of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#max"},"max (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the greater value of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#min"},"min (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the smaller value of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#oct"},"oct (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function converts the input parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," to octal.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#parsedouble"},"parseDouble (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the double value of the string received.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#parsefloat"},"parseFloat (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the float value of the received string.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#parseint"},"parseInt (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the integer value of the received string.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#parselong"},"parseLong (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the long value of the string received.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#pi"},"pi (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.PI")," constant, which is the\nclosest value to pi, i.e., the ratio of the circumference of a\ncircle to its diameter.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#power"},"power (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function raises the given value to a given power.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#rand"},"rand (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This returns a stream of pseudo-random numbers when a sequence of\ncalls are sent to the ",(0,r.kt)("inlineCode",{parentName:"p"},"rand()"),". Optionally, it is possible to define\na seed, i.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"rand(seed)")," using which the pseudo-random numbers are\ngenerated. These functions internally use the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.Random"),"\nclass.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#round"},"round (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the value of the input argument rounded off to\nthe closest integer/long value.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#signum"},"signum (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This returns +1, 0, or -1 for the given positive, zero and negative\nvalues respectively. This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.signum()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#sin"},"sin (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This returns the sine of the value given in radians. This function\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.sin()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#sinh"},"sinh (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This returns the hyperbolic sine of the value given in radians. This\nfunction wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.sinh()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#sqrt"},"sqrt (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the square-root of the given value. It wraps\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.sqrt()"),"s function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#tan"},"tan (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the tan of the given value in radians. It\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.tan()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#tanh"},"tanh (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function returns the hyperbolic tangent of the value given in\nradians. It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.tanh()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#todegrees"},"toDegrees (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function converts the value given in radians to degrees. It\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.toDegrees()")," function.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#toradians"},"toRadians (Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function converts the value given in degrees to radians. It\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.toRadians()")," function."))),(0,r.kt)("h2",{id:"percentile"},"percentile"),(0,r.kt)("p",null,"This functions returns the pth percentile value of a given argument."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:percentile(<INT|LONG|FLOAT|DOUBLE> arg, <DOUBLE> p)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"arg"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose percentile should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p"),(0,r.kt)("td",{parentName:"tr",align:null},"Estimate of the percentile to be found (pth percentile) where p is any number greater than 0 or lesser than or equal to 100."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (sensorId int, temperature double);\n\ninsert into OutMediationStream\nfrom InValueStream\nselect math:percentile(temperature, 97.0) as percentile;\n")),(0,r.kt)("p",null,"This function returns the percentile value based on the argument given.\nFor example, ",(0,r.kt)("inlineCode",{parentName:"p"},"math:percentile(temperature, 97.0)")," returns the 97th\npercentile value of all the temperature events."),(0,r.kt)("h2",{id:"abs"},"abs"),(0,r.kt)("p",null,"This function returns the absolute value of the given parameter. It\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.abs()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:abs(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The parameter whose absolute value is found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:abs(inValue) as absValue\nfrom InValueStream;\n")),(0,r.kt)("p",null,"Irrespective of whether the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream holds a\nvalue of abs(3) or abs(-3),the function returns 3 since the absolute\nvalue of both 3 and -3 is 3. The result directed to OutMediationStream\nstream."),(0,r.kt)("h2",{id:"acos"},"acos"),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"-1 <= p1 <= 1"),", this function returns the arc-cosine (inverse\ncosine) value of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),".If the domain is invalid, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". The value\nreturned is in radian scale. This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.acos()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:acos(<FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose arc-cosine (inverse cosine) value is found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:acos(inValue) as acosValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is given, the function calculates\nthe arc-cosine value of it and returns the arc-cosine value to the\noutput stream, OutMediationStream. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"acos(0.5)")," returns\n",(0,r.kt)("inlineCode",{parentName:"p"},"1.0471975511965979"),"."),(0,r.kt)("h2",{id:"asin"},"asin"),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"-1 <= p1 <= 1"),", this function returns the arc-sin (inverse sine)\nvalue of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),". If the domain is invalid, it returns ",(0,r.kt)("inlineCode",{parentName:"p"},"NULL"),". The value\nreturned is in radian scale. This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.asin()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:asin(<FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose arc-sin (inverse sine) value is found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:asin(inValue) as asinValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is given, the function calculates\nthe arc-sin value of it and returns the arc-sin value to the output\nstream, OutMediationStream. For example, asin(0.5) returns\n0.5235987755982989."),(0,r.kt)("h2",{id:"atan"},"atan"),(0,r.kt)("ol",null,(0,r.kt)("li",{parentName:"ol"},"If a single ",(0,r.kt)("inlineCode",{parentName:"li"},"p1")," is received, this function returns the arc-tangent\n(inverse tangent) value of ",(0,r.kt)("inlineCode",{parentName:"li"},"p1"),". 2. If ",(0,r.kt)("inlineCode",{parentName:"li"},"p1")," is received along with an\noptional ",(0,r.kt)("inlineCode",{parentName:"li"},"p1"),", it considers them as x and y coordinates and returns the\narc-tangent (inverse tangent) value. The returned value is in radian\nscale. This function wraps the ",(0,r.kt)("inlineCode",{parentName:"li"},"java.lang.Math.atan()")," function.")),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:atan(<INT|LONG|FLOAT|DOUBLE> p1)\n<DOUBLE> math:atan(<INT|LONG|FLOAT|DOUBLE> p1, <INT|LONG|FLOAT|DOUBLE> p2)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose arc-tangent (inverse tangent) is found. If the optional second parameter is given this represents the x coordinate of the (x,y) coordinate pair."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p2"),(0,r.kt)("td",{parentName:"tr",align:null},"This optional parameter represents the y coordinate of the (x,y) coordinate pair."),(0,r.kt)("td",{parentName:"tr",align:null},"0D"),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue1 double, inValue2 double);\n\ninsert into OutMediationStream\nselect math:atan(inValue1, inValue2) as convertedValue\nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1")," in the input stream is given, the function\ncalculates the arc-tangent value of it and returns the arc-tangent value\nto the output stream, OutMediationStream. If both the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"inValue2")," are given, then the function considers them to be ",(0,r.kt)("inlineCode",{parentName:"p"},"x")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"y"),"\ncoordinates respectively and returns the calculated arc-tangent value to\nthe output stream, OutMediationStream. For example, ",(0,r.kt)("inlineCode",{parentName:"p"},"atan(12d, 5d)"),"\nreturns ",(0,r.kt)("inlineCode",{parentName:"p"},"1.1760052070951352"),"."),(0,r.kt)("h2",{id:"bin"},"bin"),(0,r.kt)("p",null,"This function returns a string representation of the p1 argument, that\nis of either ",(0,r.kt)("inlineCode",{parentName:"p"},"integer")," or ",(0,r.kt)("inlineCode",{parentName:"p"},"long")," data type, as an unsigned integer\nin base 2. It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Integer.toBinaryString")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Long.toBinaryString")," methods."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<STRING> math:bin(<INT|LONG> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value in either ",(0,r.kt)("inlineCode",{parentName:"td"},"integer")," or ",(0,r.kt)("inlineCode",{parentName:"td"},"long"),", that should be converted into an unsigned integer of base 2."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue long);\n\ninsert into OutMediationStream\nselect math:bin(inValue) as binValue\nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is given, the function converts\nit into an unsigned integer in base 2 and directs the output to the\noutput stream, OutMediationStream. For example, bin(9) returns ",(0,r.kt)("inlineCode",{parentName:"p"},"1001"),"."),(0,r.kt)("h2",{id:"cbrt"},"cbrt"),(0,r.kt)("p",null,"This function returns the cube-root of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," which is in radians. It\nwraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.cbrt()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:cbrt(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose cube-root should be found. Input is required to be in radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:cbrt(inValue) as cbrtValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," is given, the function calculates the cube-root value\nfor the same and directs the output to the output stream,\nOutMediationStream. For example, cbrt(17d) returns 2.5712815906582356."),(0,r.kt)("h2",{id:"ceil"},"ceil"),(0,r.kt)("p",null,"This function returns the smallest double value, i.e., the closest to\nthe negative infinity, that is greater than or equal to the ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),"\nargument, and is equal to a mathematical integer. It wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.ceil()")," method."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:ceil(<FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose ceiling value is found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:ceil(inValue) as ceilingValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function calculates the ceiling value of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," and\ndirects the result to ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream")," output stream. For example,\nceil(423.187d) returns 424.0."),(0,r.kt)("h2",{id:"conv"},"conv"),(0,r.kt)("p",null,"This function converts ",(0,r.kt)("inlineCode",{parentName:"p"},"a")," from the ",(0,r.kt)("inlineCode",{parentName:"p"},"fromBase")," base to the ",(0,r.kt)("inlineCode",{parentName:"p"},"toBase"),"\nbase."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<STRING> math:conv(<STRING> a, <INT> from.base, <INT> to.base)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"a"),(0,r.kt)("td",{parentName:"tr",align:null},"The value whose base should be changed. Input should be given as a ",(0,r.kt)("inlineCode",{parentName:"td"},"String"),"."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"from.base"),(0,r.kt)("td",{parentName:"tr",align:null},"The source base of the input parameter ",(0,r.kt)("inlineCode",{parentName:"td"},"a"),"."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"to.base"),(0,r.kt)("td",{parentName:"tr",align:null},"The target base that the input parameter ",(0,r.kt)("inlineCode",{parentName:"td"},"a")," should be converted into."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue string,fromBase int,toBase int);\n\ninsert into OutMediationStream\nselect math:conv(inValue,fromBase,toBase) as convertedValue\nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is given, and the base in which\nit currently resides in and the base to which it should be converted to\nis specified, the function converts it into a string in the target base\nand directs it to the output stream, OutMediationStream. For example,\n",(0,r.kt)("inlineCode",{parentName:"p"},'conv("7f", 16, 10)')," returns ",(0,r.kt)("inlineCode",{parentName:"p"},'"127"'),"."),(0,r.kt)("h2",{id:"copysign"},"copySign"),(0,r.kt)("p",null,"This function returns a value of an input with the received ",(0,r.kt)("inlineCode",{parentName:"p"},"magnitude"),"\nand ",(0,r.kt)("inlineCode",{parentName:"p"},"sign")," of another input. It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.copySign()"),"\nfunction."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:copySign(<INT|LONG|FLOAT|DOUBLE> magnitude, <INT|LONG|FLOAT|DOUBLE> sign)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"magnitude"),(0,r.kt)("td",{parentName:"tr",align:null},"The magnitude of this parameter is used in the output attribute."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"sign"),(0,r.kt)("td",{parentName:"tr",align:null},"The sign of this parameter is used in the output attribute."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue1 double, inValue2 double);\n\ninsert into OutMediationStream\nselect math:copySign(inValue1,inValue2) as copysignValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If two values are provided as ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue2"),", the\nfunction copies the magnitude and sign of the second argument into the\nfirst one and directs the result to the output stream,\nOutMediatonStream. For example, copySign(5.6d, -3.0d) returns -5.6."),(0,r.kt)("h2",{id:"cos"},"cos"),(0,r.kt)("p",null,"This function returns the cosine of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," which is in radians. It wraps\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.cos()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:cos(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose cosine value should be found.The input is required to be in radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:cos(inValue) as cosValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," is given, the function calculates the cosine value\nfor the same and directs the output to the output stream,\nOutMediationStream. For example, cos(6d) returns 0.9601702866503661."),(0,r.kt)("h2",{id:"cosh"},"cosh"),(0,r.kt)("p",null,"This function returns the hyperbolic cosine of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," which is in radians.\nIt wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.cosh()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:cosh(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose hyperbolic cosine should be found. The input is required to be in radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:cosh(inValue) as cosValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," is given, the function calculates the hyperbolic\ncosine value for the same and directs the output to the output stream,\nOutMediationStream. For example, cosh (6d) returns 201.7156361224559."),(0,r.kt)("h2",{id:"e"},"e"),(0,r.kt)("p",null,"This function returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.E")," constant, which is the\nclosest double value to e, where e is the base of the natural\nlogarithms."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:e()\n")),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:e() as eValue\nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function returns the constant, 2.7182818284590452354 which is the\nclosest double value to e and directs the output to\n",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream")," output stream."),(0,r.kt)("h2",{id:"exp"},"exp"),(0,r.kt)("p",null,"This function returns the Euler's number ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," raised to the power of\n",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),". It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.exp()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:exp(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The power that the Euler's number e is raised to."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:exp(inValue) as expValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the inputstream holds a value, this function\ncalculates the corresponding Euler's number ",(0,r.kt)("inlineCode",{parentName:"p"},"e")," and directs it to the\noutput stream, OutMediationStream. For example, exp(10.23) returns\n27722.51006805505."),(0,r.kt)("h2",{id:"floor"},"floor"),(0,r.kt)("p",null,"This function wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.floor()")," function and returns\nthe largest value, i.e., closest to the positive infinity, that is less\nthan or equal to ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),", and is equal to a mathematical integer."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:floor(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose floor value should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:floor(inValue) as floorValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function calculates the floor value of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," input\nand directs the output to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream")," output stream. For\nexample, (10.23) returns 10.0."),(0,r.kt)("h2",{id:"getexponent"},"getExponent"),(0,r.kt)("p",null,"This function returns the unbiased exponent that is used in the\nrepresentation of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),". This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.getExponent()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT> math:getExponent(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of whose unbiased exponent representation should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:getExponent(inValue) as expValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function calculates the unbiased exponent of a given input,\n",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," and directs the result to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream")," output\nstream. For example, getExponent(60984.1) returns 15."),(0,r.kt)("h2",{id:"hex"},"hex"),(0,r.kt)("p",null,"This function wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Double.toHexString()")," function. It returns a hexadecimal string representation of the input, ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<STRING> math:hex(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose hexadecimal value should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue int);\n\ninsert into OutMediationStream\nselect math:hex(inValue) as hexString    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is provided, the function\nconverts this into its corresponding hexadecimal format and directs the\noutput to the output stream, OutMediationStream. For example, hex(200)\nreturns ",(0,r.kt)("inlineCode",{parentName:"p"},'"c8"'),"."),(0,r.kt)("h2",{id:"isinfinite"},"isInfinite"),(0,r.kt)("p",null,"This function wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Float.isInfinite()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Double.isInfinite()")," and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," is infinitely\nlarge in magnitude and ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if otherwise."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> math:isInfinite(<FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"This is the value of the parameter that the function determines to be either infinite or finite."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue1 double,inValue2 int);\n\ninsert into OutMediationStream\nselect math:isInfinite(inValue1) as isInfinite    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the value given in the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is of\ninfinitely large magnitude, the function returns the value, ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and\ndirects the result to the output stream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For\nexample, isInfinite(",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Double.POSITIVE_INFINITY"),") returns true."),(0,r.kt)("h2",{id:"isnan"},"isNan"),(0,r.kt)("p",null,"This function wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Float.isNaN()")," and\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Double.isNaN()")," functions and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," if ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," is NaN\n(Not-a-Number), and returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," if otherwise."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> math:isNan(<FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter which the function determines to be either NaN or a number."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue1 double,inValue2 int);\n\ninsert into OutMediationStream\nselect math:isNan(inValue1) as isNaN    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1")," in the input stream has a value that is undefined,\nthen the function considers it as an ",(0,r.kt)("inlineCode",{parentName:"p"},"NaN")," value and directs ",(0,r.kt)("inlineCode",{parentName:"p"},"True"),"\nto the output stream, OutMediationStream. For example,\nisNan(java.lang.Math.log(-12d)) returns true."),(0,r.kt)("h2",{id:"ln"},"ln"),(0,r.kt)("p",null,"This function returns the natural logarithm (base e) of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:ln(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose natural logarithm (base e) should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:ln(inValue) as lnValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is given, the function calculates\nits natural logarithm (base e) and directs the results to the output\nstream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMeditionStream"),". For example, ln(11.453) returns\n2.438251704415579."),(0,r.kt)("h2",{id:"log"},"log"),(0,r.kt)("p",null,"This function returns the logarithm of the received ",(0,r.kt)("inlineCode",{parentName:"p"},"number")," as per the\ngiven ",(0,r.kt)("inlineCode",{parentName:"p"},"base"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:log(<INT|LONG|FLOAT|DOUBLE> number, <INT|LONG|FLOAT|DOUBLE> base)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"number"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose base should be changed."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"base"),(0,r.kt)("td",{parentName:"tr",align:null},"The base value of the ouput."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (number double, base double);\n\ninsert into OutMediationStream\nselect math:log(number, base) as logValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the number and the base to which it has to be converted into is given\nin the input stream, the function calculates the number to the base\nspecified and directs the result to the output stream,\nOutMediationStream. For example, log(34, 2f) returns 5.08746284125034."),(0,r.kt)("h2",{id:"log10"},"log10"),(0,r.kt)("p",null,"This function returns the base 10 logarithm of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:log10(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose base 10 logarithm should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:log10(inValue) as lnValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is given, the function calculates\nthe base 10 logarithm of the same and directs the result to the output\nstream, OutMediatioStream. For example, log10(19.234) returns\n1.2840696117100832."),(0,r.kt)("h2",{id:"log2"},"log2"),(0,r.kt)("p",null,"This function returns the base 2 logarithm of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:log2(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose base 2 logarithm should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:log2(inValue) as lnValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream is given, the function calculates\nthe base 2 logarithm of the same and returns the value to the output\nstream, OutMediationStream. For example log2(91d) returns\n6.507794640198696."),(0,r.kt)("h2",{id:"max"},"max"),(0,r.kt)("p",null,"This function returns the greater value of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:max(<INT|LONG|FLOAT|DOUBLE> p1, <INT|LONG|FLOAT|DOUBLE> p2)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"One of the input values to be compared in order to find the larger value of the two"),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p2"),(0,r.kt)("td",{parentName:"tr",align:null},"The input value to be compared with ",(0,r.kt)("inlineCode",{parentName:"td"},"p1")," in order to find the larger value of the two."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue1 double,inValue2 int);\n\ninsert into OutMediationStream\nselect math:max(inValue1,inValue2) as maxValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If two input values ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue2")," are given, the function\ncompares them and directs the larger value to the output stream,\nOutMediationStream. For example, max(123.67d, 91) returns 123.67."),(0,r.kt)("h2",{id:"min"},"min"),(0,r.kt)("p",null,"This function returns the smaller value of ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"p2"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:min(<INT|LONG|FLOAT|DOUBLE> p1, <INT|LONG|FLOAT|DOUBLE> p2)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"One of the input values that are to be compared in order to find the smaller value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p2"),(0,r.kt)("td",{parentName:"tr",align:null},"The input value that is to be compared with ",(0,r.kt)("inlineCode",{parentName:"td"},"p1")," in order to find the smaller value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue1 double,inValue2 int);\n\ninsert into OutMediationStream\nselect math:min(inValue1,inValue2) as minValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If two input values, ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue2")," are given, the\nfunction compares them and directs the smaller value of the two to the\noutput stream, OutMediationStream. For example, min(123.67d, 91) returns\n91."),(0,r.kt)("h2",{id:"oct"},"oct"),(0,r.kt)("p",null,"This function converts the input parameter ",(0,r.kt)("inlineCode",{parentName:"p"},"p1")," to octal."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<STRING> math:oct(<INT|LONG> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose octal representation should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue long);\n\ninsert into OutMediationStream\nselect math:oct(inValue) as octValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue"),' in the input stream is given, this function\ncalculates the octal value corresponding to the same and directs it to\nthe output stream, OutMediationStream. For example, oct(99l) returns\n\\"143\\".'),(0,r.kt)("h2",{id:"parsedouble"},"parseDouble"),(0,r.kt)("p",null,"This function returns the double value of the string received."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:parseDouble(<STRING> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that should be converted into a double value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue string);\n\ninsert into OutMediationStream\nselect math:parseDouble(inValue) as output    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue"),' in the input stream holds a value, this function\nconverts it into the corresponding double value and directs it to the\noutput stream, OutMediationStream. For example, parseDouble(\\"123\\")\nreturns 123.0.'),(0,r.kt)("h2",{id:"parsefloat"},"parseFloat"),(0,r.kt)("p",null,"This function returns the float value of the received string."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<FLOAT> math:parseFloat(<STRING> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that should be converted into a float value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue string);\n\ninsert into OutMediationStream\nselect math:parseFloat(inValue) as output    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function converts the input value given in ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue"),',into its\ncorresponding float value and directs the result into the output stream,\nOutMediationStream. For example, parseFloat(\\"123\\") returns 123.0.'),(0,r.kt)("h2",{id:"parseint"},"parseInt"),(0,r.kt)("p",null,"This function returns the integer value of the received string."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT> math:parseInt(<STRING> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that should be converted to an integer."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue string);\n\ninsert into OutMediationStream\nselect math:parseInt(inValue) as output    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function converts the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue"),' into its corresponding integer\nvalue and directs the output to the output stream, OutMediationStream.\nFor example, parseInt("123") returns 123.'),(0,r.kt)("h2",{id:"parselong"},"parseLong"),(0,r.kt)("p",null,"This function returns the long value of the string received."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<LONG> math:parseLong(<STRING> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that should be converted to a long value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue string);\n\ninsert into OutMediationStream\nselect math:parseLong(inValue) as output    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function converts the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue"),' to its corresponding long value\nand directs the result to the output stream, OutMediationStream. For\nexample, parseLong("123") returns 123.'),(0,r.kt)("h2",{id:"pi"},"pi"),(0,r.kt)("p",null,"This function returns the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.PI")," constant, which is the\nclosest value to pi, i.e., the ratio of the circumference of a circle to\nits diameter."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:pi()\n")),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:pi() as piValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"pi() always returns 3.141592653589793."),(0,r.kt)("h2",{id:"power"},"power"),(0,r.kt)("p",null,"This function raises the given value to a given power."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:power(<INT|LONG|FLOAT|DOUBLE> value, <INT|LONG|FLOAT|DOUBLE> to.power)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"value"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that should be raised to the power of ",(0,r.kt)("inlineCode",{parentName:"td"},"to.power")," input parameter."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"to.power"),(0,r.kt)("td",{parentName:"tr",align:null},"The power to which the ",(0,r.kt)("inlineCode",{parentName:"td"},"value")," input parameter should be raised."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue1 double, inValue2 double);\n\ninsert into OutMediationStream\nselect math:power(inValue1,inValue2) as powerValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function raises the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1")," to the power of ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue2")," and\ndirects the output to the output stream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For\nexample, (5.6d, 3.0d) returns 175.61599999999996."),(0,r.kt)("h2",{id:"rand"},"rand"),(0,r.kt)("p",null,"This returns a stream of pseudo-random numbers when a sequence of calls\nare sent to the ",(0,r.kt)("inlineCode",{parentName:"p"},"rand()"),". Optionally, it is possible to define a seed,\ni.e., ",(0,r.kt)("inlineCode",{parentName:"p"},"rand(seed)")," using which the pseudo-random numbers are generated.\nThese functions internally use the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.util.Random")," class."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:rand()\n<DOUBLE> math:rand(<INT|LONG> seed)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"seed"),(0,r.kt)("td",{parentName:"tr",align:null},"An optional seed value that will be used to generate the random number sequence."),(0,r.kt)("td",{parentName:"tr",align:null},"defaultSeed"),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (symbol string, price long, volume long);\n\ninsert into OutMediationStream\nselect math:oct(inValue) as octValue    \nfrom InValueStream select symbol, math:rand() as randNumber;\n")),(0,r.kt)("p",null,"In the example given above, a random double value between 0 and 1 will\nbe generated using math:rand()."),(0,r.kt)("h2",{id:"round"},"round"),(0,r.kt)("p",null,"This function returns the value of the input argument rounded off to the\nclosest integer/long value."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT|LONG> math:round(<FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that should be rounded off to the closest integer/long value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:round(inValue) as roundValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function rounds off ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue1")," to the closest int/long value and\ndirects the output to the output stream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For\nexample, round(3252.353) returns 3252."),(0,r.kt)("h2",{id:"signum"},"signum"),(0,r.kt)("p",null,"This returns +1, 0, or -1 for the given positive, zero and negative\nvalues respectively. This function wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.signum()"),"\nfunction."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT> math:signum(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value that should be checked to be positive, negative or zero."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:signum(inValue) as sign    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function evaluates the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," given to be positive, negative or\nzero and directs the result to the output stream,\n",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For example, signum(-6.32d) returns -1."),(0,r.kt)("h2",{id:"sin"},"sin"),(0,r.kt)("p",null,"This returns the sine of the value given in radians. This function wraps\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.sin()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:sin(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose sine value should be found. Input is required to be in radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:sin(inValue) as sinValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function calculates the sine value of the given ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," and\ndirects the output to the output stream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For\nexample, sin(6d) returns -0.27941549819892586."),(0,r.kt)("h2",{id:"sinh"},"sinh"),(0,r.kt)("p",null,"This returns the hyperbolic sine of the value given in radians. This\nfunction wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.sinh()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:sinh(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose hyperbolic sine value should be found. Input is required to be in radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:sinh(inValue) as sinhValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function calculates the hyperbolic sine value of ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," and\ndirects the output to the output stream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For\nexample, sinh(6d) returns 201.71315737027922."),(0,r.kt)("h2",{id:"sqrt"},"sqrt"),(0,r.kt)("p",null,"This function returns the square-root of the given value. It wraps the\n",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.sqrt()"),"s function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:sqrt(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose square-root value should be found."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:sqrt(inValue) as sqrtValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function calculates the square-root value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," and\ndirects the output to the output stream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For\nexample, sqrt(4d) returns 2."),(0,r.kt)("h2",{id:"tan"},"tan"),(0,r.kt)("p",null,"This function returns the tan of the given value in radians. It wraps\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.tan()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:tan(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose tan value should be found. Input is required to be in radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:tan(inValue) as tanValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function calculates the tan value of the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," given and\ndirects the output to the output stream, ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream"),". For\nexample, tan(6d) returns -0.29100619138474915."),(0,r.kt)("h2",{id:"tanh"},"tanh"),(0,r.kt)("p",null,"This function returns the hyperbolic tangent of the value given in\nradians. It wraps the ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.tanh()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:tanh(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The value of the parameter whose hyperbolic tangent value should be found. Input is required to be in radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:tanh(inValue) as tanhValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"inVaue")," in the input stream is given, this function calculates\nthe hyperbolic tangent value of the same and directs the output to\n",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream")," stream. For example, tanh(6d) returns\n0.9999877116507956."),(0,r.kt)("h2",{id:"todegrees"},"toDegrees"),(0,r.kt)("p",null,"This function converts the value given in radians to degrees. It wraps\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.toDegrees()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:toDegrees(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The input value in radians that should be converted to degrees."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:toDegrees(inValue) as degreesValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"The function converts the ",(0,r.kt)("inlineCode",{parentName:"p"},"inValue")," in the input stream from radians\nto degrees and directs the output to ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream")," output\nstream. For example, toDegrees(6d) returns 343.77467707849394."),(0,r.kt)("h2",{id:"toradians"},"toRadians"),(0,r.kt)("p",null,"This function converts the value given in degrees to radians. It wraps\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"java.lang.Math.toRadians()")," function."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> math:toRadians(<INT|LONG|FLOAT|DOUBLE> p1)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"p1"),(0,r.kt)("td",{parentName:"tr",align:null},"The input value in degrees that should be converted to radians."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT DOUBLE"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InValueStream (inValue double);\n\ninsert into OutMediationStream\nselect math:toRadians(inValue) as radiansValue    \nfrom InValueStream;\n")),(0,r.kt)("p",null,"This function converts the input, from degrees to radians and directs\nthe result to ",(0,r.kt)("inlineCode",{parentName:"p"},"OutMediationStream")," output stream. For example,\ntoRadians(6d) returns 0.10471975511965977."))}N.isMDXComponent=!0}}]);