"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4440],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return k}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function p(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):p(p({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),m=s(n),k=a,y=m["".concat(l,".").concat(k)]||m[k]||c[k]||o;return n?r.createElement(y,p(p({ref:t},u),{},{components:n})):r.createElement(y,p({ref:t},u))}));function k(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,p=new Array(o);p[0]=m;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:a,p[1]=i;for(var s=2;s<o;s++)p[s]=n[s];return r.createElement.apply(null,p)}return r.createElement.apply(null,n)}m.displayName="MDXCreateElement"},81858:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return k},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return c}});var r=n(87462),a=n(63366),o=(n(67294),n(3905)),p=["components"],i={sidebar_position:3},l="KeyValue",s={unversionedId:"cep/reference/extensions/mappers/keyvalue",id:"cep/reference/extensions/mappers/keyvalue",title:"KeyValue",description:"This extension converts events having Key-Value maps to/from stream proceesor events.",source:"@site/docs/cep/reference/extensions/mappers/keyvalue.md",sourceDirName:"cep/reference/extensions/mappers",slug:"/cep/reference/extensions/mappers/keyvalue",permalink:"/docs/cep/reference/extensions/mappers/keyvalue",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/extensions/mappers/keyvalue.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"CSV",permalink:"/docs/cep/reference/extensions/mappers/csv"},next:{title:"Text",permalink:"/docs/cep/reference/extensions/mappers/text"}},u={},c=[{value:"Features",id:"features",level:2},{value:"keyvalue (Sink Mapper)",id:"keyvalue-sink-mapper",level:2},{value:"keyvalue (Source Mapper)",id:"keyvalue-source-mapper",level:2}],m={toc:c};function k(e){var t=e.components,n=(0,a.Z)(e,p);return(0,o.kt)("wrapper",(0,r.Z)({},m,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"keyvalue"},"KeyValue"),(0,o.kt)("p",null,"This extension converts events having Key-Value maps to/from stream proceesor events."),(0,o.kt)("h2",{id:"features"},"Features"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#keyvalue-sink-mapper"},"keyvalue (Sink Mapper)"))),(0,o.kt)("p",{parentName:"li"},"  The ",(0,o.kt)("inlineCode",{parentName:"p"},"Event to Key-Value Map")," output mapper extension allows you to convert events processed by GDN Stream Processor to key-value map events before publishing them. You can either use pre-defined keys where conversion takes place without extra configurations, or use custom keys with which the messages can be published.")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("p",{parentName:"li"},(0,o.kt)("strong",{parentName:"p"},(0,o.kt)("a",{parentName:"strong",href:"#keyvalue-source-mapper"},"keyvalue (Source Mapper)"))),(0,o.kt)("p",{parentName:"li"},"  ",(0,o.kt)("inlineCode",{parentName:"p"},"Key-Value Map to Event")," input mapper extension allows transports that accept events as key value maps to convert those events to events. You can either receive pre-defined keys where conversion takes place without extra configurations, or use custom keys to map from the message."))),(0,o.kt)("h2",{id:"keyvalue-sink-mapper"},"keyvalue (Sink Mapper)"),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"Event to Key-Value Map")," output mapper extension allows you to convert events processed by GDN Stream Processor to key-value map events before publishing them. You can either use pre-defined keys where conversion takes place without extra configurations, or use custom keys with which the messages can be published."),(0,o.kt)("p",null,"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'CREATE SINK <name> WITH (type="keyvalue")\n')),(0,o.kt)("p",null,"EXAMPLE 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='keyvalue') (symbol string, price float, volume long);\n")),(0,o.kt)("p",null,"This query performs a default Key-Value output mapping. The expected\noutput is something similar to the following:\nsymbol:'GDN'\nprice :55.6f\nvolume: 100L"),(0,o.kt)("p",null,"EXAMPLE 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='keyvalue', map.payload=\"a='symbol',b='price',c='volume'\") (symbol string, price float, volume long)\n")),(0,o.kt)("p",null,"This query performs a custom Key-Value output mapping where values are\npassed as objects. Values for ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"price"),", and ",(0,o.kt)("inlineCode",{parentName:"p"},"volume")," attributes\nare published with the keys ",(0,o.kt)("inlineCode",{parentName:"p"},"a"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"c")," respectively. The expected\noutput is a map similar to the following:\na:'GDN'\nb : 55.6f\nc: 100L"),(0,o.kt)("p",null,"EXAMPLE 3"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SINK FooStream WITH (type='inMemory', topic='stock', map.type='keyvalue', map.payload=\"a='{{symbol}} is here',b='`price`',c='volume'\") (symbol string, price float, volume long);\n")),(0,o.kt)("p",null,"This query performs a custom Key-Value output mapping where the values\nof the ",(0,o.kt)("inlineCode",{parentName:"p"},"a")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"b")," attributes are strings and c is object. The expected\noutput should be a Map similar to the following:\na:'GDN is here'\nb:'price'\nc: 100L"),(0,o.kt)("h2",{id:"keyvalue-source-mapper"},"keyvalue (Source Mapper)"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Key-Value Map to Event")," input mapper extension allows transports that accept events as key value maps to convert those events to events. You can either receive pre-defined keys where conversion takes place without extra configurations, or use custom keys to map from the message."),(0,o.kt)("p",null,"Syntax"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'CREATE SOURCE <name> WITH (type="keyvalue", fail.on.missing.attribute="<BOOL>")\n')),(0,o.kt)("p",null,"QUERY PARAMETERS"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},"Name"),(0,o.kt)("th",{parentName:"tr",align:null},"Description"),(0,o.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,o.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,o.kt)("th",{parentName:"tr",align:null},"Optional"),(0,o.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,o.kt)("td",{parentName:"tr",align:null},"If this parameter is set to ",(0,o.kt)("inlineCode",{parentName:"td"},"true"),", if an event arrives without a matching key for a specific attribute in the connected stream, it is dropped and not processed by the Stream Processor. If this parameter is set to ",(0,o.kt)("inlineCode",{parentName:"td"},"false")," the Stream Processor adds the required key to such events with a null value, and the event is converted to a event so that you could handle them as required before they are further processed."),(0,o.kt)("td",{parentName:"tr",align:null},"true"),(0,o.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,o.kt)("td",{parentName:"tr",align:null},"Yes"),(0,o.kt)("td",{parentName:"tr",align:null},"No")))),(0,o.kt)("p",null,"EXAMPLE 1"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='keyvalue') \n")),(0,o.kt)("p",null,"This query performs a default key value input mapping. The expected\ninput is a map similar to the following:\nsymbol: 'GDN'\nprice:55.6f\nvolume: 100"),(0,o.kt)("p",null,"EXAMPLE 2"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},"CREATE SOURCE FooStream WITH (type='inMemory', topic='stock', map.type='keyvalue', fail.on.missing.attribute='true', map.attributes=\"symbol = 's', price = 'p', volume = 'v'\") (symbol string, price float, volume long);\n")),(0,o.kt)("p",null,"This query performs a custom key value input mapping. The matching keys\nfor the ",(0,o.kt)("inlineCode",{parentName:"p"},"symbol"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"price")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"volume")," attributes are be ",(0,o.kt)("inlineCode",{parentName:"p"},"s"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"p"),", and\n",(0,o.kt)("inlineCode",{parentName:"p"},"v")," respectively. The expected input is a map similar to the following:\ns: 'GDN'\np: 55.6\nv: 100"))}k.isMDXComponent=!0}}]);