"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1351],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return y}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var m=a.createContext({}),d=function(e){var n=a.useContext(m),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=d(e.components);return a.createElement(m.Provider,{value:n},e.children)},c={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},l=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,m=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=d(t),y=o,u=l["".concat(m,".").concat(y)]||l[y]||c[y]||i;return t?a.createElement(u,r(r({ref:n},p),{},{components:t})):a.createElement(u,r({ref:n},p))}));function y(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,r=new Array(i);r[0]=l;var s={};for(var m in n)hasOwnProperty.call(n,m)&&(s[m]=n[m]);s.originalType=e,s.mdxType="string"==typeof e?e:o,r[1]=s;for(var d=2;d<i;d++)r[d]=t[d];return a.createElement.apply(null,r)}return a.createElement.apply(null,t)}l.displayName="MDXCreateElement"},82944:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return m},default:function(){return y},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return c}});var a=t(87462),o=t(63366),i=(t(67294),t(3905)),r=["components"],s={sidebar_position:4,title:"Using AWS Boto3"},m=void 0,d={unversionedId:"collections/dynamo/using-aws-boto3",id:"collections/dynamo/using-aws-boto3",title:"Using AWS Boto3",description:"Prerequistes",source:"@site/docs/collections/dynamo/using-aws-boto3.md",sourceDirName:"collections/dynamo",slug:"/collections/dynamo/using-aws-boto3",permalink:"/docs/collections/dynamo/using-aws-boto3",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/dynamo/using-aws-boto3.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Using AWS Boto3"},sidebar:"tutorialSidebar",previous:{title:"AWS Javascript SDK (Node)",permalink:"/docs/collections/dynamo/using-aws-js-nodejs"},next:{title:"Using mmDynamo Javascript SDK",permalink:"/docs/collections/dynamo/using-mmdynamo-browser"}},p={},c=[{value:"Prerequistes",id:"prerequistes",level:2},{value:"Create a Table",id:"create-a-table",level:2},{value:"Load Sample Data",id:"load-sample-data",level:2},{value:"Read an Item",id:"read-an-item",level:2},{value:"Update an Item",id:"update-an-item",level:2},{value:"Query",id:"query",level:2},{value:"Delete an Item",id:"delete-an-item",level:2}],l={toc:c};function y(e){var n=e.components,t=(0,o.Z)(e,r);return(0,i.kt)("wrapper",(0,a.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"prerequistes"},"Prerequistes"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Create an API Key"),(0,i.kt)("ul",{parentName:"li"},(0,i.kt)("li",{parentName:"ul"},"Login to your tenant account on ",(0,i.kt)("a",{parentName:"li",href:"https://gdn.paas.macrometa.io"},"https://gdn.paas.macrometa.io")),(0,i.kt)("li",{parentName:"ul"},"Create an API key via REST API. Make a copy of the key.")),(0,i.kt)("div",{parentName:"li",className:"admonition admonition-tip alert alert--success"},(0,i.kt)("div",{parentName:"div",className:"admonition-heading"},(0,i.kt)("h5",{parentName:"div"},(0,i.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,i.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,i.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,i.kt)("div",{parentName:"div",className:"admonition-content"},(0,i.kt)("pre",{parentName:"div"},(0,i.kt)("code",{parentName:"pre"},"Following api key is created under `demo@macrometa.io/_system` on https://gdn.paas.macrometa.io with `rw` permissions.\n```bash\n    demo.demok1.1a1aad0f4b000ca4d2d3bdb505298cbb9467b65526b0f79364e61e5f00000000\n```\n"))))),(0,i.kt)("li",{parentName:"ol"},(0,i.kt)("p",{parentName:"li"},"Install boto3"),(0,i.kt)("pre",{parentName:"li"},(0,i.kt)("code",{parentName:"pre"},"```js\n    pip install boto3==1.0.0\n\n```\n")),(0,i.kt)("p",{parentName:"li"},"You can find more details here - ",(0,i.kt)("a",{parentName:"p",href:"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html#installation"},"https://boto3.amazonaws.com/v1/documentation/api/latest/guide/quickstart.html#installation")))),(0,i.kt)("h2",{id:"create-a-table"},"Create a Table"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'tab="Python"',tab:'"Python"'},"import boto3\n\nREGION = \"us-east-1\"\ndcName = \"gdn.paas.macrometa.io\"\nhost = \"https://api-\" + dcName\napiKey = \"<your-api-key>\"\naccessKeyId = \"apikey \" + apiKey\n\ndef create_movie_table(dynamodb=None):\n    if not dynamodb:\n        dynamodb = boto3.client('dynamodb',\n                                region_name=REGION,\n                                endpoint_url=host + \"/_api/dynamo\",\n                                aws_access_key_id=accessKeyId,\n                                aws_secret_access_key=\"\"\n                                )\n    table = dynamodb.create_table(\n        TableName='Movies',\n        KeySchema=[\n            {\n                'AttributeName': 'year',\n                'KeyType': 'HASH'  # Partition key\n            },\n            {\n                'AttributeName': 'title',\n                'KeyType': 'RANGE'  # Sort key\n            }\n        ],\n        AttributeDefinitions=[\n            {\n                'AttributeName': 'year',\n                'AttributeType': 'N'\n            },\n            {\n                'AttributeName': 'title',\n                'AttributeType': 'S'\n            },\n\n        ],\n        ProvisionedThroughput={\n            'ReadCapacityUnits': 10,\n            'WriteCapacityUnits': 10\n        }\n    )\n    return table\n\n\nif __name__ == '__main__':\n    movie_table = create_movie_table()\n    print(\"Table status:\", movie_table)\n")),(0,i.kt)("h2",{id:"load-sample-data"},"Load Sample Data"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'tab="Python"',tab:'"Python"'},'import json\nimport boto3\n\n\nREGION = "us-east-1"\nREGION = "sfo2"\ndcName = "gdn.paas.macrometa.io"\nhost = "https://api-" + dcName\napiKey ="<your-api-key>";\nhost = "https://api-" + dcName\naccessKeyId = "apikey " + apiKey\n\ndef load_movies(dynamodb=None):\n    if not dynamodb:\n        dynamodb = boto3.client(\'dynamodb\',\n                                region_name=REGION,\n                                endpoint_url=host + "/_api/dynamo",\n                                aws_access_key_id=accessKeyId,\n                                aws_secret_access_key=""\n                                )\n\n        print("Adding movie:")\n        dynamodb.put_item(\n            TableName="Movies",\n            Item=   {\n            "year": {"N": "2013"},\n            "title": {"S": "Rush"},\n            "info": {"M":\n                {\n                    "directors": {"L": [{"S": "Ron Howard"}]},\n                    "release_date": {"S": "2013-09-02T00:00:00Z"},\n                    "rating": {"N": "8.3"},\n                    "genres": {"L": [{"S": "Action"}, {"S": "Biography"}, {"S": "Drama"}, {"S": "Sport"}]},\n                    "image_url": {"S": "http://ia.media-imdb.com/images/M/MV5BMTQyMDE0MTY0OV5BMl5BanBnXkFtZTcwMjI2OTI0OQ@@._V1_SX400_.jpg"},\n                    "plot": {"S": "A re-creation of the merciless 1970s rivalry between Formula One rivals James Hunt and Niki Lauda."},\n                    "rank": {"N": "2"},\n                    "running_time_secs": {"N": "7380"},\n                    "actors": {"L": [{"S": "Daniel Bruhl"}, {"S": "Chris Hemsworth"}, {"S": "Olivia Wilde"}]}\n                }\n            }\n        }\n        )\n       \nif __name__ == \'__main__\':\n    \n    load_movies()\n    \n')),(0,i.kt)("h2",{id:"read-an-item"},"Read an Item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'tab="Python"',tab:'"Python"'},'import boto3\n\nREGION = "us-east-1"\nREGION = "sfo2"\ndcName = "gdn.paas.macrometa.io"\nhost = "https://api-" + dcName\napiKey ="<your-api-key>";\naccessKeyId = "apikey " + apiKey\n\ndef get_movie(dynamodb=None):\n    if not dynamodb:\n        dynamodb = boto3.client(\'dynamodb\',\n                                region_name=REGION,\n                                endpoint_url=host + "/_api/dynamo",\n                                aws_access_key_id=accessKeyId,\n                                aws_secret_access_key=""\n                                )\n\n       \n        resp =dynamodb.get_item(\n            TableName="Movies",\n            Key={"year": {"N": "2013"},\n            "title": {"S": "Rush"}}\n        )\n        print("Get movie: ", resp)\n\nif __name__ == \'__main__\':   \n    get_movie()\n')),(0,i.kt)("h2",{id:"update-an-item"},"Update an Item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'tab="Python"',tab:'"Python"'},'import boto3\n\nREGION = "us-east-1"\nREGION = "sfo2"\ndcName = "gdn.paas.macrometa.io"\nhost = "https://api-" + dcName\napiKey ="<your-api-key>";\naccessKeyId = "apikey " + apiKey\n\ndef update_movie(dynamodb=None):\n    if not dynamodb:\n        dynamodb = boto3.client(\'dynamodb\',\n                                region_name=REGION,\n                                endpoint_url=host + "/_api/dynamo",\n                                aws_access_key_id=accessKeyId,\n                                aws_secret_access_key=""\n                                )\n\n        resp =dynamodb.update_item(\n            TableName="Movies",\n            Key= {\n            "year": {"N": "2013"},\n            "title": {"S": "Rush"}\n            },\n            UpdateExpression="set info.rating = :r, info.plot=:p",\n            ExpressionAttributeValues= {\n                ":r": {"N":"5.5"},\n                ":p": {"S":"Everything happens all at once."},\n            },\n            ReturnValues= "UPDATED_OLD"\n        )\n        print("Update movie: ", resp)\n\nif __name__ == \'__main__\':\n    \n    update_movie()\n\n')),(0,i.kt)("h2",{id:"query"},"Query"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'tab="Python"',tab:'"Python"'},'\nimport boto3\nfrom decimal import Decimal\n\n\nREGION = "us-east-1"\nREGION = "sfo2"\ndcName = "gdn.paas.macrometa.io"\nhost = "https://api-" + dcName\napiKey ="<your-api-key>";\naccessKeyId = "apikey " + apiKey\n\ndef query(dynamodb=None):\n    if not dynamodb:\n        dynamodb = boto3.client(\'dynamodb\',\n                                region_name=REGION,\n                                endpoint_url=host + "/_api/dynamo",\n                                aws_access_key_id=accessKeyId,\n                                aws_secret_access_key=""\n                                )\n\n        resp =dynamodb.query(\n            TableName="Movies",\n            KeyConditionExpression="title == :t",\n            ExpressionAttributeValues={\n                ":t": {"S": "Rush"}\n            },\n            Limit=12\n        )\n        print("query response: ", resp)\nif __name__ == \'__main__\':\n    \n    query()\n')),(0,i.kt)("h2",{id:"delete-an-item"},"Delete an Item"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-python",metastring:'tab="Python"',tab:'"Python"'},'\nimport boto3\nfrom decimal import Decimal\n\n\nREGION = "us-east-1"\nREGION = "sfo2"\ndcName = "gdn.paas.macrometa.io"\nhost = "https://api-" + dcName\napiKey ="<your-api-key>";\naccessKeyId = "apikey " + apiKey\n\ndef delete_item(dynamodb=None):\n    if not dynamodb:\n        dynamodb = boto3.client(\'dynamodb\',\n                                region_name=REGION,\n                                endpoint_url=host + "/_api/dynamo",\n                                aws_access_key_id=accessKeyId,\n                                aws_secret_access_key=""\n                                )\n\n        resp =dynamodb.delete_item(\n            TableName="Movies",\n            Key= {\n            "year": {"N": "2013"},\n            "title": {"S": "Rush"}\n            },\n            ReturnValues="ALL_OLD",\n            ConditionExpression="title == :f",\n            ExpressionAttributeValues={\n                ":f": {"S": "Rush"},\n            }\n        )\n        print("delete response: ", resp)\n\nif __name__ == \'__main__\':\n    \n    delete_item()\n\n')))}y.isMDXComponent=!0}}]);