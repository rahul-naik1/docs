"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[5303],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return m}});var o=t(67294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);n&&(o=o.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,o)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,o,r=function(e,n){if(null==e)return{};var t,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)t=i[o],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=o.createContext({}),d=function(e){var n=o.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},l=function(e){var n=d(e.components);return o.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return o.createElement(o.Fragment,{},n)}},p=o.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,l=c(e,["components","mdxType","originalType","parentName"]),p=d(t),m=r,f=p["".concat(s,".").concat(m)]||p[m]||u[m]||i;return t?o.createElement(f,a(a({ref:n},l),{},{components:t})):o.createElement(f,a({ref:n},l))}));function m(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,a=new Array(i);a[0]=p;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,a[1]=c;for(var d=2;d<i;d++)a[d]=t[d];return o.createElement.apply(null,a)}return o.createElement.apply(null,t)}p.displayName="MDXCreateElement"},14279:function(e,n,t){t.r(n),t.d(n,{assets:function(){return l},contentTitle:function(){return s},default:function(){return m},frontMatter:function(){return c},metadata:function(){return d},toc:function(){return u}});var o=t(87462),r=t(63366),i=(t(67294),t(3905)),a=["components"],c={sidebar_position:4,title:"Diffing Two Documents"},s=void 0,d={unversionedId:"c8ql/examples/diffing-documents",id:"c8ql/examples/diffing-documents",title:"Diffing Two Documents",description:"There is no built-in C8QL function to compare the attributes of two documents, but it is easily possible to build a query that does:",source:"@site/docs/c8ql/examples/diffing-documents.md",sourceDirName:"c8ql/examples",slug:"/c8ql/examples/diffing-documents",permalink:"/docs/c8ql/examples/diffing-documents",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/c8ql/examples/diffing-documents.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Diffing Two Documents"},sidebar:"tutorialSidebar",previous:{title:"Data Modification Queries",permalink:"/docs/c8ql/examples/data-modification-queries"},next:{title:"Dynamic Attribute Names",permalink:"/docs/c8ql/examples/dynamic-attribute-names"}},l={},u=[],p={toc:u};function m(e){var n=e.components,t=(0,r.Z)(e,a);return(0,i.kt)("wrapper",(0,o.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"There is no built-in C8QL function to compare the attributes of two documents, but it is easily possible to build a query that does:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'// input document 1\nLET doc1 = {\n  "foo": "bar",\n  "a": 1,\n  "b": 2\n}\n\n// input document 2\nLET doc2 = {\n  "foo": "baz",\n  "a": 2,\n  "c": 3\n}\n\n// collect attributes present in doc1, but missing in doc2\nLET missing = (\n  FOR key IN ATTRIBUTES(doc1)\n  FILTER ! HAS(doc2, key)\n  RETURN {\n    [ key ]: doc1[key]\n  }\n)\n\n// collect attributes present in both docs, but that have different values\nLET changed = (\n  FOR key IN ATTRIBUTES(doc1)\n    FILTER HAS(doc2, key) && doc1[key] != doc2[key]\n    RETURN {\n      [ key ] : {\n        old: doc1[key],\n        new: doc2[key]\n      }\n    }\n)\n\n// collect attributes present in doc2, but missing in doc1\nLET added = (\n  FOR key IN ATTRIBUTES(doc2)\n    FILTER ! HAS(doc1, key)\n    RETURN {\n      [ key ]: doc2[key]\n    }\n)\n\n// return final result\nRETURN {\n  "missing": missing,\n  "changed": changed,\n  "added": added\n}\n')),(0,i.kt)("p",null,"The query may look a bit lengthy, but much of that is due to formatting. A more terse version can be found below."),(0,i.kt)("p",null,"The above query will return a document with three attributes:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"missing"),":\nContains all attributes only present in first document\n(i.e. missing in second document)")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"changed"),":\nContains all attributes present in both documents that have different values")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},(0,i.kt)("inlineCode",{parentName:"p"},"added"),":\nContains all attributes only present in second document\n(i.e. missing in first document)"))),(0,i.kt)("p",null,"For the two example documents it will return:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'[\n {\n   "missing" : [\n     {\n       "b" : 2\n     }\n   ],\n   "changed" : [\n     {\n       "foo" : {\n         "old" : "bar",\n         "new" : "baz"\n       }\n      },\n     {\n       "a" : {\n         "old" : 1,\n         "new" : 2\n       }\n     }\n   ],\n   "added" : [\n     {\n       "c" : 3\n     }\n   ]\n }\n]\n')),(0,i.kt)("p",null,"You may adjust the query to produce a different output format."),(0,i.kt)("p",null,"Following is a version of the same query that can be invoked from JavaScript easily. It passes the two documents as bind parameters and calls ",(0,i.kt)("inlineCode",{parentName:"p"},"db._query"),"."),(0,i.kt)("p",null,"The query is now an one-liner (less readable but easier to copy & paste):"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-js"},'bindVariables = {\n  doc1 : { "foo" : "bar", "a" : 1, "b" : 2 },\n  doc2 : { "foo" : "baz", "a" : 2, "c" : 3 }\n};\n\nquery = "LET doc1 = @doc1, doc2 = @doc2, missing = (FOR key IN ATTRIBUTES(doc1) FILTER ! HAS(doc2, key) RETURN { [ key ]: doc1[key] }), changed = (FOR key IN ATTRIBUTES(doc1) FILTER HAS(doc2, key) && doc1[key] != doc2[key] RETURN { [ key ] : { old: doc1[key], new: doc2[key] } }), added = (FOR key IN ATTRIBUTES(doc2) FILTER ! HAS(doc1, key) RETURN { [ key ] : doc2[key] }) RETURN { missing : missing, changed : changed, added : added }";\n\nresult = db._query(query, bindVariables).toArray();\n')))}m.isMDXComponent=!0}}]);