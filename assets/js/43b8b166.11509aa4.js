"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[2292],{3905:function(e,t,r){r.d(t,{Zo:function(){return l},kt:function(){return g}});var n=r(67294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function i(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),m=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},l=function(e){var t=m(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,l=i(e,["components","mdxType","originalType","parentName"]),c=m(r),g=a,y=c["".concat(p,".").concat(g)]||c[g]||d[g]||o;return r?n.createElement(y,s(s({ref:t},l),{},{components:r})):n.createElement(y,s({ref:t},l))}));function g(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,s=new Array(o);s[0]=c;var i={};for(var p in t)hasOwnProperty.call(t,p)&&(i[p]=t[p]);i.originalType=e,i.mdxType="string"==typeof e?e:a,s[1]=i;for(var m=2;m<o;m++)s[m]=r[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}c.displayName="MDXCreateElement"},32828:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return p},default:function(){return g},frontMatter:function(){return i},metadata:function(){return m},toc:function(){return d}});var n=r(87462),a=r(63366),o=(r(67294),r(3905)),s=["components"],i={sidebar_position:2,title:"Crypto Trading Bot"},p=void 0,m={unversionedId:"apps/crypto-trading",id:"apps/crypto-trading",title:"Crypto Trading Bot",description:"On GDN",source:"@site/docs/apps/crypto-trading.md",sourceDirName:"apps",slug:"/apps/crypto-trading",permalink:"/docs/apps/crypto-trading",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/apps/crypto-trading.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2,title:"Crypto Trading Bot"},sidebar:"tutorialSidebar",previous:{title:"Global Address Book",permalink:"/docs/apps/address-book"},next:{title:"OTT App",permalink:"/docs/apps/ott-app"}},l={},d=[{value:"On GDN",id:"on-gdn",level:3},{value:"On GDN (Wavelength 5G)",id:"on-gdn-wavelength-5g",level:3}],c={toc:d};function g(e){var t=e.components,r=(0,a.Z)(e,s);return(0,o.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h3",{id:"on-gdn"},"On GDN"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Tenant")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Fabric")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Stream App")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"GUI")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Source Code")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"demo@macrometa.io")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"_system")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"crypto-trading-app")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://macrometacorp.github.io/tutorial-cryptotrading/"},(0,o.kt)("strong",{parentName:"a"},"Crypto Trading GUI"))),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://github.com/Macrometacorp/tutorial-cryptotrading"},"github"))))),(0,o.kt)("h3",{id:"on-gdn-wavelength-5g"},"On GDN (Wavelength 5G)"),(0,o.kt)("table",null,(0,o.kt)("thead",{parentName:"table"},(0,o.kt)("tr",{parentName:"thead"},(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Tenant")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Fabric")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Stream App")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"GUI")),(0,o.kt)("th",{parentName:"tr",align:null},(0,o.kt)("strong",{parentName:"th"},"Source Code")))),(0,o.kt)("tbody",{parentName:"table"},(0,o.kt)("tr",{parentName:"tbody"},(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"demo@macrometa.io")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"_system")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("inlineCode",{parentName:"td"},"crypto-trading-app")),(0,o.kt)("td",{parentName:"tr",align:null},(0,o.kt)("a",{parentName:"td",href:"https://macrometacorp.github.io/demo-crypto-trading-5g/"},(0,o.kt)("strong",{parentName:"a"},"Crypto Trading GUI"))),(0,o.kt)("td",{parentName:"tr",align:null})))),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"Stream Workers is currently an Enterprise only feature. We will be rolling it out to all users in Q1 of 2022.\nPlease contact ",(0,o.kt)("a",{parentName:"p",href:"mailto:support@macrometa.com"},"support@macrometa.com")," if you have any questions."))),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"Stream App:")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"@App:name(\"crypto-trading-app\")\n@App:description(\"Crypto Trading demo\")\n\n-- The trigger\ndefine trigger CryptoTraderEventsTrigger at every 5 sec;\n\n/*\nThis app reads every 5 seconds the close prices from Coinbase, Bitstamp and Bitflyer exchanges APIs.\nThen it calculates the average prices within 10 events window and creates a \"BUY/SELL\" trading strategy.\nThe close and average prices are stored in CryptoTraderQuotesAvgXXX streams \nwhereas the strategy is kept in trades collection.\n*/\n\n/**\nTesting the Stream Application:\n    1. Publish the app\n    2. Start the GUI against the same federation\n*/\n\n-- Streams for the http call requests\n-------------------------------------------------------------------------------------------------------------------------------------\n@sink(type='http-call', publisher.url='https://api.pro.coinbase.com/products/btc-usd/ticker',\n      method='GET', headers=\"'User-Agent:c8cep'\", sink.id='coinbase-ticker', @map(type='json'))\ndefine stream UsdCryptoTraderRequestStream (triggered_time string);\n\n@sink(type='http-call', publisher.url='https://www.bitstamp.net/api/v2/ticker/btceur',\n      method='GET', sink.id='bitstamp-ticker', @map(type='json'))\ndefine stream EurCryptoTraderRequestStream (triggered_time string);\n\n@sink(type='http-call', publisher.url='https://api.bitflyer.com/v1/ticker',\n      method='GET', sink.id='bitflyer-ticker', @map(type='json'))\ndefine stream JpyCryptoTraderRequestStream (triggered_time string);\n\n-- Streams for the http call responses\n-------------------------------------------------------------------------------------------------------------------------------------\n@source(type='http-call-response', sink.id='coinbase-ticker', http.status.code='200', @map(type='json', enclosing.element=\"$.*\"))\ndefine stream UsdCryptoTraderTickerResponseStream(time string, price string);\n\n@source(type='http-call-response', sink.id='bitstamp-ticker', http.status.code='200', @map(type='json'))\ndefine stream EurCryptoTraderTickerResponseStream(timestamp string, last string);\n\n@source(type='http-call-response', sink.id='bitflyer-ticker', http.status.code='200', @map(type='json'))\ndefine stream JpyCryptoTraderTickerResponseStream(timestamp string, ltp double);\n\n-- Streams for the close and average prices\n-------------------------------------------------------------------------------------------------------------------------------------\n@sink(type = 'c8streams', stream = \"CryptoTraderQuotesAvgUSD\", @map(type='json'), replication.type=\"global\")\ndefine stream CryptoTraderQuotesAvgUSD(exchange string, quote_region string, symbol string, ma double, close double, timestamp long);\n\n@sink(type = 'c8streams', stream = \"CryptoTraderQuotesAvgEUR\", @map(type='json'), replication.type=\"global\")\ndefine stream CryptoTraderQuotesAvgEUR(exchange string, quote_region string, symbol string, ma double, close double, timestamp long);\n\n@sink(type = 'c8streams', stream = \"CryptoTraderQuotesAvgJPY\", @map(type='json'), replication.type=\"global\")\ndefine stream CryptoTraderQuotesAvgJPY(exchange string, quote_region string, symbol string, ma double, close double, timestamp long);\n\n-- Common trades store\n@store(type='c8db', collection='trades', replication.type=\"local\")\ndefine table trades(exchange string, quote_region string, symbol string, timestamp long, trade_location string,\n                    trade_price double, trade_strategy string, trade_type string);\n                    \n-- Fire Coinbase Pro BTC/USD requests initiated by a trigger\n-------------------------------------------------------------------------------\nselect time:currentTimestamp() as triggered_time from CryptoTraderEventsTrigger\ninsert into UsdCryptoTraderRequestStream;\n\n-- Fire Bitstamp BTC/EUR requests initiated by a trigger\n-------------------------------------------------------------------------------\nselect time:currentTimestamp() as triggered_time from CryptoTraderEventsTrigger\ninsert into EurCryptoTraderRequestStream;\n\n-- Fire Bitflyer BTC/JPY requests initiated by a trigger\n-------------------------------------------------------------------------------\nselect time:currentTimestamp() as triggered_time from CryptoTraderEventsTrigger\ninsert into JpyCryptoTraderRequestStream;\n\n-- Coinbase Pro BTC/USD strategy generation\n-------------------------------------------------------------------------------------------------\n@info(name='Query for BTC/USD close and average prices within moving 10 events windows')\nselect \"Coinbase Pro\" as exchange, \"USA\" as quote_region,\n        \"BTC/USD\" as symbol, avg(convert(price, 'double')) as ma, convert(price, 'double') as close, \n        --time:timestampInMilliseconds(str:replaceFirst(str:replaceFirst(time, 'T', ' '), 'Z','0'), 'yyyy-MM-dd HH:mm:ss.SSS') as timestamp\n        time:timestampInMilliseconds()/1000 as timestamp\n  from  UsdCryptoTraderTickerResponseStream[context:getVar('region') == 'gdn-fra1']#window.length(10)\ninsert into CryptoTraderQuotesAvgUSD;\n\n@info(name='Query for BTC/USD trading strategy BUY')\nselect e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       \"gdn.prod.macrometa.io\" as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n       'BUY' as trade_type\n  from every e1=CryptoTraderQuotesAvgUSD[e1.close < e1.ma], e2=CryptoTraderQuotesAvgUSD[e2.close > e2.ma]\ninsert into trades;\n\n@info(name='Query for BTC/USD trading strategy SELL')\nselect e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       \"gdn.prod.macrometa.io\" as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n       'SELL' as trade_type\n  from every e1=CryptoTraderQuotesAvgUSD[e1.close > e1.ma], e2=CryptoTraderQuotesAvgUSD[e2.close < e2.ma]\ninsert into trades;\n\nselect timestamp, symbol\n  from CryptoTraderQuotesAvgUSD#window.length(10)\ndelete trades for expired events on trades.timestamp < timestamp and trades.symbol == symbol;\n\n-- Bitstamp BTC/EUR trading strategy generation\n-----------------------------------------------------------------------------------------\n@info(name='Query for BTC/EUR close and average prices within moving 10 events windows')\nselect \"Bitstamp\" as exchange, \"Europe\" as quote_region,\n        \"BTC/EUR\" as symbol, avg(convert(last, 'double')) as ma, convert(last, 'double') as close, \n        --convert(timestamp, 'long') as timestamp\n        time:timestampInMilliseconds()/1000 as timestamp\n  from  EurCryptoTraderTickerResponseStream[context:getVar('region') == 'gdn-fra1']#window.length(10)\ninsert into CryptoTraderQuotesAvgEUR;\n\n@info(name='Query for BTC/EUR trading strategy BUY')\nselect e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       \"gdn.prod.macrometa.io\" as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n       'BUY' as trade_type\n  from every e1=CryptoTraderQuotesAvgEUR[e1.close < e1.ma], e2=CryptoTraderQuotesAvgEUR[e2.close > e2.ma]\ninsert into trades;\n\n@info(name='Query for BTC/EUR trading strategy SELL')\nselect e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       \"gdn.prod.macrometa.io\" as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n       'SELL' as trade_type\n  from every e1=CryptoTraderQuotesAvgEUR[e1.close > e1.ma], e2=CryptoTraderQuotesAvgEUR[e2.close < e2.ma]\ninsert into trades;\n\nselect timestamp, symbol\n  from CryptoTraderQuotesAvgEUR#window.length(10)\ndelete trades for expired events on trades.timestamp < timestamp and trades.symbol == symbol;\n\n-- Bitflyer BTC/JPY strategy generation\n----------------------------------------------------------------------------------------------\n@info(name='Query for BTC/JPY close and average prices within moving 10 events windows')\nselect \"Bitflyer\" as exchange, \"Asia-Pacific\" as quote_region,\n        \"BTC/JPY\" as symbol, avg(ltp) as ma, ltp as close, \n        --time:timestampInMilliseconds(str:replaceFirst(timestamp, 'T', ' '), 'yyyy-MM-dd HH:mm:ss.SSS') as timestamp\n        time:timestampInMilliseconds()/1000 as timestamp\n  from  JpyCryptoTraderTickerResponseStream[context:getVar('region') == 'gdn-fra1']#window.length(10)\ninsert into CryptoTraderQuotesAvgJPY;\n\n@info(name='Query for BTC/JPY trading strategy BUY')\nselect e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       \"gdn.prod.macrometa.io\" as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n       'BUY' as trade_type\n  from every e1=CryptoTraderQuotesAvgJPY[e1.close < e1.ma], e2=CryptoTraderQuotesAvgJPY[e2.close > e2.ma]\ninsert into trades;\n\n@info(name='Query for BTC/JPY trading strategy SELL')\nselect e2.exchange, e2.quote_region, e2.symbol, e2.timestamp,\n       \"gdn.prod.macrometa.io\" as trade_location,\n       e2.close as trade_price, \"MA Trading\" as trade_strategy,\n       'SELL' as trade_type\n  from every e1=CryptoTraderQuotesAvgJPY[e1.close > e1.ma], e2=CryptoTraderQuotesAvgJPY[e2.close < e2.ma]\ninsert into trades;\n \nselect timestamp, symbol\n  from CryptoTraderQuotesAvgJPY#window.length(10)\ndelete trades for expired events on trades.timestamp < timestamp and trades.symbol == symbol;\n\n")))}g.isMDXComponent=!0}}]);