"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[466],{3905:function(e,t,n){n.d(t,{Zo:function(){return s},kt:function(){return N}});var a=n(67294);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){l(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,l=function(e,t){if(null==e)return{};var n,a,l={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(l[n]=e[n]);return l}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(l[n]=e[n])}return l}var o=a.createContext({}),m=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},s=function(e){var t=m(e.components);return a.createElement(o.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},k=a.forwardRef((function(e,t){var n=e.components,l=e.mdxType,r=e.originalType,o=e.parentName,s=p(e,["components","mdxType","originalType","parentName"]),k=m(n),N=l,d=k["".concat(o,".").concat(N)]||k[N]||u[N]||r;return n?a.createElement(d,i(i({ref:t},s),{},{components:n})):a.createElement(d,i({ref:t},s))}));function N(e,t){var n=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var r=n.length,i=new Array(r);i[0]=k;var p={};for(var o in t)hasOwnProperty.call(t,o)&&(p[o]=t[o]);p.originalType=e,p.mdxType="string"==typeof e?e:l,i[1]=p;for(var m=2;m<r;m++)i[m]=n[m];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}k.displayName="MDXCreateElement"},46538:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return o},default:function(){return N},frontMatter:function(){return p},metadata:function(){return m},toc:function(){return u}});var a=n(87462),l=n(63366),r=(n(67294),n(3905)),i=["components"],p={sidebar_position:3},o="JSON",m={unversionedId:"cep/reference/extensions/execution/json",id:"cep/reference/extensions/execution/json",title:"JSON",description:"This extension provides capability to retrieve, insert, and modify JSON elements.",source:"@site/docs/cep/reference/extensions/execution/json.md",sourceDirName:"cep/reference/extensions/execution",slug:"/cep/reference/extensions/execution/json",permalink:"/docs/cep/reference/extensions/execution/json",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/extensions/execution/json.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3},sidebar:"tutorialSidebar",previous:{title:"Map",permalink:"/docs/cep/reference/extensions/execution/map"},next:{title:"List",permalink:"/docs/cep/reference/extensions/execution/list"}},s={},u=[{value:"Features",id:"features",level:2},{value:"group",id:"group",level:2},{value:"groupAsObject",id:"groupasobject",level:2},{value:"getBool",id:"getbool",level:2},{value:"getDouble",id:"getdouble",level:2},{value:"getFloat",id:"getfloat",level:2},{value:"getInt",id:"getint",level:2},{value:"getLong",id:"getlong",level:2},{value:"getObject",id:"getobject",level:2},{value:"getString",id:"getstring",level:2},{value:"isExists",id:"isexists",level:2},{value:"setElement",id:"setelement",level:2},{value:"toObject",id:"toobject",level:2},{value:"toString",id:"tostring",level:2},{value:"tokenize",id:"tokenize",level:2},{value:"tokenizeAsObject",id:"tokenizeasobject",level:2}],k={toc:u};function N(e){var t=e.components,n=(0,l.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},k,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"json"},"JSON"),(0,r.kt)("p",null,"This extension provides capability to retrieve, insert, and modify JSON elements."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#group"},"group (Aggregate Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function aggregates the JSON elements and returns a JSON object\nby adding enclosing.element if it is provided. If enclosing.element\nis not provided it aggregate the JSON elements returns a JSON array.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#groupasobject"},"groupAsObject (Aggregate Function)"))),(0,r.kt)("p",{parentName:"li"},"  This function aggregates the JSON elements and returns a JSON object\nby adding enclosing.element if it is provided. If enclosing.element\nis not provided it aggregate the JSON elements returns a JSON array.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getbool"},"getBool (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," value specified in the given path\nof the JSON element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getdouble"},"getDouble (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"double")," value specified in the given path\nof the JSON element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getfloat"},"getFloat (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"float")," value specified in the given path\nof the JSON element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getint"},"getInt (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," value specified in the given path of\nthe JSON element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getlong"},"getLong (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"long")," value specified in the given path of\nthe JSON element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getobject"},"getObject (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function retrieves the object specified in the given path of the\nJSON element.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#getstring"},"getString (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function retrieves value specified in the given path of the JSON\nelement as a string.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#isexists"},"isExists (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function checks whether there is a JSON element present in the given\npath or not.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#setelement"},"setElement (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function sets JSON element into a given JSON at the specific path.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#toobject"},"toObject (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function generate JSON object from the given JSON string.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#tostring"},"toString (Function)"))),(0,r.kt)("p",{parentName:"li"},"  Function generates a JSON string corresponding to a given JSON\nobject.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#tokenize"},"tokenize (StreamProcessor)"))),(0,r.kt)("p",{parentName:"li"},"  Stream processor tokenizes the given JSON into to multiple JSON\nstring elements and sends them as separate events.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#tokenizeasobject"},"tokenizeAsObject (StreamProcessor)"))),(0,r.kt)("p",{parentName:"li"},"  Stream processor tokenizes the given JSON into to multiple JSON\nobject elements and sends them as separate events."))),(0,r.kt)("h2",{id:"group"},"group"),(0,r.kt)("p",null,"This function aggregates the JSON elements and returns a JSON object by\nadding enclosing.element if it is provided. If enclosing.element is not\nprovided it aggregate the JSON elements returns a JSON array."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> json:group(<STRING|OBJECT> json)\n<OBJECT> json:group(<STRING|OBJECT> json, <BOOL> distinct)\n<OBJECT> json:group(<STRING|OBJECT> json, <STRING> enclosing.element)\n<OBJECT> json:group(<STRING|OBJECT> json, <STRING> enclosing.element, <BOOL> distinct)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element that needs to be aggregated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enclosing.element"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element used to enclose the aggregated JSON elements."),(0,r.kt)("td",{parentName:"tr",align:null},"EMPTY","_","STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"distinct"),(0,r.kt)("td",{parentName:"tr",align:null},"This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:group("json") as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"12:20"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'[{"date":"2013-11-19","time":"10:30"}{"date":"2013-11-19","time":"12:20"}]'),"\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:group("json", true) as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'[{"date":"2013-11-19","time":"10:30"}]')," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:group("json", "result") as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"12:20"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"result":[{"date":"2013-11-19","time":"10:30"},{"date":"2013-11-19","time":"12:20"}}'),"\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("p",null,"EXAMPLE 4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:group("json", "result", true) as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"result":[{"date":"2013-11-19","time":"10:30"}]}')," to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("h2",{id:"groupasobject"},"groupAsObject"),(0,r.kt)("p",null,"This function aggregates the JSON elements and returns a JSON object by\nadding enclosing.element if it is provided. If enclosing.element is not\nprovided it aggregate the JSON elements returns a JSON array."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> json:groupAsObject(<STRING|OBJECT> json)\n<OBJECT> json:groupAsObject(<STRING|OBJECT> json, <BOOL> distinct)\n<OBJECT> json:groupAsObject(<STRING|OBJECT> json, <STRING> enclosing.element)\n<OBJECT> json:groupAsObject(<STRING|OBJECT> json, <STRING> enclosing.element, <BOOL> distinct)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element that needs to be aggregated."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"enclosing.element"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element used to enclose the aggregated JSON elements."),(0,r.kt)("td",{parentName:"tr",align:null},"EMPTY","_","STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"distinct"),(0,r.kt)("td",{parentName:"tr",align:null},"This is used to only have distinct JSON elements in the concatenated JSON object/array that is returned."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:groupAsObject("json") as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"12:20"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'[{"date":"2013-11-19","time":"10:30"}{"date":"2013-11-19","time":"12:20"}]'),"\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:groupAsObject("json", true) as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'[{"date":"2013-11-19","time":"10:30"}]')," to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:groupAsObject("json", "result") as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"12:20"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"result":[{"date":"2013-11-19","time":"10:30"},{"date":"2013-11-19","time":"12:20"}}'),"\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("p",null,"EXAMPLE 4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'insert into OutputStream\nselect json:groupAsObject("json", "result", true) as groupedJSONArray\nfrom InputStream#window.length(5);\n')),(0,r.kt)("p",null,"When we input events having values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}')," and\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"date":"2013-11-19","time":"10:30"}'),", it returns\n",(0,r.kt)("inlineCode",{parentName:"p"},'{"result":[{"date":"2013-11-19","time":"10:30"}]}')," to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("h2",{id:"getbool"},"getBool"),(0,r.kt)("p",null,"Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"boolean")," value specified in the given path of\nthe JSON element."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> json:getBool(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input containing boolean value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to fetch the boolean value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getBool(json,'$.married')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," as there is a matching boolean at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.married"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getBool(json,'$.name')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there is no matching boolean at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getBool(json,'$.foo')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there is no matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.foo"),"."),(0,r.kt)("h2",{id:"getdouble"},"getDouble"),(0,r.kt)("p",null,"Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"double")," value specified in the given path of\nthe JSON element."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<DOUBLE> json:getDouble(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input containing double value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to fetch the double value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getDouble(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'salary' : 12000.0}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"12000.0")," as there is a matching double at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getDouble(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getDouble(json,'$.name')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching double at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name"),"."),(0,r.kt)("h2",{id:"getfloat"},"getFloat"),(0,r.kt)("p",null,"Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"float")," value specified in the given path of\nthe JSON element."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<FLOAT> json:getFloat(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input containing float value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to fetch the float value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getFloat(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'salary' : 12000.0}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"12000")," as there is a matching float at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getFloat(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getFloat(json,'$.name')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching float at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name"),"."),(0,r.kt)("h2",{id:"getint"},"getInt"),(0,r.kt)("p",null,"Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"int")," value specified in the given path of the\nJSON element."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<INT> json:getInt(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input containing int value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to fetch the int value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getInt(json,'$.age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"23")," as there is a matching int at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.age"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getInt(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getInt(json,'$.name')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching int at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name"),"."),(0,r.kt)("h2",{id:"getlong"},"getLong"),(0,r.kt)("p",null,"Function retrieves the ",(0,r.kt)("inlineCode",{parentName:"p"},"long")," value specified in the given path of the\nJSON element."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<LONG> json:getLong(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input containing long value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to fetch the long value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getLong(json,'$.age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"23")," as there is a matching long at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.age"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getLong(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getLong(json,'$.name')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching long at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name"),"."),(0,r.kt)("h2",{id:"getobject"},"getObject"),(0,r.kt)("p",null,"Function retrieves the object specified in the given path of the JSON\nelement."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> json:getObject(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input containing the object."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to fetch the object."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getObject(json,'$.address')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format\n",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"{'city' : 'NY', 'country' : 'USA'}")," as there is a\nmatching object at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.address"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getObject(json,'$.age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"23")," as there is a matching object at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.age"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getObject(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("h2",{id:"getstring"},"getString"),(0,r.kt)("p",null,"Function retrieves value specified in the given path of the JSON element\nas a string."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<STRING> json:getString(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input containing value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to fetch the value."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getString(json,'$.name')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"John")," as there is a matching string at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name"),"."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getString(json,'$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"null")," as there are no matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getString(json,'$.age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"23")," as a string as there is a matching element at\n",(0,r.kt)("inlineCode",{parentName:"p"},"$.age"),"."),(0,r.kt)("p",null,"EXAMPLE 4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:getString(json,'$.address')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format\n",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'address' : {'city' : 'NY', 'country' : 'USA'}}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"{'city' : 'NY', 'country' : 'USA'}")," as a string as\nthere is a matching element at ",(0,r.kt)("inlineCode",{parentName:"p"},"$.address"),"."),(0,r.kt)("h2",{id:"isexists"},"isExists"),(0,r.kt)("p",null,"Function checks whether there is a JSON element present in the given\npath or not."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<BOOL> json:isExists(<STRING|OBJECT> json, <STRING> path)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON input that needs to be searched for an elements."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path to check for the element."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:isExists(json, '$.name')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," as there is an element in the given path."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:isExists(json, '$.salary')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'age' : 23}"),", the\nfunction returns ",(0,r.kt)("inlineCode",{parentName:"p"},"false")," as there is no element in the given path."),(0,r.kt)("h2",{id:"setelement"},"setElement"),(0,r.kt)("p",null,"Function sets JSON element into a given JSON at the specific path."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> json:setElement(<STRING|OBJECT> json, <STRING> path, <STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT> json.element)\n<OBJECT> json:setElement(<STRING|OBJECT> json, <STRING> path, <STRING|BOOL|DOUBLE|FLOAT|INT|LONG|OBJECT> json.element, <STRING> key)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON to which a JSON element needs to be added/replaced."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON path where the JSON element should be added/replaced."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json.element"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element being added."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING BOOL DOUBLE FLOAT INT LONG OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"key"),(0,r.kt)("td",{parentName:"tr",align:null},"The key to be used to refer the newly added element in the input JSON."),(0,r.kt)("td",{parentName:"tr",align:null},"Assumes the element is added to a JSON array, or the element selected by the JSON path will be updated."),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$', \"{'country' : 'USA'}\", 'address')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),",the\nfunction updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'address' : {'country' : 'USA'}}"),"\nby adding ",(0,r.kt)("inlineCode",{parentName:"p"},"address")," element and returns the updated JSON."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$', 40, 'age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),",the\nfunction updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'age' : 40}")," by adding ",(0,r.kt)("inlineCode",{parentName:"p"},"age"),"\nelement and returns the updated JSON."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$', 45, 'age')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format\n",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'age' : 40}"),", the function updates\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true, 'age' : 45}")," by\nreplacing ",(0,r.kt)("inlineCode",{parentName:"p"},"age")," element and returns the updated JSON."),(0,r.kt)("p",null,"EXAMPLE 4"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$.items', 'book')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format\n",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'Stationary', 'items' : ['pen', 'pencil']}"),", the function\nupdates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as\n",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'items' : ['pen', 'pencil', 'book']}")," by adding\n",(0,r.kt)("inlineCode",{parentName:"p"},"book")," in the items array and returns the updated JSON."),(0,r.kt)("p",null,"EXAMPLE 5"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$.item', 'book')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'Stationary', 'item' : 'pen'}"),",\nthe function updates the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," as ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'item' : 'book'}"),"\nby replacing ",(0,r.kt)("inlineCode",{parentName:"p"},"item")," element and returns the updated JSON."),(0,r.kt)("p",null,"EXAMPLE 6"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:setElement(json, '$.address', 'city', 'SF')\n")),(0,r.kt)("p",null,"If the ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is the format ",(0,r.kt)("inlineCode",{parentName:"p"},"{'name' : 'John', 'married' : true}"),",the\nfunction will not update, but returns the original JSON as there are no\nvalid path for ",(0,r.kt)("inlineCode",{parentName:"p"},"$.address"),"."),(0,r.kt)("h2",{id:"toobject"},"toObject"),(0,r.kt)("p",null,"Function generate JSON object from the given JSON string."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<OBJECT> json:toObject(<STRING> json)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"A valid JSON string that needs to be converted to a JSON object."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:toJson(json)\n")),(0,r.kt)("p",null,"This returns the JSON object corresponding to the given JSON string."),(0,r.kt)("h2",{id:"tostring"},"toString"),(0,r.kt)("p",null,"Function generates a JSON string corresponding to a given JSON object."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"<STRING> json:toString(<OBJECT> json)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"A valid JSON object to generates a JSON string."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:toString(json)\n")),(0,r.kt)("p",null,"This returns the JSON string corresponding to a given JSON object."),(0,r.kt)("h2",{id:"tokenize"},"tokenize"),(0,r.kt)("p",null,"Stream processor tokenizes the given JSON into to multiple JSON string\nelements and sends them as separate events."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:tokenize(<STRING|OBJECT> json, <STRING> path)\njson:tokenize(<STRING|OBJECT> json, <STRING> path, <BOOL> fail.on.missing.attribute)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The input JSON that needs to be tokenized."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The path of the set of elements that will be tokenized."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,r.kt)("td",{parentName:"tr",align:null},"If there are no element on the given path, when set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," the system will drop the event, and when set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," the system will pass ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," value to the jsonElement output attribute."),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"Extra Return Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Types"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonElement"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element retrieved based on the given path will be returned as a JSON string. If the ",(0,r.kt)("inlineCode",{parentName:"td"},"path")," selects a JSON array then the system returns each element in the array as a JSON string via a separate events."),(0,r.kt)("td",{parentName:"tr",align:null},"STRING")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement\nfrom InputStream#json:tokenizeAsObject(json, path);\n")),(0,r.kt)("p",null,"If the input ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is\n",(0,r.kt)("inlineCode",{parentName:"p"},"{name:'John', enrolledSubjects:['Mathematics', 'Physics']}"),", and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.enrolledSubjects")," then for both the elements in\nthe selected JSON array, it generates it generates events as\n",(0,r.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Mathematics')"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Physics')"),". For the same input JSON, if the\n",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name")," then it will only produce one event\n",(0,r.kt)("inlineCode",{parentName:"p"},"('$.name', 'John')")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," provided a single JSON element."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement\nfrom InputStream#json:tokenizeAsObject(json, path, true);\n")),(0,r.kt)("p",null,"If the input ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"{name:'John', age:25}"),",and the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is\npassed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary")," then the system will produce ",(0,r.kt)("inlineCode",{parentName:"p"},"('$.salary', null)"),",\nas the ",(0,r.kt)("inlineCode",{parentName:"p"},"fail.on.missing.attribute")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and there are no matching\nelement for ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."),(0,r.kt)("h2",{id:"tokenizeasobject"},"tokenizeAsObject"),(0,r.kt)("p",null,"Stream processor tokenizes the given JSON into to multiple JSON object\nelements and sends them as separate events."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"json:tokenizeAsObject(<STRING|OBJECT> json, <STRING> path)\njson:tokenizeAsObject(<STRING|OBJECT> json, <STRING> path, <BOOL> fail.on.missing.attribute)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"json"),(0,r.kt)("td",{parentName:"tr",align:null},"The input JSON that needs to be tokenized."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING OBJECT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"path"),(0,r.kt)("td",{parentName:"tr",align:null},"The path of the set of elements that will be tokenized."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"fail.on.missing.attribute"),(0,r.kt)("td",{parentName:"tr",align:null},"If there are no element on the given path, when set to ",(0,r.kt)("inlineCode",{parentName:"td"},"true")," the system will drop the event, and when set to ",(0,r.kt)("inlineCode",{parentName:"td"},"false")," the system will pass ",(0,r.kt)("inlineCode",{parentName:"td"},"null")," value to the jsonElement output attribute."),(0,r.kt)("td",{parentName:"tr",align:null},"true"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"Extra Return Attributes"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Types"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"jsonElement"),(0,r.kt)("td",{parentName:"tr",align:null},"The JSON element retrieved based on the given path will be returned as a JSON object. If the ",(0,r.kt)("inlineCode",{parentName:"td"},"path")," selects a JSON array then the system returns each element in the array as a JSON object via a separate events."),(0,r.kt)("td",{parentName:"tr",align:null},"OBJECT")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement    \nfrom InputStream#json:tokenizeAsObject(json, path);\n")),(0,r.kt)("p",null,"If the input ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is\n",(0,r.kt)("inlineCode",{parentName:"p"},"{name:'John', enrolledSubjects:['Mathematics', 'Physics']}"),", and the\n",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.enrolledSubjects")," then for both the elements in\nthe selected JSON array, it generates it generates events as\n",(0,r.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Mathematics')"),", and\n",(0,r.kt)("inlineCode",{parentName:"p"},"('$.enrolledSubjects', 'Physics')"),". For the same input JSON, if the\n",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.name")," then it will only produce one event\n",(0,r.kt)("inlineCode",{parentName:"p"},"('$.name', 'John')")," as the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," provided a single JSON element."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM InputStream (json string, path string);\n\n@info(name = 'query1')\ninsert into OutputStream\nselect path, jsonElement    \nfrom InputStream#json:tokenizeAsObject(json, path, true);\n")),(0,r.kt)("p",null,"If the input ",(0,r.kt)("inlineCode",{parentName:"p"},"json")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"{name:'John', age:25}"),",and the ",(0,r.kt)("inlineCode",{parentName:"p"},"path")," is\npassed as ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary")," then the system will produce ",(0,r.kt)("inlineCode",{parentName:"p"},"('$.salary', null)"),",\nas the ",(0,r.kt)("inlineCode",{parentName:"p"},"fail.on.missing.attribute")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"true")," and there are no matching\nelement for ",(0,r.kt)("inlineCode",{parentName:"p"},"$.salary"),"."))}N.isMDXComponent=!0}}]);