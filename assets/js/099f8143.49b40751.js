"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[717],{3905:function(e,t,n){n.d(t,{Zo:function(){return p},kt:function(){return d}});var a=n(67294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function u(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),o=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},p=function(e){var t=o(e.components);return a.createElement(s.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=u(e,["components","mdxType","originalType","parentName"]),h=o(n),d=i,N=h["".concat(s,".").concat(d)]||h[d]||m[d]||r;return n?a.createElement(N,l(l({ref:t},p),{},{components:n})):a.createElement(N,l({ref:t},p))}));function d(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,l=new Array(r);l[0]=h;var u={};for(var s in t)hasOwnProperty.call(t,s)&&(u[s]=t[s]);u.originalType=e,u.mdxType="string"==typeof e?e:i,l[1]=u;for(var o=2;o<r;o++)l[o]=n[o];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},46724:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return u},metadata:function(){return o},toc:function(){return m}});var a=n(87462),i=n(63366),r=(n(67294),n(3905)),l=["components"],u={sidebar_position:9},s="Unique",o={unversionedId:"cep/reference/extensions/execution/unique",id:"cep/reference/extensions/execution/unique",title:"Unique",description:"This extension retains and processes unique events based on the given parameters.",source:"@site/docs/cep/reference/extensions/execution/unique.md",sourceDirName:"cep/reference/extensions/execution",slug:"/cep/reference/extensions/execution/unique",permalink:"/docs/cep/reference/extensions/execution/unique",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/extensions/execution/unique.md",tags:[],version:"current",sidebarPosition:9,frontMatter:{sidebar_position:9},sidebar:"tutorialSidebar",previous:{title:"Time",permalink:"/docs/cep/reference/extensions/execution/time"},next:{title:"Streaming ML",permalink:"/docs/cep/reference/extensions/execution/streamingml"}},p={},m=[{value:"Features",id:"features",level:2},{value:"deduplicate",id:"deduplicate",level:2},{value:"ever",id:"ever",level:2},{value:"externalTimeBatch",id:"externaltimebatch",level:2},{value:"first",id:"first",level:2},{value:"firstLengthBatch",id:"firstlengthbatch",level:2},{value:"firstTimeBatch",id:"firsttimebatch",level:2},{value:"length",id:"length",level:2},{value:"lengthBatch",id:"lengthbatch",level:2},{value:"time",id:"time",level:2},{value:"timeBatch",id:"timebatch",level:2},{value:"timeLengthBatch",id:"timelengthbatch",level:2}],h={toc:m};function d(e){var t=e.components,n=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,a.Z)({},h,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"unique"},"Unique"),(0,r.kt)("p",null,"This extension retains and processes unique events based on the given parameters."),(0,r.kt)("h2",{id:"features"},"Features"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#deduplicate"},"deduplicate (StreamProcessor)"))),(0,r.kt)("p",{parentName:"li"},"  Removes duplicate events based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"unique.key")," parameter that\narrive within the ",(0,r.kt)("inlineCode",{parentName:"p"},"time.interval")," gap from one another.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#ever"},"ever (Window)"))),(0,r.kt)("p",{parentName:"li"},"  Window that retains the latest events based on a given unique keys.\nWhen a new event arrives with the same key it replaces the one that\nexist in the window. ",(0,r.kt)("strong",{parentName:"p"},"This function is not recommended to be used\nwhen the maximum number of unique attributes are undefined, as there\nis a risk of system going out to memory"),".")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#externaltimebatch"},"externalTimeBatch (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a batch (tumbling) time window that is determined based on\nan external time, i.e., time stamps that are specified via an\nattribute in the events. It holds the latest unique events that\narrived during the last window time period. The unique events are\ndetermined based on the value for a specified unique key parameter.\nWhen a new event arrives within the time window with a value for the\nunique key parameter that is the same as that of an existing event\nin the window, the existing event expires and it is replaced by the\nnew event.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#first"},"first (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a window that holds only the first set of unique events\naccording to the unique key parameter. When a new event arrives with\na key that is already in the window, that event is not processed by\nthe window.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#firstlengthbatch"},"firstLengthBatch (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a batch (tumbling) window that holds a specific number of\nunique events (depending on which events arrive first). The unique\nevents are selected based on a specific parameter that is considered\nas the unique key. When a new event arrives with a value for the\nunique key parameter that matches the same of an existing event in\nthe window, that event is not processed by the window.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#firsttimebatch"},"firstTimeBatch (Window)"))),(0,r.kt)("p",{parentName:"li"},"  A batch-time or tumbling window that holds the unique events\naccording to the unique key parameters that have arrived within the\ntime period of that window and gets updated for each such time\nwindow. When a new event arrives with a key which is already in the\nwindow, that event is not processed by the window.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#length"},"length (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a sliding length window that holds the events of the latest\nwindow length with the unique key and gets updated for the expiry\nand arrival of each event. When a new event arrives with the key\nthat is already there in the window, then the previous event expires\nand new event is kept within the window.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#lengthbatch"},"lengthBatch (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a batch (tumbling) window that holds a specified number of\nlatest unique events. The unique events are determined based on the\nvalue for a specified unique key parameter. The window is updated\nfor every window length, i.e., for the last set of events of the\nspecified number in a tumbling manner. When a new event arrives\nwithin the window length having the same value for the unique key\nparameter as an existing event in the window, the previous event is\nreplaced by the new event.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#time"},"time (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a sliding time window that holds the latest unique events\nthat arrived during the previous time window. The unique events are\ndetermined based on the value for a specified unique key parameter.\nThe window is updated with the arrival and expiry of each event.\nWhen a new event that arrives within a window time period has the\nsame value for the unique key parameter as an existing event in the\nwindow, the previous event is replaced by the new event.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#timebatch"},"timeBatch (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a batch (tumbling) time window that is updated with the\nlatest events based on a unique key parameter. If a new event that\narrives within the time period of a windowhas a value for the key\nparameter which matches that of an existing event, the existing\nevent expires and it is replaced by the latest event.")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"#timelengthbatch"},"timeLengthBatch (Window)"))),(0,r.kt)("p",{parentName:"li"},"  This is a batch or tumbling time length window that is updated with\nthe latest events based on a unique key parameter. The window\ntumbles upon the elapse of the time window, or when a number of\nunique events have arrived. If a new event that arrives within the\nperiod of the window has a value for the key parameter which matches\nthe value of an existing event, the existing event expires and it is\nreplaced by the new event."))),(0,r.kt)("h2",{id:"deduplicate"},"deduplicate"),(0,r.kt)("p",null,"Removes duplicate events based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"unique.key")," parameter that arrive\nwithin the ",(0,r.kt)("inlineCode",{parentName:"p"},"time.interval")," gap from one another."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:deduplicate(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> time.interval)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"Parameter to uniquely identify events."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"time.interval"),(0,r.kt)("td",{parentName:"tr",align:null},"The sliding time period within which the duplicate events are dropped."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM TemperatureStream (sensorId string, temperature double);\n\ninsert into UniqueTemperatureStream\nselect *\nfrom TemperatureStream#unique:deduplicate(sensorId, 30 sec);\n")),(0,r.kt)("p",null,"Query that removes duplicate events of ",(0,r.kt)("inlineCode",{parentName:"p"},"TemperatureStream")," stream based\non ",(0,r.kt)("inlineCode",{parentName:"p"},"sensorId")," attribute when they arrive within 30 seconds."),(0,r.kt)("h2",{id:"ever"},"ever"),(0,r.kt)("p",null,"Window that retains the latest events based on a given unique keys. When\na new event arrives with the same key it replaces the one that exist in\nthe window. ",(0,r.kt)("strong",{parentName:"p"},"This function is not recommended to be used when the\nmaximum number of unique attributes are undefined, as there is a risk of\nsystem going out to memory"),"."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:ever(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key)\nunique:ever(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG|FLOAT|BOOL|DOUBLE|STRING> ...)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute used to checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM LoginEvents (timestamp long, ip string);\n\ninsert events into UniqueIps\nselect count(ip) as ipCount\nfrom LoginEvents#window.unique:ever(ip);\n")),(0,r.kt)("p",null,"Query collects all unique events based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"ip")," attribute by\nretaining the latest unique events from the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoginEvents")," stream. Then\nthe query counts the unique ",(0,r.kt)("inlineCode",{parentName:"p"},"ip"),"s arrived so far and outputs the\n",(0,r.kt)("inlineCode",{parentName:"p"},"ipCount")," via the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniqueIps")," stream."),(0,r.kt)("p",null,"EXAMPLE 2"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM DriverChangeStream (trainID string, driver string);\n\ninsert expired events into PreviousDriverChangeStream\nselect trainID, driver\nfrom DriverChangeStream#window.unique:ever(trainID);\n")),(0,r.kt)("p",null,"Query collects all unique events based on the ",(0,r.kt)("inlineCode",{parentName:"p"},"trainID")," attribute by\nretaining the latest unique events from the ",(0,r.kt)("inlineCode",{parentName:"p"},"DriverChangeStream")," stream.\nThe query outputs the previous unique event stored in the window as the\nexpired events are emitted via ",(0,r.kt)("inlineCode",{parentName:"p"},"PreviousDriverChangeStream")," stream."),(0,r.kt)("p",null,"EXAMPLE 3"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM StockStream (symbol string, price float);\nCREATE STREAM PriceRequestStream(symbol string);\n\ninsert events into PriceResponseStream\nselect s.symbol as symbol, s.price as price\nfrom StockStream#window.unique:ever(symbol) as s join PriceRequestStream as p\non s.symbol == p.symbol;\n")),(0,r.kt)("p",null,"Query stores the last unique event for each ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," attribute of\n",(0,r.kt)("inlineCode",{parentName:"p"},"StockStream")," stream, and joins them with events arriving on the\n",(0,r.kt)("inlineCode",{parentName:"p"},"PriceRequestStream")," for equal ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," attributes to fetch the latest\n",(0,r.kt)("inlineCode",{parentName:"p"},"price")," for each requested ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," and output via ",(0,r.kt)("inlineCode",{parentName:"p"},"PriceResponseStream"),"\nstream."),(0,r.kt)("h2",{id:"externaltimebatch"},"externalTimeBatch"),(0,r.kt)("p",null,"This is a batch (tumbling) time window that is determined based on an\nexternal time, i.e., time stamps that are specified via an attribute in\nthe events. It holds the latest unique events that arrived during the\nlast window time period. The unique events are determined based on the\nvalue for a specified unique key parameter. When a new event arrives\nwithin the time window with a value for the unique key parameter that is\nthe same as that of an existing event in the window, the existing event\nexpires and it is replaced by the new event."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time)\nunique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time, <INT> start.time)\nunique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time, <INT> start.time, <INT|LONG> time.out)\nunique:externalTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <LONG> time.stamp, <INT|LONG> window.time, <INT> start.time, <INT|LONG> time.out, <BOOL> replace.time.stamp.with.batch.end.time)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"time.stamp"),(0,r.kt)("td",{parentName:"tr",align:null},"The time which the window determines as the current time and acts upon. The value of this parameter should be monotonically increasing."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.time"),(0,r.kt)("td",{parentName:"tr",align:null},"The sliding time period for which the window should hold events."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"start.time"),(0,r.kt)("td",{parentName:"tr",align:null},"This specifies an offset in milliseconds in order to start the window at a time different to the standard time."),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp of first event"),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"time.out"),(0,r.kt)("td",{parentName:"tr",align:null},"Time to wait for arrival of a new event, before flushing and returning the output for events belonging to a specific batch."),(0,r.kt)("td",{parentName:"tr",align:null},"The system waits till an event from the next batch arrives to flush the current batch"),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"replace.time.stamp.with.batch.end.time"),(0,r.kt)("td",{parentName:"tr",align:null},"Replaces the ",(0,r.kt)("inlineCode",{parentName:"td"},"timestamp")," value with the corresponding batch end time stamp."),(0,r.kt)("td",{parentName:"tr",align:null},"false"),(0,r.kt)("td",{parentName:"tr",align:null},"BOOL"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM LoginEvents (timestamp long, ip string);\n\ninsert into UniqueIps\nselect timestamp, ip, count() as total\nfrom LoginEvents#window.unique:externalTimeBatch(ip, timestamp, 1 sec, 0, 2 sec);\n")),(0,r.kt)("p",null,"In this query, the window holds the latest unique events that arrive\nfrom the ",(0,r.kt)("inlineCode",{parentName:"p"},"LoginEvent")," stream during each second. The latest events are\ndetermined based on the external time stamp. At a given time, all the\nevents held in the window have unique values for the ",(0,r.kt)("inlineCode",{parentName:"p"},"ip")," and\nmonotonically increasing values for ",(0,r.kt)("inlineCode",{parentName:"p"},"timestamp")," attributes. The events\nin the window are inserted into the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniqueIps")," output stream. The\nsystem waits for 2 seconds for the arrival of a new event before\nflushing the current batch."),(0,r.kt)("h2",{id:"first"},"first"),(0,r.kt)("p",null,"This is a window that holds only the first set of unique events\naccording to the unique key parameter. When a new event arrives with a\nkey that is already in the window, that event is not processed by the\nwindow."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:first(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key)\nunique:first(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG|FLOAT|BOOL|DOUBLE|STRING> ...)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness. If there is more than one parameter to check for uniqueness, it can be specified as an array separated by commas."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM LoginEvents (timeStamp long, ip string);\n\ninsert into UniqueIps\nfrom LoginEvents#window.unique:first(ip);\n")),(0,r.kt)("p",null,"This returns the first set of unique items that arrive from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"LoginEvents")," stream, and returns them to the ",(0,r.kt)("inlineCode",{parentName:"p"},"UniqueIps")," stream.\nThe unique events are only those with a unique value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"ip"),"\nattribute."),(0,r.kt)("h2",{id:"firstlengthbatch"},"firstLengthBatch"),(0,r.kt)("p",null,"This is a batch (tumbling) window that holds a specific number of unique\nevents (depending on which events arrive first). The unique events are\nselected based on a specific parameter that is considered as the unique\nkey. When a new event arrives with a value for the unique key parameter\nthat matches the same of an existing event in the window, that event is\nnot processed by the window."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:firstLengthBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT> window.length)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.length"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of events the window should tumble."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE WINDOW CseEventWindow (symbol string, price float, volume int)\n\ninsert all events into OutputStream\nselect symbol, price, volume\nfrom CseEventStream#window.unique:firstLengthBatch(symbol, 10);\n")),(0,r.kt)("p",null,"The window in this configuration holds the first unique events from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CseEventStream")," stream every second, and outputs them all into the\nthe ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream")," stream. All the events in a window during a given\nsecond should have a unique value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," attribute."),(0,r.kt)("h2",{id:"firsttimebatch"},"firstTimeBatch"),(0,r.kt)("p",null,"A batch-time or tumbling window that holds the unique events according\nto the unique key parameters that have arrived within the time period of\nthat window and gets updated for each such time window. When a new event\narrives with a key which is already in the window, that event is not\nprocessed by the window."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:firstTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> window.time)\nunique:firstTimeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> window.time, <INT|LONG> start.time)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.time"),(0,r.kt)("td",{parentName:"tr",align:null},"The sliding time period for which the window should hold events."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"start.time"),(0,r.kt)("td",{parentName:"tr",align:null},"This specifies an offset in milliseconds in order to start the window at a time different to the standard time."),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp of the first event."),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM CseEventStream (symbol string, price float, volume int)\n\ninsert all events into OutputStream\nselect symbol, price, volume\nfrom CseEventStream#window.unique:firstTimeBatch(symbol,1 sec);\n")),(0,r.kt)("p",null,"This holds the first unique events that arrive from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"cseEventStream")," input stream during each second, based on the\nsymbol,as a batch, and returns all the events to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"."),(0,r.kt)("h2",{id:"length"},"length"),(0,r.kt)("p",null,"This is a sliding length window that holds the events of the latest\nwindow length with the unique key and gets updated for the expiry and\narrival of each event. When a new event arrives with the key that is\nalready there in the window, then the previous event expires and new\nevent is kept within the window."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:length(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT> window.length)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.length"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of events that should be included in a sliding length window."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM CseEventStream (symbol string, price float, volume int)\n\ninsert all events into OutputStream\nselect symbol, price, volume\nfrom CseEventStream#window.unique:length(symbol,10);\n")),(0,r.kt)("p",null,"In this configuration, the window holds the latest 10 unique events. The\nlatest events are selected based on the symbol attribute. If the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CseEventStream")," receives an event for which the value for the symbol\nattribute is the same as that of an existing event in the window, the\nexisting event is replaced by the new event. All the events are returned\nto the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream")," event stream once an event expires or is added\nto the window."),(0,r.kt)("h2",{id:"lengthbatch"},"lengthBatch"),(0,r.kt)("p",null,"This is a batch (tumbling) window that holds a specified number of\nlatest unique events. The unique events are determined based on the\nvalue for a specified unique key parameter. The window is updated for\nevery window length, i.e., for the last set of events of the specified\nnumber in a tumbling manner. When a new event arrives within the window\nlength having the same value for the unique key parameter as an existing\nevent in the window, the previous event is replaced by the new event."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:lengthBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT> window.length)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.length"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of events the window should tumble."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE WINDOW CseEventWindow (symbol string, price float, volume int)\n\ninsert expired events into OutputStream\nselect symbol, price, volume\nfrom CseEventStream#window.unique:lengthBatch(symbol, 10);\n")),(0,r.kt)("p",null,"In this query, the window at any give time holds the last 10 unique\nevents from the ",(0,r.kt)("inlineCode",{parentName:"p"},"CseEventStream")," stream. Each of the 10 events within\nthe window at a given time has a unique value for the symbol attribute.\nIf a new event has the same value for the symbol attribute as an\nexisting event within the window length, the existing event expires and\nit is replaced by the new event. The query returns expired individual\nevents as well as expired batches of events to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream"),"\nstream."),(0,r.kt)("h2",{id:"time"},"time"),(0,r.kt)("p",null,"This is a sliding time window that holds the latest unique events that\narrived during the previous time window. The unique events are\ndetermined based on the value for a specified unique key parameter. The\nwindow is updated with the arrival and expiry of each event. When a new\nevent that arrives within a window time period has the same value for\nthe unique key parameter as an existing event in the window, the\nprevious event is replaced by the new event."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:time(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> window.time)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.time"),(0,r.kt)("td",{parentName:"tr",align:null},"The sliding time period for which the window should hold events."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM CseEventStream (symbol string, price float, volume int)\n\ninsert expired events into OutputStream\nselect symbol, price, volume\nfrom CseEventStream#window.unique:time(symbol, 1 sec);\n")),(0,r.kt)("p",null,"In this query, the window holds the latest unique events that arrived\nwithin the last second from the ",(0,r.kt)("inlineCode",{parentName:"p"},"CseEventStream"),", and returns the\nexpired events to the ",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream")," stream. During any given second,\neach event in the window should have a unique value for the ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol"),"\nattribute. If a new event that arrives within the same second has the\nsame value for the symbol attribute as an existing event in the window,\nthe existing event expires."),(0,r.kt)("h2",{id:"timebatch"},"timeBatch"),(0,r.kt)("p",null,"This is a batch (tumbling) time window that is updated with the latest\nevents based on a unique key parameter. If a new event that arrives\nwithin the time period of a windowhas a value for the key parameter\nwhich matches that of an existing event, the existing event expires and\nit is replaced by the latest event."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:timeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> window.time)\nunique:timeBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> window.time, <INT|LONG> start.time)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.time"),(0,r.kt)("td",{parentName:"tr",align:null},"The tumbling time period for which the window should hold events."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"start.time"),(0,r.kt)("td",{parentName:"tr",align:null},"This specifies an offset in milliseconds in order to start the window at a time different to the standard time."),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp of first event"),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM CseEventStream (symbol string, price float, volume int)\n\ninsert all events into OutputStream\nselect symbol, price, volume\nfrom CseEventStream#window.unique:timeBatch(symbol, 1 sec);\n")),(0,r.kt)("p",null,"This window holds the latest unique events that arrive from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CseEventStream")," at a given time, and returns all the events to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream")," stream. It is updated every second based on the latest\nvalues for the ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," attribute."),(0,r.kt)("h2",{id:"timelengthbatch"},"timeLengthBatch"),(0,r.kt)("p",null,"This is a batch or tumbling time length window that is updated with the\nlatest events based on a unique key parameter. The window tumbles upon\nthe elapse of the time window, or when a number of unique events have\narrived. If a new event that arrives within the period of the window has\na value for the key parameter which matches the value of an existing\nevent, the existing event expires and it is replaced by the new event."),(0,r.kt)("p",null,"Syntax"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"unique:timeLengthBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> window.time, <INT> window.length)\nunique:timeLengthBatch(<INT|LONG|FLOAT|BOOL|DOUBLE|STRING> unique.key, <INT|LONG> window.time, <INT|LONG> start.time, <INT> window.length)\n")),(0,r.kt)("p",null,"QUERY PARAMETERS"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},"Name"),(0,r.kt)("th",{parentName:"tr",align:null},"Description"),(0,r.kt)("th",{parentName:"tr",align:null},"Default Value"),(0,r.kt)("th",{parentName:"tr",align:null},"Possible Data Types"),(0,r.kt)("th",{parentName:"tr",align:null},"Optional"),(0,r.kt)("th",{parentName:"tr",align:null},"Dynamic"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"unique.key"),(0,r.kt)("td",{parentName:"tr",align:null},"The attribute that should be checked for uniqueness."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG FLOAT BOOL DOUBLE STRING"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.time"),(0,r.kt)("td",{parentName:"tr",align:null},"The sliding time period for which the window should hold the events."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"start.time"),(0,r.kt)("td",{parentName:"tr",align:null},"This specifies an offset in milliseconds in order to start the window at a time different to the standard time."),(0,r.kt)("td",{parentName:"tr",align:null},"Timestamp of first event"),(0,r.kt)("td",{parentName:"tr",align:null},"INT LONG"),(0,r.kt)("td",{parentName:"tr",align:null},"Yes"),(0,r.kt)("td",{parentName:"tr",align:null},"No")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"window.length"),(0,r.kt)("td",{parentName:"tr",align:null},"The number of events the window should tumble."),(0,r.kt)("td",{parentName:"tr",align:null}),(0,r.kt)("td",{parentName:"tr",align:null},"INT"),(0,r.kt)("td",{parentName:"tr",align:null},"No"),(0,r.kt)("td",{parentName:"tr",align:null},"No")))),(0,r.kt)("p",null,"EXAMPLE 1"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"CREATE STREAM CseEventStream (symbol string, price float, volume int)\n\ninsert all events into OutputStream\nselect symbol, price, volume\nfrom CseEventStream#window.unique:timeLengthBatch(symbol, 1 sec, 20);\n")),(0,r.kt)("p",null,"This window holds the latest unique events that arrive from the\n",(0,r.kt)("inlineCode",{parentName:"p"},"CseEventStream")," at a given time, and returns all the events to the\n",(0,r.kt)("inlineCode",{parentName:"p"},"OutputStream")," stream. It is updated every second based on the latest\nvalues for the ",(0,r.kt)("inlineCode",{parentName:"p"},"symbol")," attribute."))}d.isMDXComponent=!0}}]);