"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4142],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=l(n),m=r,h=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return n?a.createElement(h,i(i({ref:t},c),{},{components:n})):a.createElement(h,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=d;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},40766:function(e,t,n){n.r(t),n.d(t,{assets:function(){return c},contentTitle:function(){return p},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var a=n(87462),r=n(63366),o=(n(67294),n(3905)),i=["components"],s={sidebar_position:14,title:"UPSERT"},p=void 0,l={unversionedId:"c8ql/operations/upsert",id:"c8ql/operations/upsert",title:"UPSERT",description:"The UPSERT keyword can be used for checking whether certain documents exist, and to update/replace them in case they exist, or create them in case they do not exist. On a single server, upserts are executed transactionally in an all-or-nothing fashion.",source:"@site/docs/c8ql/operations/upsert.md",sourceDirName:"c8ql/operations",slug:"/c8ql/operations/upsert",permalink:"/docs/c8ql/operations/upsert",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/c8ql/operations/upsert.md",tags:[],version:"current",sidebarPosition:14,frontMatter:{sidebar_position:14,title:"UPSERT"},sidebar:"tutorialSidebar",previous:{title:"INSERT",permalink:"/docs/c8ql/operations/insert"},next:{title:"WITH",permalink:"/docs/c8ql/operations/with"}},c={},u=[{value:"Setting query options",id:"setting-query-options",level:2},{value:"Returning documents",id:"returning-documents",level:2}],d={toc:u};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"UPSERT")," keyword can be used for checking whether certain documents exist, and to update/replace them in case they exist, or create them in case they do not exist. On a single server, upserts are executed transactionally in an all-or-nothing fashion. "),(0,o.kt)("p",null,"A query may execute intermediate transaction commits in case the running transaction (C8QL query) hits the specified size thresholds. In this case, the query's operations carried out so far will be committed and not rolled back in case of a later abort/rollback. "),(0,o.kt)("p",null,"For sharded collections, the entire query and/or upsert operation may not be transactional, especially if it involves different shards and/or DB-Servers."),(0,o.kt)("p",null,"Each ",(0,o.kt)("inlineCode",{parentName:"p"},"UPSERT")," operation is restricted to a single collection, and the ",(0,o.kt)("a",{parentName:"p",href:"/docs/c8ql/operations/upsert"},"collection name")," must not be dynamic. Only a single ",(0,o.kt)("inlineCode",{parentName:"p"},"UPSERT")," statement per collection is allowed per C8QL query, and it cannot be followed by read or write operations that access the same collection, by traversal operations, or C8QL functions that can read documents."),(0,o.kt)("p",null,"The syntax for an upsert operation is:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"UPSERT searchExpression INSERT insertExpression UPDATE updateExpression IN collection options\nUPSERT searchExpression INSERT insertExpression REPLACE updateExpression IN collection options\n")),(0,o.kt)("p",null,"When using the ",(0,o.kt)("inlineCode",{parentName:"p"},"UPDATE")," variant of the upsert operation, the found document will be partially updated, meaning only the attributes specified in ",(0,o.kt)("em",{parentName:"p"},"updateExpression")," will be updated or added. When using the ",(0,o.kt)("inlineCode",{parentName:"p"},"REPLACE")," variant of upsert, existing documents will be replaced with the contexts of ",(0,o.kt)("em",{parentName:"p"},"updateExpression"),"."),(0,o.kt)("p",null,"Updating a document will modify the document's revision number with a server-generated value. The system attributes ",(0,o.kt)("em",{parentName:"p"},"_id"),", ",(0,o.kt)("em",{parentName:"p"},"_key")," and ",(0,o.kt)("em",{parentName:"p"},"_rev")," cannot be updated, ",(0,o.kt)("em",{parentName:"p"},"_from")," and ",(0,o.kt)("em",{parentName:"p"},"_to")," can."),(0,o.kt)("p",null,"The ",(0,o.kt)("em",{parentName:"p"},"searchExpression")," contains the document to be looked for. It must be an object literal without dynamic attribute names. In case no such document can be found in ",(0,o.kt)("em",{parentName:"p"},"collection"),", a new document will be inserted into the collection as specified in the ",(0,o.kt)("em",{parentName:"p"},"insertExpression"),". "),(0,o.kt)("p",null,"In case at least one document in ",(0,o.kt)("em",{parentName:"p"},"collection")," matches the ",(0,o.kt)("em",{parentName:"p"},"searchExpression"),", it will be updated using the ",(0,o.kt)("em",{parentName:"p"},"updateExpression"),". When more than one document in the collection matches the ",(0,o.kt)("em",{parentName:"p"},"searchExpression"),", it is undefined which of the matching documents will be updated. It is therefore often sensible to make sure by other means (such as unique indexes, application logic etc.) that at most one document matches ",(0,o.kt)("em",{parentName:"p"},"searchExpression"),"."),(0,o.kt)("p",null,"The following query will look in the ",(0,o.kt)("em",{parentName:"p"},"users")," collection for a document with a specific ",(0,o.kt)("em",{parentName:"p"},"name")," attribute value. If the document exists, its ",(0,o.kt)("em",{parentName:"p"},"logins")," attribute will be increased by one. If it does not exist, a new document will be inserted, consisting of the attributes ",(0,o.kt)("em",{parentName:"p"},"name"),", ",(0,o.kt)("em",{parentName:"p"},"logins"),", and ",(0,o.kt)("em",{parentName:"p"},"dateCreated"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"UPSERT { name: 'superuser' } \nINSERT { name: 'superuser', logins: 1, dateCreated: DATE_NOW() } \nUPDATE { logins: OLD.logins + 1 } IN users\n")),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"In the ",(0,o.kt)("inlineCode",{parentName:"p"},"UPDATE")," case it is possible to refer to the previous version of the document using the ",(0,o.kt)("em",{parentName:"p"},"OLD")," pseudo-value."))),(0,o.kt)("h2",{id:"setting-query-options"},"Setting query options"),(0,o.kt)("p",null,"As in several above examples, the ",(0,o.kt)("em",{parentName:"p"},"ignoreErrors")," option can be used to suppress query errors that may occur when trying to violate unique key constraints."),(0,o.kt)("p",null,"When updating or replacing an attribute with a null value, GDN will not remove the attribute from the document but store a null value for it. To get rid of attributes in an upsert operation, set them to null and provide the ",(0,o.kt)("em",{parentName:"p"},"keepNull")," option."),(0,o.kt)("p",null,"There is also the option ",(0,o.kt)("em",{parentName:"p"},"mergeObjects")," that controls whether object contents will be merged if an object attribute is present in both the ",(0,o.kt)("inlineCode",{parentName:"p"},"UPDATE")," query and in the to-be-updated document."),(0,o.kt)("div",{className:"admonition admonition-note alert alert--secondary"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"}))),"note")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"The default value for ",(0,o.kt)("em",{parentName:"p"},"mergeObjects")," is ",(0,o.kt)("em",{parentName:"p"},"true"),", so there is no need to specify it explicitly."))),(0,o.kt)("p",null,"To make sure data are durable when an update query returns, there is the ",(0,o.kt)("em",{parentName:"p"},"waitForSync")," query option."),(0,o.kt)("p",null,"In order to not accidentially update documents that have been written and updated since you last fetched them you can use the option ",(0,o.kt)("em",{parentName:"p"},"ignoreRevs")," to either let GDN compare the ",(0,o.kt)("inlineCode",{parentName:"p"},"_rev")," value and only succeed if they still match, or let GDN ignore them (default):"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"FOR i IN 1..1000\n  UPSERT { _key: CONCAT('test', i)}\n    INSERT {foobar: false}\n    UPDATE {_rev: \"1287623\", foobar: true }\n  IN users OPTIONS { ignoreRevs: false }\n")),(0,o.kt)("p",null,(0,o.kt)("em",{parentName:"p"},"NOTE"),": You need to add the ",(0,o.kt)("inlineCode",{parentName:"p"},"_rev")," value in the updateExpression, it will not be used within the searchExpression. Even worse, if you use an outdated ",(0,o.kt)("inlineCode",{parentName:"p"},"_rev")," in the searchExpression UPSERT will trigger the INSERT path instead of the UPDATE path, because it has not found a document exactly matching the searchExpression."),(0,o.kt)("p",null,"Different write operations on the same collection do not block each other, as long as there are no ",(0,o.kt)("em",{parentName:"p"},"write-write conficts")," on the same documents. From an application development perspective it can be desired to have exclusive write access on collections, to simplify the development. "),(0,o.kt)("p",null,"Exclusive access can also speed up modification queries, because we avoid conflict checks."),(0,o.kt)("p",null,"Use the ",(0,o.kt)("em",{parentName:"p"},"exclusive")," option to achieve this effect on a per query basis:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"FOR i IN 1..1000\n  UPSERT { _key: CONCAT('test', i) }\n  INSERT { foobar: false }\n  UPDATE { foobar: true }\n  IN users OPTIONS { exclusive: true }\n")),(0,o.kt)("h2",{id:"returning-documents"},"Returning documents"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"UPSERT")," statements can optionally return data. To do so, they need to be followed by a ",(0,o.kt)("inlineCode",{parentName:"p"},"RETURN")," statement (intermediate ",(0,o.kt)("inlineCode",{parentName:"p"},"LET")," statements are allowed, too). These statements can optionally perform calculations and refer to the pseudo-values ",(0,o.kt)("inlineCode",{parentName:"p"},"OLD")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"NEW"),". In case the upsert performed an insert operation, ",(0,o.kt)("inlineCode",{parentName:"p"},"OLD")," will have a value of ",(0,o.kt)("em",{parentName:"p"},"null"),". In case the upsert performed an update or replace operation, ",(0,o.kt)("inlineCode",{parentName:"p"},"OLD")," will contain the previous version of the document, before update/replace."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"NEW")," will always be populated. It will contain the inserted document in case the upsert performed an insert, or the updated/replaced document in case it performed an update/replace."),(0,o.kt)("p",null,"This can also be used to check whether the upsert has performed an insert or an update internally:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-js"},"UPSERT { name: 'superuser' } \nINSERT { name: 'superuser', logins: 1, dateCreated: DATE_NOW() } \nUPDATE { logins: OLD.logins + 1 } IN users\nRETURN { doc: NEW, type: OLD ? 'update' : 'insert' }\n")))}m.isMDXComponent=!0}}]);