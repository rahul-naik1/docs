"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8220],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return m}});var s=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function a(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);n&&(s=s.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,s)}return t}function r(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?a(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function i(e,n){if(null==e)return{};var t,s,o=function(e,n){if(null==e)return{};var t,s,o={},a=Object.keys(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(s=0;s<a.length;s++)t=a[s],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var l=s.createContext({}),c=function(e){var n=s.useContext(l),t=n;return e&&(t="function"==typeof e?e(n):r(r({},n),e)),t},p=function(e){var n=c(e.components);return s.createElement(l.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return s.createElement(s.Fragment,{},n)}},d=s.forwardRef((function(e,n){var t=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),d=c(t),m=o,_=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return t?s.createElement(_,r(r({ref:n},p),{},{components:t})):s.createElement(_,r({ref:n},p))}));function m(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var a=t.length,r=new Array(a);r[0]=d;var i={};for(var l in n)hasOwnProperty.call(n,l)&&(i[l]=n[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,r[1]=i;for(var c=2;c<a;c++)r[c]=t[c];return s.createElement.apply(null,r)}return s.createElement.apply(null,t)}d.displayName="MDXCreateElement"},72360:function(e,n,t){t.d(n,{Z:function(){return r}});var s=t(67294),o=t(86010),a="tabItem_OmH5";function r(e){var n=e.children,t=e.hidden,r=e.className;return s.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,r),hidden:t},n)}},9877:function(e,n,t){t.d(n,{Z:function(){return m}});var s=t(87462),o=t(67294),a=t(72389),r=t(67392),i=t(7094),l=t(12466),c=t(86010),p="tabList_uSqn",u="tabItem_LplD";function d(e){var n,t,a,d=e.lazy,m=e.block,_=e.defaultValue,E=e.values,y=e.groupId,h=e.className,A=o.Children.map(e.children,(function(e){if((0,o.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),f=null!=E?E:A.map((function(e){var n=e.props;return{value:n.value,label:n.label,attributes:n.attributes}})),b=(0,r.l)(f,(function(e,n){return e.value===n.value}));if(b.length>0)throw new Error('Docusaurus error: Duplicate values "'+b.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var N=null===_?_:null!=(n=null!=_?_:null==(t=A.find((function(e){return e.props.default})))?void 0:t.props.value)?n:null==(a=A[0])?void 0:a.props.value;if(null!==N&&!f.some((function(e){return e.value===N})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+N+'" but none of its children has the corresponding value. Available values are: '+f.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,i.U)(),T=g.tabGroupChoices,R=g.setTabGroupChoices,S=(0,o.useState)(N),v=S[0],D=S[1],k=[],w=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=y){var C=T[y];null!=C&&C!==v&&f.some((function(e){return e.value===C}))&&D(C)}var U=function(e){var n=e.currentTarget,t=k.indexOf(n),s=f[t].value;s!==v&&(w(n),D(s),null!=y&&R(y,s))},O=function(e){var n,t=null;switch(e.key){case"ArrowRight":var s=k.indexOf(e.currentTarget)+1;t=k[s]||k[0];break;case"ArrowLeft":var o=k.indexOf(e.currentTarget)-1;t=k[o]||k[k.length-1]}null==(n=t)||n.focus()};return o.createElement("div",{className:(0,c.Z)("tabs-container",p)},o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,c.Z)("tabs",{"tabs--block":m},h)},f.map((function(e){var n=e.value,t=e.label,a=e.attributes;return o.createElement("li",(0,s.Z)({role:"tab",tabIndex:v===n?0:-1,"aria-selected":v===n,key:n,ref:function(e){return k.push(e)},onKeyDown:O,onFocus:U,onClick:U},a,{className:(0,c.Z)("tabs__item",u,null==a?void 0:a.className,{"tabs__item--active":v===n})}),null!=t?t:n)}))),d?(0,o.cloneElement)(A.filter((function(e){return e.props.value===v}))[0],{className:"margin-top--md"}):o.createElement("div",{className:"margin-top--md"},A.map((function(e,n){return(0,o.cloneElement)(e,{key:n,hidden:e.props.value!==v})}))))}function m(e){var n=(0,a.Z)();return o.createElement(d,(0,s.Z)({key:String(n)},e))}},48458:function(e,n,t){t.r(n),t.d(n,{assets:function(){return d},contentTitle:function(){return p},default:function(){return E},frontMatter:function(){return c},metadata:function(){return u},toc:function(){return m}});var s=t(87462),o=t(63366),a=(t(67294),t(3905)),r=t(9877),i=t(72360),l=["components"],c={sidebar_position:7,title:"Using Rest APIs"},p=void 0,u={unversionedId:"collections/documents/tutorials/using_rest_api",id:"collections/documents/tutorials/using_rest_api",title:"Using Rest APIs",description:"Modern applications need to be highly responsive, always online, and able to access data instantly across the globe. At the same time, they need to be deployed on datacenters close to their users. Macrometa global data network (GDN) is a real-time materialized view engine that provides instant data to applications and APIs in a simple interface.",source:"@site/docs/collections/documents/tutorials/using_rest_api.md",sourceDirName:"collections/documents/tutorials",slug:"/collections/documents/tutorials/using_rest_api",permalink:"/docs/collections/documents/tutorials/using_rest_api",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/documents/tutorials/using_rest_api.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{sidebar_position:7,title:"Using Rest APIs"},sidebar:"tutorialSidebar",previous:{title:"Spot Collections",permalink:"/docs/collections/documents/tutorials/using-spotcollections"},next:{title:"Overview",permalink:"/docs/collections/documents/indexing/overview"}},d={},m=[{value:"API Browser",id:"api-browser",level:2},{value:"Working with Documents",id:"working-with-documents",level:2},{value:"Tutorial",id:"tutorial",level:3},{value:"Query using C8QL",id:"query-using-c8ql",level:2},{value:"Tutorial",id:"tutorial-1",level:3},{value:"Publish-Subscribe with Streams",id:"publish-subscribe-with-streams",level:2},{value:"Tutorial",id:"tutorial-2",level:3},{value:"Query as API (RestQL)",id:"query-as-api-restql",level:2},{value:"Tutorial",id:"tutorial-3",level:3},{value:"Working with Graphs",id:"working-with-graphs",level:2},{value:"Tutorial",id:"tutorial-4",level:3},{value:"Stream Processing",id:"stream-processing",level:2}],_={toc:m};function E(e){var n=e.components,c=(0,o.Z)(e,l);return(0,a.kt)("wrapper",(0,s.Z)({},_,c,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Modern applications need to be highly responsive, always online, and able to access data instantly across the globe. At the same time, they need to be deployed on datacenters close to their users. Macrometa global data network (GDN) is a real-time materialized view engine that provides instant data to applications and APIs in a simple interface."),(0,a.kt)("p",null,"If you are new to Macrometa GDN, start by reading the ",(0,a.kt)("a",{parentName:"p",href:"/docs/essentials/overview"},"essentials")," of Macrometa GDN."),(0,a.kt)("p",null,"Prerequisites:"),(0,a.kt)("p",null,"A Macrometa GDN tenant account and credentials."),(0,a.kt)("h2",{id:"api-browser"},"API Browser"),(0,a.kt)("p",null,"Your main tool for using REST APIs is the API reference in the ",(0,a.kt)("a",{parentName:"p",href:"https://gdn.paas.macrometa.io"},"GDN")," web browser interface. Use the built-in API reference to run various calls and view their input and output."),(0,a.kt)("p",null,(0,a.kt)("img",{alt:"GDN API Browser",src:t(25369).Z,width:"2474",height:"1896"})),(0,a.kt)("h2",{id:"working-with-documents"},"Working with Documents"),(0,a.kt)("p",null,"A ",(0,a.kt)("em",{parentName:"p"},"document")," is a JSON-serializable dictionary object with the following properties:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_key")," identifies a document within a collection."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_id")," identifies a document across all collections in a fabric with the following format: ",(0,a.kt)("inlineCode",{parentName:"li"},"{collection name}/{document key}"),". This is also known as a ",(0,a.kt)("em",{parentName:"li"},"handle"),"."),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_rev")," indicates the latest revision of a document. GDN supports MVCC (Multiple Version Concurrency Control) and stores each document in multiple revisions. This field is automatically populated, but you can use it to validate a document against its current revision.")),(0,a.kt)("p",null,"For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n"_id": "students/bruce",\n"_key": "bruce",\n"_rev": "_Wm3dzEi--_",\n"first_name": "Bruce",\n"last_name": "Wayne",\n"address": {\n  "street": "1007 Mountain Dr.",\n  "city": "Gotham",\n  "state": "NJ"\n},\n"is_rich": True,\n"friends": ["robin", "gordon"]\n}\n')),(0,a.kt)("h3",{id:"tutorial"},"Tutorial"),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"  import requests\n  import json\n\n  # Set constants\n\n  FEDERATION = \"api-gdn.paas.macrometa.io\"\n  FED_URL = \"https://{}\".format(FEDERATION)\n  EMAIL = \"nemo@nautilus.com\"\n  PASSWORD = \"xxxxxx\"\n  COLLECTION_NAME = \"testcollection\"\n  AUTH_TOKEN = \"bearer \"\n\n  # Create HTTPS session\n\n  url = \"{}/_open/auth\".format(FED_URL)\n  payload = {\n      'email':EMAIL,\n      'password':PASSWORD\n      }\n  headers = {\n      'content-type': 'application/json'\n      }\n\n  response = requests.post(url, data = json.dumps(payload), headers = headers)\n\n  if response.status_code == 200:\n      resp_body = json.loads(response.text)\n      AUTH_TOKEN += resp_body[\"jwt\"]\n      TENANT = resp_body[\"tenant\"]\n  else:\n      raise Exception(\"Error while getting auth token. Code:{}, Reason:{}\".format(response.status_code,response.reason))\n\n\n  session = requests.session()\n  session.headers.update({\"content-type\": 'application/json'})\n  session.headers.update({\"authorization\": AUTH_TOKEN})\n\n  # Get list of all regions\n\n  url = FED_URL + \"/_api/datacenter/all\"\n  dcl_resp = session.get(url)\n  dcl_list = json.loads(dcl_resp.text)\n  regions = []\n  for dcl in dcl_list:\n      dcl_url = dcl['tags']['url']\n      regions.append(dcl_url)\n  print(\"\\nList of regions: \",regions)\n\n  # Create a document collection\n# Note: Create a test collection. Set \"type\" to 2 for documents or 3 for edges\n\n  url = FED_URL + \"/_api/collection\"\n  payload = {\n      \"name\": COLLECTION_NAME,\n      \"type\": 2\n  }\n  resp = session.post(url, data = json.dumps(payload))\n  resp = json.loads(resp.text)\n  if 'error' in resp and resp['error']:\n      print(\"ERROR: \" + resp[\"errorMessage\"])\n  else:\n      print(\"\\nCollection created: \", resp['name'])\n\n\n  # Insert a document into a collection\n\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME\n  payload = {'GPA': 3.5, 'first': 'Lola', 'last': 'Martin', '_key': 'Lola'}\n  resp = session.post(url, data = json.dumps(payload))\n  print(\"\\nDocument inserted: \", resp.text)\n\n  # Data can either be a single document or a list of documents\n  # Insert multiple documents\n\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME\n  data = [\n      {'GPA': 3.2, 'first': 'Abby', 'last': 'Page', '_key': 'Abby'},\n      {'GPA': 3.6, 'first': 'John', 'last': 'Kim', '_key': 'John'},\n      {'GPA': 4.0, 'first': 'Emma', 'last': 'Park', '_key': 'Emma'}\n  ]\n  resp = session.post(url, data = json.dumps(data))\n  print(\"\\nMultiple documents inserted: \", resp.text)\n\n  # Read a document with its ID\n\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME + \"/Lola\"\n  resp = session.get(url)\n  print(\"\\nDocument with ID Lola is: \",resp.text)\n\n  # Read multiple documents\n\n  url = FED_URL + \"/_api/simple/lookup-by-keys\"\n  payload = {\"collection\": COLLECTION_NAME,\n              \"keys\": [\"Abby\", \"John\", \"Emma\"] }\n  resp = session.put(url, data = json.dumps(payload))\n  resp = json.loads(resp.text)\n  print(\"\\nDocuments: \", resp[\"documents\"])\n\n  # Update a single document with its ID\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME + \"/John\"\n  payload =     {'GPA': 3.6, 'first': 'John', 'last': 'Andrews', '_key': 'John'},\n\n  resp = session.patch(url, data = json.dumps(payload))\n  print(\"\\nUpdated document with ID Lola: \",resp.text)\n\n  # Update  documents\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME\n  payload = [\n      {'GPA': 4.6, 'first': 'Lola', 'last': 'Martin', '_key': 'Lola'},\n      {'GPA': 3.2, 'first': 'Abby', 'last': 'Stutguard', '_key': 'Abby'}\n  ]\n  resp = session.patch(url, data = json.dumps(payload))\n  print(\"\\nUpdated documents: \", resp.text)\n\n  # Remove single document with its ID\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME + \"/John\"\n  resp = session.delete(url)\n  print(\"\\nDeleted document with ID John: \", resp.text)\n\n\n  # Remove a multiple document\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME\n  payload = [\n      {'GPA': 4.6, 'first': 'Lola', 'last': 'Martin', '_key': 'Lola'},\n      {'GPA': 3.2, 'first': 'Abby', 'last': 'Stutguard', '_key': 'Abby'}\n  ]\n  resp = session.delete(url, data = json.dumps(payload))\n  print(\"\\nDeleted Documents: \", resp.text)\n"))),(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  class APIRequest {\n    _headers = {\n      Accept: "application/json",\n      "Content-Type": "application/json",\n    };\n\n    constructor(url) {\n      this._url = url;\n    }\n\n    login(email, password) {\n      const endpoint = "/_open/auth";\n\n      const self = this;\n\n      return new Promise(function (resolve, reject) {\n        self\n          .req(endpoint, {\n            body: { email, password },\n            method: "POST",\n          })\n          .then(({ jwt, ...data }) => {\n            self._headers.authorization = `bearer ${jwt}`;\n            resolve(data);\n          })\n          .catch(reject);\n      });\n    }\n\n    _handleResponse(response, resolve, reject) {\n      if (response.ok) {\n        resolve(response.json());\n      } else {\n        reject(response);\n      }\n    }\n\n    req(endpoint, { body, ...options } = {}) {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        fetch(self._url + endpoint, {\n          headers: self._headers,\n          body: body ? JSON.stringify(body) : undefined,\n          ...options,\n        }).then((response) => self._handleResponse(response, resolve, reject));\n      });\n    }\n  }\n  const EMAIL = "nemo@nautilus.com";\n  const PASSWORD = "xxxxxx";\n  const FEDERATION_URL = "https://api-gdn.paas.macrometa.io";\n\n  const COLLECTION_NAME = "api_tutorial_documents";\n\n  const run = async function () {\n    try {\n      const connection = new APIRequest(FEDERATION_URL);\n\n      /* -------------------- Log in (nemo@nautilus.com/xxxxxx) -------------------- */\n\n      await connection.login(EMAIL, PASSWORD);\n\n      console.log("Logged in successfully using", EMAIL);\n\n      /* -------------------------- Create document collection ------------------------- */\n\n      const collection = await connection.req(\n        "/_fabric/_system/_api/collection",\n        {\n          body: { name: COLLECTION_NAME },\n          method: "POST",\n        }\n      );\n\n      console.log("COLLECTION CREATED SUCCESSFULLY", collection);\n\n      /* ---------------------------- Insert documents ---------------------------- */\n\n      const document = await connection.req(\n        `/_fabric/_system/_api/document/${COLLECTION_NAME}`,\n        {\n          body: { new: true },\n          method: "POST",\n        }\n      );\n\n      console.log("DOCUMENT CREATED SUCCESSFULLY", document);\n\n      /* ----------------------------- Read documents ----------------------------- */\n\n      const readDocument = await connection.req(\n        `/_fabric/_system/_api/document/${document._id}`\n      );\n\n      console.log("DOCUMENT READ SUCCESSFULLY", readDocument);\n\n      /* ---------------------------- Update documents ---------------------------- */\n\n      const updateDocument = await connection.req(\n        `/_fabric/_system/_api/document/${document._id}`,\n        {\n          method: "PATCH",\n          body: { new: false },\n        }\n      );\n\n      console.log("DOCUMENT UPDATED SUCCESSFULLY", updateDocument);\n\n      /* ----------------------------- Read documents ----------------------------- */\n\n      const updatedReadDocument = await connection.req(\n        `/_fabric/_system/_api/document/${document._id}`\n      );\n\n      console.log("DOCUMENT UPDATED READ SUCCESSFULLY", updatedReadDocument);\n\n      /* ------------------------------- Delete documents ------------------------------ */\n      const deletedDocument = await connection.req(\n        `/_fabric/_system/_api/document/${document._id}`,\n        {\n          method: "DELETE",\n        }\n      );\n      console.log("DOCUMENT DELETED SUCCESSFULLY", deletedDocument);\n\n      /* --------------------------- Delete collection. --------------------------- */\n      const deletedCollection = await connection.req(\n        `/_fabric/_system/_api/collection/${COLLECTION_NAME}`,\n        { method: "DELETE" }\n      );\n\n      console.log("DOCUMENT DELETED SUCCESSFULLY", deletedCollection);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  run();\n')))),(0,a.kt)("h2",{id:"query-using-c8ql"},"Query using C8QL"),(0,a.kt)("p",null,"You can use C8QL to run CRUD Operations."),(0,a.kt)("h3",{id:"tutorial-1"},"Tutorial"),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'  #Using C8QL\n\n  import requests\n  import json\n\n  FEDERATION = "api-gdn.paas.macrometa.io"\n  FED_URL = "https://{}".format(FEDERATION)\n  EMAIL = "nemo@nautilus.com"\n  PASSWORD = "xxxxxx"\n  AUTH_TOKEN = "bearer "\n\n  # Create HTTPS session\n\n  url = "{}/_open/auth".format(FED_URL)\n  payload = {\n      \'email\':EMAIL,\n      \'password\':PASSWORD\n      }\n  headers = {\n      \'content-type\': \'application/json\'\n      }\n\n  response = requests.post(url, data = json.dumps(payload), headers = headers)\n\n  if response.status_code == 200:\n      resp_body = json.loads(response.text)\n      AUTH_TOKEN += resp_body["jwt"]\n      TENANT = resp_body["tenant"]\n  else:\n      raise Exception("Error while getting auth token. Code:{}, Reason:{}".format(response.status_code,response.reason))\n\n\n  session = requests.session()\n  session.headers.update({"content-type": \'application/json\'})\n  session.headers.update({"authorization": AUTH_TOKEN})\n\n\n\n  # Insert documents to the collection\n  resp = session.post(url, json={\n      "query": "INSERT{\'name\' : \'Julie\', \'company\' : \'ABC\', \'_key\' : \'Julie\'}" \\\n              "INTO testcollection"\n  })\n\n  # Read from the collection\n  resp = session.post(url, json={\n      "query": "FOR doc IN testcollection RETURN doc"\n  })\n\n  # Update documents in the collection\n  resp = session.post(url, json={\n      "query": "FOR c IN testcollection UPDATE {\'company\':\'XYZ\'} IN testcollection"\n  })\n\n  # Delete documents in the collection\n  resp = session.post(url, json={\n      "query": "FOR c IN testcollection REMOVE c IN testcollection"\n  })\n')))),(0,a.kt)("h2",{id:"publish-subscribe-with-streams"},"Publish-Subscribe with Streams"),(0,a.kt)("p",null,"GDN streams are a high-performance solution for server-to-server messaging. Streams are built on the ",(0,a.kt)("em",{parentName:"p"},"publish-subscribe")," (pub-sub) pattern in which producers publish messages to streams, and consumers can subscribe to those streams, process incoming messages, and send an acknowledgment to the producer when finished."),(0,a.kt)("p",null,"Streams provide:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Seamless geo-replication of messages across regions."),(0,a.kt)("li",{parentName:"ul"},"Low publish and end-to-end latency."),(0,a.kt)("li",{parentName:"ul"},"Seamless scalability to over a million topics."),(0,a.kt)("li",{parentName:"ul"},"Multiple subscription modes (",(0,a.kt)("inlineCode",{parentName:"li"},"exclusive"),", ",(0,a.kt)("inlineCode",{parentName:"li"},"shared"),", and ",(0,a.kt)("inlineCode",{parentName:"li"},"failover"),") for streams."),(0,a.kt)("li",{parentName:"ul"},"Guaranteed message delivery with persistent message storage.")),(0,a.kt)("h3",{id:"tutorial-2"},"Tutorial"),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'  import requests\n  import json\n  from websocket import create_connection\n  import base64\n  import six\n\n  # Constants\n\n  FEDERATION = "api-gdn.paas.macrometa.io"\n  FED_URL = "https://{}".format(FEDERATION)\n  EMAIL = "nemo@nautilus.com"\n  PASSWORD = "xxxxxx"\n  FABRIC = "_system"\n  STREAM_NAME = "teststream"\n  AUTH_TOKEN = "bearer "\n  TENANT_NAME = "xxxxxx"\n  CONSUMER_NAME = "testconsumer"\n\n\n  # Create HTTPS session\n\n  url = "{}/_open/auth".format(FED_URL)\n  payload = {\n      \'email\':EMAIL,\n      \'password\':PASSWORD\n      }\n  headers = {\n      \'content-type\': \'application/json\'\n      }\n\n  response = requests.post(url, data = json.dumps(payload), headers = headers)\n\n  if response.status_code == 200:\n      resp_body = json.loads(response.text)\n      AUTH_TOKEN += resp_body["jwt"]\n      TENANT = resp_body["tenant"]\n  else:\n      raise Exception("Error while getting auth token. Code:{}, Reason:{}".format(response.status_code,response.reason))\n\n\n  session = requests.session()\n  session.headers.update({"content-type": \'application/json\'})\n  session.headers.update({"authorization": AUTH_TOKEN})\n\n  # Create a stream\n# Set global=true for a global stream or global=false for a local stream\n\n  url = FED_URL + "/_fabric/" + FABRIC + "/streams/" + STREAM_NAME + "?global=true"\n  resp = session.post(url)\n  print("\\nStream created: ", resp.text)\n\n  # Publish messages\n  # Send message in body\n  url = FED_URL + "/_fabric/" + FABRIC + "/streams/" + STREAM_NAME + "/publish?global=true"\n  resp = session.post(url)\n  print("\\nStream created: ", resp.text)\n\n  # or\n\n  stream_type = "c8local"\n  producerurl = "wss://" + FEDERATION + "/_ws/ws/v2/producer/persistent/" + TENANT_NAME +\\\n                  "/" + stream_type + "." + FABRIC + "/" + stream_type + "s." + STREAM_NAME\n\n  ws = create_connection(producerurl)\n  payload = {\n                  "payload": base64.b64encode(\n                      six.b("Hello World")\n                  ).decode("utf-8")\n              }\n  ws.send(json.dumps(payload))\n  response = json.loads(ws.recv())\n  if response[\'result\'] == \'ok\':\n      print(\'Message published successfully\')\n  else:\n      print(\'Failed to publish message:\', response)\n  ws.close()\n\n  # Subscribe\n\n  consumerurl = "wss://" + FEDERATION + "/_ws/ws/v2/consumer/persistent/" + TENANT_NAME +\\\n                  "/" + stream_type + "." + FABRIC + "/" + stream_type + "s." + STREAM_NAME +\\\n                  "/" + CONSUMER_NAME\n  ws = create_connection(consumerurl)\n  while True:\n      msg = json.loads(ws.recv())\n      if msg:\n          print("received: {}".format(base64.b64decode(msg[\'payload\'])))\n# Acknowledge successful processing\n          ws.send(json.dumps({\'messageId\': msg[\'messageId\']}))\n          break\n  ws.close()\n\n  # Delete subscription (unsubscribe)\n  url = FED_URL + "/_api/streams/unsubscribe/" + CONSUMER_NAME\n  resp = session.post(url, data = json.dumps(payload))\n  print("Subsrcription deleted: ", resp.text)\n'))),(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  class APIRequest {\n    _headers = {\n      Accept: "application/json",\n      "Content-Type": "application/json",\n    };\n\n    constructor(url) {\n      this._url = url;\n    }\n\n    login(email, password) {\n      const endpoint = "/_open/auth";\n\n      const self = this;\n\n      return new Promise(function (resolve, reject) {\n        self\n          .req(endpoint, {\n            body: { email, password },\n            method: "POST",\n          })\n          .then(({ jwt, ...data }) => {\n            self._headers.authorization = `bearer ${jwt}`;\n            resolve(data);\n          })\n          .catch(reject);\n      });\n    }\n\n    _handleResponse(response, resolve, reject) {\n      if (response.ok) {\n        resolve(response.json());\n      } else {\n        reject(response);\n      }\n    }\n\n    req(endpoint, { body, ...options } = {}) {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        fetch(self._url + endpoint, {\n          headers: self._headers,\n          body: body ? JSON.stringify(body) : undefined,\n          ...options,\n        }).then((response) => self._handleResponse(response, resolve, reject));\n      });\n    }\n  }\n\n  const EMAIL = "nemo@nautilus.com";\n  const PASSWORD = "xxxxxx";\n  const FEDERATION_NAME = "https://api-gdn.paas.macrometa.io";\n  const FEDERATION_URL = `https://${FEDERATION_NAME}`;\n\n  const STREAM_NAME = "api_tutorial_streams";\n  const CONSUMER_NAME = "api_tutorial_streams_consumer";\n  const IS_GLOBAL = true;\n\n  const run = async function () {\n    try {\n      const connection = new APIRequest(FEDERATION_URL);\n\n      /* -------------------- Log in (nemo@nautilus.com/xxxxxxx) -------------------- */\n\n      const { tenant } = await connection.login(EMAIL, PASSWORD);\n\n      console.log("Logged in successfully using", tenant);\n      /* ------------------------------ Create stream ----------------------------- */\n\n      const stream = await connection.req(\n        `/_fabric/_system/streams/${STREAM_NAME}?global=${IS_GLOBAL}`,\n        {\n          body: { name: STREAM_NAME },\n          method: "POST",\n        }\n      );\n\n      console.log("STREAM CREATED SUCCESSFULLY", stream);\n\n      /* ----------------- Publish and subscribe message to stream ---------------- */\n\n      const region = IS_GLOBAL ? "c8global" : "c8local";\n      const streamName = `${region}s.${STREAM_NAME}`;\n      const url = IS_GLOBAL\n        ? FEDERATION_NAME;\n        : `api-${streamApp.streamApps[0].regions[0]}.prod.macrometa.io`\n\n      const consumerUrl = `wss://${url}/_ws/ws/v2/consumer/persistent/${tenant}/${region}._system/${streamName}/${CONSUMER_NAME}`;\n\n      const producerUrl = `wss://${url}/_ws/ws/v2/producer/persistent/${tenant}/${region}._system/${streamName}`;\n\n      var consumer;\n      var producer;\n      var producer_interval;\n\n      /* -------------------------- Initalize consumer -------------------------- */\n\n      const initConsumer = () => {\n        return new Promise((resolve) => {\n          consumer = new WebSocket(consumerUrl);\n\n          consumer.onopen = function () {\n            console.log("WebSocket:Consumer is open now for " + streamName);\n            resolve();\n          };\n\n          consumer.onerror = function () {\n            console.log(\n              "Failed to establish WebSocket:Consumer connection for " +\n                streamName\n            );\n          };\n\n          consumer.onclose = function () {\n            console.log("Closed WebSocket:Consumer connection for " + streamName);\n          };\n\n          consumer.onmessage = function (message) {\n            var receivedMsg = message.data && JSON.parse(message.data);\n\n            console.log(\n              `WebSocket:Consumer message received at ${new Date()}`,\n              receivedMsg\n            );\n\n            const ackMsg = { messageId: receivedMsg.messageId };\n            consumer.send(JSON.stringify(ackMsg));\n          };\n        });\n      };\n\n      /* -------------------------- Initalize producer -------------------------- */\n\n      const initProducer = () => {\n        producer = new WebSocket(producerUrl);\n\n        producer.onopen = function () {\n          console.log("WebSocket:Producer is open now for " + streamName);\n          producer_interval = setInterval(function () {\n            console.log(`WebSocket:Producer message sent at ${new Date()}`);\n            producer.send(JSON.stringify({ payload: `test` }));\n          }, 10000);\n        };\n\n        producer.onclose = function (e) {\n          console.log("Closed WebSocket:Producer connection for " + streamName);\n          clearInterval(producer_interval);\n        };\n\n        producer.onerror = function (e) {\n          console.log(\n            "Failed to establish WebSocket:Producer connection for " + streamName\n          );\n        };\n      };\n\n      initConsumer().then(() => {\n        initProducer();\n      });\n\n      await new Promise((resolve) => setTimeout(resolve, 1 * 40 * 1000));\n\n      consumer.close();\n      console.log("CONSUMER CLOSING...");\n      producer.close();\n      console.log("PRODUCER CLOSING...");\n\n      await new Promise((resolve) => setTimeout(resolve, 5000));\n\n      /* ------------------------ Unsubscribe from stream ------------------------ */\n\n      const consumerUnsubscribe = await connection.req(\n        `/_fabric/_system/_api/streams/unsubscribe/${CONSUMER_NAME}`,\n        {\n          method: "POST",\n        }\n      );\n\n      console.log(\n        `${CONSUMER_NAME} UNSUBSCRIBED SUCCESSFULLY`,\n        consumerUnsubscribe\n      );\n\n      /* ------------------------------ Delete topic ------------------------------ */\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  run();\n')))),(0,a.kt)("h2",{id:"query-as-api-restql"},"Query as API (RestQL)"),(0,a.kt)("p",null,"Globally distributed applications need a fast data platform that can transparently replicate data anywhere in the world, enabling users to access applications on the closest copy of their data. Additionally, these applications need both geo-replicated and local streams to handle pub-sub, ETL, and real-time updates. "),(0,a.kt)("p",null,"Macrometa GDN provides turnkey global distribution and transparent multi-master replication. You can run globally distributed, low-latency workloads with GDN."),(0,a.kt)("h3",{id:"tutorial-3"},"Tutorial"),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'  # Using RESTQL\n  import requests\n  import json\n\n  # Set constants\n\n  FEDERATION = "api-gdn.paas.macrometa.io"\n  FED_URL = "https://{}".format(FEDERATION)\n  EMAIL = "nemo@nautilus.com"\n  PASSWORD = "xxxxxx"\n  FABRIC = "_system"\n  AUTH_TOKEN = "bearer "\n  READ_QUERY = "FOR doc IN @@collection RETURN doc"\n  QUERY_NAME = "read"\n  QUERY_PARAMS = {"@collection": "api_query_tutorial"}\n  INSERT_QUERY =  "FOR i IN 1..100 INSERT { result: i } INTO @@collection"\n  UPDATE_QUERY =  "FOR doc IN @@collection FILTER doc.result >= 35 UPDATE doc._key WITH { qualified :true } IN @@collection"\n  DELETE_QUERY =  "FOR c IN @@collection REMOVE c IN @@collection"\n\n\n  # Create HTTPS session\n\n  url = "{}/_open/auth".format(FED_URL)\n  payload = {\n      \'email\':EMAIL,\n      \'password\':PASSWORD\n      }\n  headers = {\n      \'content-type\': \'application/json\'\n      }\n\n  response = requests.post(url, data = json.dumps(payload), headers = headers)\n\n  if response.status_code == 200:\n      resp_body = json.loads(response.text)\n      AUTH_TOKEN += resp_body["jwt"]\n      TENANT = resp_body["tenant"]\n  else:\n      raise Exception("Error while getting auth token. Code:{}, Reason:{}".format(response.status_code,response.reason))\n\n\n  session = requests.session()\n  session.headers.update({"content-type": \'application/json\'})\n  session.headers.update({"authorization": AUTH_TOKEN})\n\n  # Create RESTQL\n  url = FED_URL + "/_api/restql"\n\n  # Save read query\n  payload = {\n    "query": {\n      "name": QUERY_NAME,\n      "parameter": QUERY_PARAMS,\n      "value": READ_QUERY\n    }\n  }\n\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nRead query saved: ", resp.text)\n\n  # Save insert query\n  payload = {\n    "query": {\n      "name": "insert",\n      "value": INSERT_QUERY,\n      "parameter": QUERY_PARAMS,\n\n    }\n  }\n\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nInsert query saved: ", resp.text)\n\n  # Save update query\n  payload = {\n    "query": {\n      "name": "update",\n      "value": UPDATE_QUERY,\n      "parameter": QUERY_PARAMS,\n\n    }\n  }\n\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nUpdate query saved: ", resp.text)\n\n  payload = {\n    "query": {\n      "name": "delete",\n      "value": DELETE_QUERY,\n      "parameter": QUERY_PARAMS,\n\n    }\n  }\n\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nDelete query saved: ", resp.text)\n\n\n  # Execute saved query\n\n  url = FED_URL + "/_api/restql/execute/insert"\n  payload = {\n            "bindVars": QUERY_PARAMS,\n          }\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nInsert query executed: ", resp.text)\n\n  url = FED_URL + "/_api/restql/execute/" + QUERY_NAME\n  payload = {\n            "bindVars": QUERY_PARAMS,\n          }\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nRead query executed: ", resp.text)\n\n  url = FED_URL + "/_api/restql/execute/update"\n  payload = {\n            "bindVars": QUERY_PARAMS,\n          }\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nUpdate query executed: ", resp.text)\n\n  url = FED_URL + "/_api/restql/execute/delete"\n  payload = {\n            "bindVars": QUERY_PARAMS,\n          }\n  resp = session.post(url, data = json.dumps(payload))\n  print("\\nDelete query executed: ", resp.text)\n\n\n  # Update saved query\n  url = FED_URL + "/_api/restql/" + QUERY_NAME\n\n  payload = {\n    "query": {\n      "parameter": QUERY_PARAMS,\n      "value": READ_QUERY\n    }\n  }\n\n  resp = session.put(url, data = json.dumps(payload))\n  print("Query updated: ", resp.text)\n\n  # Delete saved queries\n\n  url = FED_URL + "/_api/restql/" + QUERY_NAME\n  resp = session.delete(url)\n  print("Read query deleted: ", resp.text)\n\n  url = FED_URL + "/_api/restql/insert"\n  resp = session.delete(url)\n  print("Insert query deleted: ", resp.text)\n\n  url = FED_URL + "/_api/restql/update"\n  resp = session.delete(url)\n  print("Update query deleted: ", resp.text)\n\n  url = FED_URL + "/_api/restql/delete"\n  resp = session.delete(url)\n  print("Delete query deleted: ", resp.text)\n'))),(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  class APIRequest {\n    _headers = {\n      Accept: "application/json",\n      "Content-Type": "application/json",\n    };\n\n    constructor(url) {\n      this._url = url;\n    }\n\n    login(email, password) {\n      const endpoint = "/_open/auth";\n\n      const self = this;\n\n      return new Promise(function (resolve, reject) {\n        self\n          .req(endpoint, {\n            body: { email, password },\n            method: "POST",\n          })\n          .then(({ jwt, ...data }) => {\n            self._headers.authorization = `bearer ${jwt}`;\n            resolve(data);\n          })\n          .catch(reject);\n      });\n    }\n\n    _handleResponse(response, resolve, reject) {\n      if (response.ok) {\n        resolve(response.json());\n      } else {\n        reject(response);\n      }\n    }\n\n    req(endpoint, { body, ...options } = {}) {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        fetch(self._url + endpoint, {\n          headers: self._headers,\n          body: body ? JSON.stringify(body) : undefined,\n          ...options,\n        }).then((response) => self._handleResponse(response, resolve, reject));\n      });\n    }\n  }\n\n  const EMAIL = "nemo@nautilus.com";\n  const PASSWORD = "xxxxxx";\n  const FEDERATION_URL = "https://api-gdn.paas.macrometa.io";\n\n  const QUERY_NAME = "api_query_tutorial";\n  const QUERY_PARAMS = { "@collection": "api_query_tutorial" };\n\n  const run = async function () {\n    try {\n      const connection = new APIRequest(FEDERATION_URL);\n\n      /* -------------------- Log in (nemo@nautilus.com/xxxxxx) -------------------- */\n\n      await connection.login(EMAIL, PASSWORD);\n\n      console.log("Logged in successfully using", EMAIL);\n\n      /* ------------------------ Save RestQL query (with params) ----------------------- */\n\n      const QUERY = "FOR doc IN @@collection RETURN doc";\n\n      const query = await connection.req("/_fabric/_system/_api/restql", {\n        body: {\n          query: {\n            name: QUERY_NAME,\n            value: QUERY,\n            parameter: QUERY_PARAMS,\n          },\n        },\n        method: "POST",\n      });\n\n      console.log("QUERY CREATED SAVED SUCCESSFULLY", query);\n\n      /* ----------------------- Update RestQL query (with params) ---------------------- */\n\n      const updatedQuery = await connection.req(\n        `/_fabric/_system/_api/restql/${QUERY_NAME}`,\n        {\n          body: {\n            query: {\n              value: QUERY,\n              parameter: QUERY_PARAMS,\n            },\n          },\n          method: "PUT",\n        }\n      );\n\n      console.log("QUERY UPDATED  SUCCESSFULLY", updatedQuery);\n\n      /* ----------------------- Run RestQL query (with params) ---------------------- */\n\n      const execute = () =>\n        connection.req(`/_fabric/_system/_api/restql/execute/${QUERY_NAME}`, {\n          body: {\n            bindVars: QUERY_PARAMS,\n          },\n          method: "POST",\n        });\n\n      /* -------------------  Insert query using cursor (with params) ------------------- */\n\n      const INSERT_QUERY =\n        "FOR i IN 1..100 INSERT { result: i } INTO @@collection";\n\n      await connection.req(`/_fabric/_system/_api/cursor`, {\n        body: {\n          id: "tutorialQuery",\n          query: INSERT_QUERY,\n          bindVars: QUERY_PARAMS,\n        },\n        method: "POST",\n      });\n\n      console.log("DOCUMENTS INSERTED SUCCESSFULLY");\n\n      const insertResults = await execute();\n\n      console.log("DATA AFTER INSERT", insertResults);\n\n      /* ------------------- Update query using cursor (with params) ------------------- */\n      const CURSOR_QUERY =\n        "FOR doc IN @@collection FILTER doc.result >= 35 UPDATE doc._key WITH { qualified :true } IN @@collection";\n\n      await connection.req(`/_fabric/_system/_api/cursor`, {\n        body: {\n          id: "tutorialQuery",\n          query: CURSOR_QUERY,\n          bindVars: QUERY_PARAMS,\n        },\n        method: "POST",\n      });\n      console.log("DOCUMENTS UPDATED SUCCESSFULLY");\n\n      const updateResults = await execute();\n\n      console.log("DATA AFTER UPDATE", updateResults);\n\n      /* ------------------- Remove query using cursor (with params) ------------------- */\n\n      const REMOVE_QUERY = "FOR doc IN @@collection REMOVE doc IN @@collection";\n\n      await connection.req(`/_fabric/_system/_api/cursor`, {\n        body: {\n          id: "tutorialQuery",\n          query: REMOVE_QUERY,\n          bindVars: QUERY_PARAMS,\n        },\n        method: "POST",\n      });\n\n      console.log("DOCUMENTS DELETED SUCCESSFULLY");\n\n      const removeResults = await execute();\n\n      console.log("DATA AFTER DELETE", removeResults);\n\n      /* ----------------------------- Delete RestQL query by name ----------------------------- */\n\n      const deleteQuery = await connection.req(\n        `/_fabric/_system/_api/restql/${QUERY_NAME}`,\n        {\n          method: "DELETE",\n        }\n      );\n\n      console.log("QUERY DELETED  SUCCESSFULLY", deleteQuery);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  run();\n')))),(0,a.kt)("h2",{id:"working-with-graphs"},"Working with Graphs"),(0,a.kt)("p",null,(0,a.kt)("em",{parentName:"p"},"Graphs")," enable you to do the following:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Structure your data models to make them consistent with your domain."),(0,a.kt)("li",{parentName:"ul"},"Group your data models into logical collections and query them.")),(0,a.kt)("p",null,"A graph consists of ",(0,a.kt)("em",{parentName:"p"},"vertices")," and ",(0,a.kt)("em",{parentName:"p"},"edges")," that are all stored as documents in collections. You can store vertices in document collections or edge collections, enabling you to use an edge as a vertex. Edges can only be stored in edge collections. An ",(0,a.kt)("em",{parentName:"p"},"edge collection")," is similar to a relation table that stores many-to-many relationships between two data tables, and a ",(0,a.kt)("em",{parentName:"p"},"vertex collection")," is like one of the data tables with connected objects. A graph can use one or more ",(0,a.kt)("em",{parentName:"p"},"edge definitions")," to determine which collections are used."),(0,a.kt)("p",null,"An edge collection contains ",(0,a.kt)("em",{parentName:"p"},"edge documents")," and shares its namespace with all other collection types. You can manage edge documents with REST API wrappers for regular documents, but edge collection API wrappers provide the following benefits:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"Perform modifications as transactions."),(0,a.kt)("li",{parentName:"ul"},"When inserting edge documents, check them against edge definitions.")),(0,a.kt)("p",null,"Edge documents have two additional required fields:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_from")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"_to"))),(0,a.kt)("p",null,"Edges use these fields to point from one document to another stored in vertex collections. The values of ",(0,a.kt)("inlineCode",{parentName:"p"},"_from")," and ",(0,a.kt)("inlineCode",{parentName:"p"},"_to")," must match the IDs of vertex documents linked by the edge document. For example:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n"_id": "friends/001",\n"_key": "001",\n"_rev": "_Wm3dyle--_",\n"_from": "students/john",  // This value must match the ID of the "from" document.\n"_to": "students/jane",  // This value must match the ID of the "to" document.\n"closeness": 9.5\n}\n')),(0,a.kt)("p",null,"In queries, you can define permissions for the direction of edge relations. For example:"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},"OUTBOUND: ",(0,a.kt)("inlineCode",{parentName:"li"},"_from")," \u2192 ",(0,a.kt)("inlineCode",{parentName:"li"},"_to")),(0,a.kt)("li",{parentName:"ul"},"INBOUND: ",(0,a.kt)("inlineCode",{parentName:"li"},"_from")," \u2190 ",(0,a.kt)("inlineCode",{parentName:"li"},"_to")),(0,a.kt)("li",{parentName:"ul"},"ANY: ",(0,a.kt)("inlineCode",{parentName:"li"},"_from")," \u2194 ",(0,a.kt)("inlineCode",{parentName:"li"},"_to"))),(0,a.kt)("p",null,"While simple graph queries with a fixed number of hops via the relation table may be doable in SQL with several nested joins, graph databases can handle an arbitrary number of these hops over edge collections - this is called ",(0,a.kt)("inlineCode",{parentName:"p"},"traversal"),". Also edges in one edge collection may point to several vertex collections. It is common to have attributes attached to edges, i.e. a label naming this interconnection."),(0,a.kt)("h3",{id:"tutorial-4"},"Tutorial"),(0,a.kt)("p",null,"To create ",(0,a.kt)("inlineCode",{parentName:"p"},"edge collection")," use same endpoint ",(0,a.kt)("inlineCode",{parentName:"p"},"/_fabric/{fabric_name}/_api/collection")," and pass ",(0,a.kt)("inlineCode",{parentName:"p"},"type:3")," in payload."),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},"  import requests\n  import json\n\n  # Constants\n\n  FEDERATION = \"api-gdn.paas.macrometa.io\"\n  FED_URL = \"https://{}\".format(FEDERATION)\n  EMAIL = \"nemo@nautilus.com\"\n  PASSWORD = \"xxxxxx\"\n  FABRIC = \"_system\"\n  AUTH_TOKEN = \"bearer \"\n  TENANT_NAME = \"xxxxxx\"\n  COLLECTION_NAME_1 = \"teachers\"\n  COLLECTION_NAME_2 = \"lectures\"\n  EDGE_COLL_NAME = \"teach\"\n  GRAPH_NAME = \"lectureteacher\"\n\n\n  # Create HTTPS session\n\n  url = \"{}/_open/auth\".format(FED_URL)\n  payload = {\n      'email':EMAIL,\n      'password':PASSWORD\n      }\n  headers = {\n      'content-type': 'application/json'\n      }\n\n  response = requests.post(url, data = json.dumps(payload), headers = headers)\n\n  if response.status_code == 200:\n      resp_body = json.loads(response.text)\n      AUTH_TOKEN += resp_body[\"jwt\"]\n      TENANT = resp_body[\"tenant\"]\n  else:\n      raise Exception(\"Error while getting auth token. Code:{}, Reason:{}\".format(response.status_code,response.reason))\n\n\n  session = requests.session()\n  session.headers.update({\"content-type\": 'application/json'})\n  session.headers.update({\"authorization\": AUTH_TOKEN})\n\n  # Create document collections and insert data\n\n\n  url = FED_URL + \"/_api/collection\"\n  payload = { 'name': COLLECTION_NAME_1 }\n\n  resp = session.post(url,data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print(\"\\nDocument collection 1 created: \",result)\n\n  payload = { 'name': COLLECTION_NAME_2 }\n\n  resp = session.post(url,data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print(\"\\nDocument collection 2 created: \",result)\n\n  payload = [\n      {\n          '_key':'Jean',\n          'firstname': 'Jean',\n          'lastname':'Picard',\n          'email':'jean.picard@macrometa.io'\n      },\n      {\n          '_key':'James',\n          'firstname': 'James',\n          'lastname':'Kirk',\n          'email':'james.kirk@macrometa.io'\n      },\n      {\n          '_key': 'Han',\n          'firstname': 'Han',\n          'lastname':'Solo',\n          'email':'han.solo@macrometa.io'\n      },\n      {\n          '_key': 'Bruce',\n          'firstname': 'Bruce',\n          'lastname':'Wayne',\n          'email':'bruce.wayne@macrometa.io'\n      }\n  ]\n\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME_1\n  resp = session.post(url,data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print(\"\\nDocuments inserted: \",result)\n\n  payload = [\n      {'_id': 'lectures/CSC101', 'difficulty': 'easy', '_key':'CSC101', 'firstname':'Jean'},\n      {'_id': 'lectures/CSC102', 'difficulty': 'hard', '_key':'CSC102','firstname':'Jean'},\n      {'_id': 'lectures/CSC103', 'difficulty': 'hard', '_key':'CSC103','firstname':'Jean'},\n      {'_id': 'lectures/CSC104', 'difficulty': 'moderate', '_key':'CSC104','firstname':'Jean'}\n\n  ]\n\n  url = FED_URL + \"/_api/document/\" + COLLECTION_NAME_2\n  resp = session.post(url,data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print(\"\\nDocuments inserted: \",result)\n\n  # Create edge collection\n\n  payload = { 'name': EDGE_COLL_NAME, \"type\":3 }\n\n  url = FED_URL + \"/_api/collection\"\n  resp = session.post(url,data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print(\"\\nEdge collection created: \",result)\n  payload = [\n      {\n      '_key': 'Jean-CSC101',\n      '_from': 'teachers/Jean',\n      '_to': 'lectures/CSC101',\n      'online': False\n      },\n      {\n      '_key': 'Jean-CSC102',\n      '_from': 'teachers/Jean',\n      '_to': 'lectures/CSC102',\n      'online': True\n      },\n      {\n      '_key': 'Jean-CSC103',\n      '_from': 'teachers/Jean',\n      '_to': 'lectures/CSC103',\n      'online': False\n      },\n      {\n      '_key': 'Bruce-CSC101',\n      '_from': 'teachers/Bruce',\n      '_to': 'lectures/CSC101',\n      'online': True\n      }\n\n  ]\n\n  url = FED_URL + \"/_api/document/\" + EDGE_COLL_NAME\n  resp = session.post(url,data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print(\"\\nDocuments inserted: \",result)\n\n  # Create a graph\n\n  payload ={\n    \"edgeDefinitions\": [\n      {\n        \"collection\": EDGE_COLL_NAME,\n        \"from\": [\n          \"teachers\"\n        ],\n        \"to\": [\n          \"lectures\"\n        ]\n      }\n    ],\n    \"name\": GRAPH_NAME,\n    \"options\": {}\n  }\n\n  url = FED_URL + \"/_api/graph\"\n  resp = session.post(url,data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print(\"\\nGraph created: \",result)\n\n  # Graph traversal\n  # To use outbound traversal, set direction to `out`. To use inbound traversal, set direction to `in`.\n\n  params = {\n      \"vertex\": \"Jean\",\n      \"direction\": \"out\"\n  }\n\n  url = FED_URL + \"/_api/edges/\" + EDGE_COLL_NAME\n\n  resp = session.get(url,params=params)\n  result = json.loads(resp.text)\n  print(\"\\nGraph traversal: \",result)\n\n  # Delete graph and collections\n# To delete the graph and save the collections, set dropCollection to `false`.\n\n  params = {\"dropCollection\": True}\n\n  url = FED_URL + \"/_api/graph/\" + GRAPH_NAME\n\n  resp = session.delete(url,params=params)\n  result = json.loads(resp.text)\n  print(\"Graph and collections deleted: \", result)\n"))),(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  class APIRequest {\n    _headers = {\n      Accept: "application/json",\n      "Content-Type": "application/json",\n    };\n\n    constructor(url) {\n      this._url = url;\n    }\n\n    login(email, password) {\n      const endpoint = "/_open/auth";\n\n      const self = this;\n\n      return new Promise(function (resolve, reject) {\n        self\n          .req(endpoint, {\n            body: { email, password },\n            method: "POST",\n          })\n          .then(({ jwt, ...data }) => {\n            self._headers.authorization = `bearer ${jwt}`;\n            resolve(data);\n          })\n          .catch(reject);\n      });\n    }\n\n    _handleResponse(response, resolve, reject) {\n      if (response.ok) {\n        resolve(response.json());\n      } else {\n        reject(response);\n      }\n    }\n\n    req(endpoint, { body, ...options } = {}) {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        fetch(self._url + endpoint, {\n          headers: self._headers,\n          body: body ? JSON.stringify(body) : undefined,\n          ...options,\n        }).then((response) => self._handleResponse(response, resolve, reject));\n      });\n    }\n  }\n  TBD\n')))),(0,a.kt)("h2",{id:"stream-processing"},"Stream Processing"),(0,a.kt)("p",null,"Macrometa Stream processing enables you to integrate streaming data into your tenant and enables you to automatically respond to events. A stream processing engine must collect and analyze data generated by business activities, then integrate or act on the data."),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Collect: Capture or receive data from various data sources.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Analyze: Analyze data to identify interesting patterns and extract information.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Act: Take actions based on processing results. For example, you can execute code, call an external service, or trigger a complex integration.")),(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("p",{parentName:"li"},"Integrate: Make processed data globally available for consumers in the correct format with low latency."))),(0,a.kt)(r.Z,{groupId:"operating-systems",mdxType:"Tabs"},(0,a.kt)(i.Z,{value:"py",label:"Python",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-py"},'  import requests\n  import json\n  from websocket import create_connection\n  import base64\n  import six\n  import time\n\n  # Set constants\n\n  FEDERATION = "api-gdn-us-west.prod.macrometa.io"\n  FED_URL = "https://{}".format(FEDERATION)\n  EMAIL = "nemo@nautilus.com"\n  PASSWORD = "xxxxxx"\n  FABRIC = "_system"\n  AUTH_TOKEN = "bearer "\n  TENANT_NAME = "xxxxxx"\n  STREAM_NAME = "tutorialAppInputStream"\n  STREAM_APP_NAME = "stream_app_tutorial"\n  STREAM_APP =\'\'\'\n    @App:name(\'stream_app_tutorial\')\n\n    define function concatFn[javascript] return string {\n        var str1 = data[0];\n        var str2 = data[1];\n        var str3 = data[2];\n        var response = str1 + str2 + str3;\n        return response;\n    };\n\n    -- Stream\n    define stream tutorialAppInputStream (deviceID string, roomNo int, temperature double);\n\n    -- Table\n    define table tutorialAppOutputTable (id string, temperature double);\n\n    @info(name=\'Query\')\n    select concatFn(roomNo,\'-\',deviceID) as id, temperature\n    from tutorialAppInputStream\n    insert into tutorialAppOutputTable;\n  \'\'\'\n  INPUT_DATA = [\n        {\n          "deviceID": "AD11",\n          "roomNo": 200,\n          "temperature": 18,\n        },\n        { "deviceID": "AD11",\n          "roomNo": 201,\n          "temperature": 47 },\n      ]\n  SELECT_QUERY = "FOR doc IN tutorialAppOutputTable return doc"\n\n  # Create HTTPS session\n\n  url = "{}/_open/auth".format(FED_URL)\n  payload = {\n      \'email\':EMAIL,\n      \'password\':PASSWORD\n      }\n  headers = {\n      \'content-type\': \'application/json\'\n      }\n\n  response = requests.post(url, data = json.dumps(payload), headers = headers)\n\n  if response.status_code == 200:\n      resp_body = json.loads(response.text)\n      AUTH_TOKEN += resp_body["jwt"]\n      TENANT = resp_body["tenant"]\n  else:\n      raise Exception("Error while getting auth token. Code:{}, Reason:{}".format(response.status_code,response.reason))\n\n\n  session = requests.session()\n  session.headers.update({"content-type": \'application/json\'})\n  session.headers.update({"authorization": AUTH_TOKEN})\n\n  # Create stream application\n\n  url = FED_URL + "/_api/streamapps"\n  payload = {\n    "definition": STREAM_APP,\n    "regions": ["gdn-us-west1"]\n  }\n\n  resp = session.post(url, data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print("\\nStream application created: ", result)\n\n  # Activate stream application\n\n  url = FED_URL + "/_api/streamapps/" + STREAM_APP_NAME + "/active?active=true"\n  resp = session.patch(url)\n  result = json.loads(resp.text)\n  print("\\nStream application activated: ", result)\n\n  # Wait for all inputs and outputs to initialize\n  time.sleep(20)\n\n  # Publish messages to the input stream\n  stream_type = "c8local"\n  producerurl = "wss://" + FEDERATION + "/_ws/ws/v2/producer/persistent/" + TENANT_NAME +\\\n                  "/" + stream_type + "." + FABRIC + "/" + stream_type + "s." + STREAM_NAME\n\n  ws = create_connection(producerurl)\n  payload = {\n                  "payload": base64.b64encode(\n                      six.b(json.dumps(INPUT_DATA[0]))\n                  ).decode("utf-8")\n              }\n  ws.send(json.dumps(payload))\n  response = json.loads(ws.recv())\n  if response[\'result\'] == \'ok\':\n      print(\'Message published successfully\')\n  else:\n      print(\'Failed to publish message:\', response)\n\n  payload = {\n                  "payload": base64.b64encode(\n                      six.b(json.dumps(INPUT_DATA[1]))\n                  ).decode("utf-8")\n              }\n  ws.send(json.dumps(payload))\n  response = json.loads(ws.recv())\n  if response[\'result\'] == \'ok\':\n      print(\'Message published successfully\')\n  else:\n      print(\'Failed to publish message:\', response)\n\n  ws.close()\n\n  # Verify results from the collection\n\n  url = FED_URL + "/_api/cursor"\n  payload= {\n    "id": "tutorialStreamAppQuery",\n    "query": SELECT_QUERY,\n    "bindVars": {},\n  }\n  resp = session.post(url, data=json.dumps(payload))\n  result = json.loads(resp.text)\n  print("\\nStream application results: ", result)\n\n  # Delete stream application\n\n  url = FED_URL + "/_api/streamapps/" + STREAM_APP_NAME\n  resp = session.delete(url)\n  result = json.loads(resp.text)\n  print("\\nStream application deleted: ", result)\n'))),(0,a.kt)(i.Z,{value:"js",label:"Javascript",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-js"},'  class APIRequest {\n    _headers = {\n      Accept: "application/json",\n      "Content-Type": "application/json",\n    };\n\n    constructor(url) {\n      this._url = url;\n    }\n\n    login(email, password) {\n      const endpoint = "/_open/auth";\n\n      const self = this;\n\n      return new Promise(function (resolve, reject) {\n        self\n          .req(endpoint, {\n            body: { email, password },\n            method: "POST",\n          })\n          .then(({ jwt, ...data }) => {\n            self._headers.authorization = `bearer ${jwt}`;\n            resolve(data);\n          })\n          .catch(reject);\n      });\n    }\n\n    _handleResponse(response, resolve, reject) {\n      if (response.ok) {\n        resolve(response.json());\n      } else {\n        reject(response);\n      }\n    }\n\n    req(endpoint, { body, ...options } = {}) {\n      const self = this;\n      return new Promise(function (resolve, reject) {\n        fetch(self._url + endpoint, {\n          headers: self._headers,\n          body: body ? JSON.stringify(body) : undefined,\n          ...options,\n        }).then((response) => self._handleResponse(response, resolve, reject));\n      });\n    }\n  }\n  const EMAIL = "nemo@nautilus.com";\n  const PASSWORD = "xxxxxx";\n  const FEDERATION_NAME = "api-gdn.prod.macrometa.io";\n  const FEDERATION_URL = `https://${FEDERATION_NAME}`;\n\n  const IS_GLOBAL = true;\n  const STREAM_NAME = `tutorialAppInputStream`;\n  const STREAM_APP_NAME = `strean_app_tutorial`;\n  const STREAM_APP = `@App:name(\'strean_app_tutorial\')\n    @App:description(\'This application demonstrates how to use user defined function in the stream app\')\n\n    define function concatFn[javascript] return string {\n        var str1 = data[0];\n        var str2 = data[1];\n        var str3 = data[2];\n        var response = str1 + str2 + str3;\n        return response;\n    };\n\n    -- Stream\n    define stream tutorialAppInputStream (deviceID string, roomNo int, temperature double);\n\n    -- Table\n    define table tutorialAppOutputTable (id string, temperature double);\n\n    @info(name=\'Query\')\n    select concatFn(roomNo,\'-\',deviceID) as id, temperature\n    from tutorialAppInputStream\n    insert into tutorialAppOutputTable;`;\n\n  const run = async function () {\n    try {\n      const connection = new APIRequest(FEDERATION_URL);\n\n      /* -------------------- Log in (nemo@nautilus.com/xxxxxx) -------------------- */\n\n      const { tenant } = await connection.login(EMAIL, PASSWORD);\n\n      console.log("Logged in successfully using", tenant);\n\n      /* ---------------------------- Create StreamApp ---------------------------- */\n      const streamApp = await connection.req("/_fabric/_system/_api/streamapps", {\n        body: {\n          definition: STREAM_APP,\n          regions: [],\n        },\n        method: "POST",\n      });\n\n      console.log("STREAM APP CREATED SUCCESSFULLY", streamApp);\n\n      /* --------------------------- Activate StreamApp --------------------------- */\n\n      await connection.req(\n        `/_fabric/_system/_api/streamapps/${STREAM_APP_NAME}/active?active=true`,\n        {\n          method: "PATCH",\n        }\n      );\n\n      console.log("ACTIVATING STREAM APP...", STREAM_APP_NAME);\n\n      await new Promise((resolve) => setTimeout(resolve, 10000));\n\n      console.log("STREAM APP ACTIVATED SUCCESSFULLY");\n\n      /* ------------------ Publish messages to sample StreamApp ------------------ */\n      const region = IS_GLOBAL ? "c8global" : "c8local";\n      const streamName = `${region}s.${STREAM_NAME}`;\n      const url = IS_GLOBAL\n        ? FEDERATION_NAME;\n        : `api-${streamApp.streamApps[0].regions[0]}.prod.macrometa.io`\n\n      const producerUrl = `wss://${url}/_ws/ws/v2/producer/persistent/${tenant}/${region}._system/${streamName}`;\n\n      /* -------------------------- Initalize producer -------------------------- */\n\n      const producer = new WebSocket(producerUrl);\n\n      producer.onopen = function () {\n        console.log("WebSocket:Producer is open now for " + streamName);\n      };\n\n      producer.onerror = function () {\n        console.log(\n          "Failed to establish WebSocket:Producer connection for " + streamName\n        );\n      };\n\n      producer.onclose = function () {\n        console.log("Closed WebSocket:Producer connection for " + streamName);\n      };\n\n      producer.onmessage = function () {\n        console.log("WebSocket:Producer message sent successfully");\n      };\n\n      await new Promise((resolve) => setTimeout(resolve, 10000));\n\n      const INPUT_DATA = [\n        {\n          deviceID: "AD11",\n          roomNo: 200,\n          temperature: 18,\n        },\n        { deviceID: "AD11", roomNo: 201, temperature: 47 },\n      ];\n\n      producer.send(\n        JSON.stringify({\n          payload: btoa(JSON.stringify(INPUT_DATA[0])),\n        })\n      );\n\n      await new Promise((resolve) => setTimeout(resolve, 10000));\n\n      producer.send(\n        JSON.stringify({\n          payload: btoa(JSON.stringify(INPUT_DATA[1])),\n        })\n      );\n\n      await new Promise((resolve) => setTimeout(resolve, 10000));\n\n      producer.close();\n\n      /* ----------------------------- Verify results ----------------------------- */\n\n      const SELECT_QUERY = "FOR doc IN tutorialAppOutputTable return doc";\n\n      const result = await connection.req(`/_fabric/_system/_api/cursor`, {\n        body: {\n          id: "tutorialStreamAppQuery",\n          query: SELECT_QUERY,\n          bindVars: {},\n        },\n        method: "POST",\n      });\n\n      console.log("INPUT SENT ---\x3e", INPUT_DATA);\n      console.log("OUTPUT DATA ---\x3e", result.results);\n\n      /* ---------------------------- Delete StreamApp ---------------------------- */\n      const deletion = await connection.req(\n        `/_fabric/_system/_api/streamapps/${STREAM_APP_NAME}`,\n        {\n          method: "DELETE",\n        }\n      );\n\n      console.log("STREAM APP DELETED SUCCESSFULLY", deletion);\n    } catch (e) {\n      console.error(e);\n    }\n  };\n\n  run();\n')))))}E.isMDXComponent=!0},25369:function(e,n,t){n.Z=t.p+"assets/images/gdn-api-browser-0c8c99ab1aea5bc3346f0788df0606c5.png"}}]);