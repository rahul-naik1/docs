"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3631],{3905:function(e,t,a){a.d(t,{Zo:function(){return m},kt:function(){return d}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},l=Object.keys(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(n=0;n<l.length;n++)a=l[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=n.createContext({}),u=function(e){var t=n.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},m=function(e){var t=u(e.components);return n.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},k=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,l=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),k=u(a),d=r,N=k["".concat(p,".").concat(d)]||k[d]||s[d]||l;return a?n.createElement(N,i(i({ref:t},m),{},{components:a})):n.createElement(N,i({ref:t},m))}));function d(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=a.length,i=new Array(l);i[0]=k;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,i[1]=o;for(var u=2;u<l;u++)i[u]=a[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,a)}k.displayName="MDXCreateElement"},64924:function(e,t,a){a.r(t),a.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return u},toc:function(){return s}});var n=a(87462),r=a(63366),l=(a(67294),a(3905)),i=["components"],o={sidebar_position:11,title:"Type Cast & Type Check Functions"},p=void 0,u={unversionedId:"c8ql/functions/type-cast",id:"c8ql/functions/type-cast",title:"Type Cast & Type Check Functions",description:"Some operators expect their operands to have a certain data type. For example, logical operators expect their operands to be boolean values, and the arithmetic operators expect their operands to be numeric values. If an operation is performed with operands of other types, an automatic conversion to the expected types is tried. This is called implicit type casting. It helps to avoid query aborts.",source:"@site/docs/c8ql/functions/type-cast.md",sourceDirName:"c8ql/functions",slug:"/c8ql/functions/type-cast",permalink:"/docs/c8ql/functions/type-cast",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/c8ql/functions/type-cast.md",tags:[],version:"current",sidebarPosition:11,frontMatter:{sidebar_position:11,title:"Type Cast & Type Check Functions"},sidebar:"tutorialSidebar",previous:{title:"Miscellaneous Functions",permalink:"/docs/c8ql/functions/miscellaneous"},next:{title:"Overview",permalink:"/docs/c8ql/graphs/overview"}},m={},s=[{value:"Type casting functions",id:"type-casting-functions",level:2},{value:"TO_BOOL()",id:"to_bool",level:3},{value:"TO_NUMBER()",id:"to_number",level:3},{value:"TO_STRING()",id:"to_string",level:3},{value:"TO_ARRAY()",id:"to_array",level:3},{value:"TO_LIST()",id:"to_list",level:3},{value:"Type check functions",id:"type-check-functions",level:2},{value:"IS_NULL()",id:"is_null",level:3},{value:"IS_BOOL()",id:"is_bool",level:3},{value:"IS_NUMBER()",id:"is_number",level:3},{value:"IS_STRING()",id:"is_string",level:3},{value:"IS_ARRAY()",id:"is_array",level:3},{value:"IS_LIST()",id:"is_list",level:3},{value:"IS_OBJECT()",id:"is_object",level:3},{value:"IS_DOCUMENT()",id:"is_document",level:3},{value:"IS_DATESTRING()",id:"is_datestring",level:3},{value:"IS_KEY()",id:"is_key",level:3},{value:"TYPENAME()",id:"typename",level:3}],k={toc:s};function d(e){var t=e.components,a=(0,r.Z)(e,i);return(0,l.kt)("wrapper",(0,n.Z)({},k,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("p",null,"Some operators expect their operands to have a certain data type. For example, logical operators expect their operands to be boolean values, and the arithmetic operators expect their operands to be numeric values. If an operation is performed with operands of other types, an automatic conversion to the expected types is tried. This is called implicit type casting. It helps to avoid query aborts."),(0,l.kt)("p",null,"Type casts can also be performed upon request by invoking a type cast function. This is called explicit type casting. C8QL offers several functions for this. Each of the these functions takes an operand of any data type and returns a result value with the type corresponding to the function name. For example, ",(0,l.kt)("em",{parentName:"p"},"TO_NUMBER()")," will return a numeric value."),(0,l.kt)("h2",{id:"type-casting-functions"},"Type casting functions"),(0,l.kt)("h3",{id:"to_bool"},"TO_BOOL()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TO_BOOL(value) \u2192 bool")),(0,l.kt)("p",null,"Take an input ",(0,l.kt)("em",{parentName:"p"},"value")," of any type and convert it into the appropriate boolean value."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"null")," is converted to ",(0,l.kt)("em",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},"Numbers are converted to ",(0,l.kt)("em",{parentName:"li"},"true"),", except for 0, which is converted to ",(0,l.kt)("em",{parentName:"li"},"false")),(0,l.kt)("li",{parentName:"ul"},"Strings are converted to ",(0,l.kt)("em",{parentName:"li"},"true")," if they are non-empty, and to ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise"),(0,l.kt)("li",{parentName:"ul"},"Arrays are always converted to ",(0,l.kt)("em",{parentName:"li"},"true")," (even if empty)"),(0,l.kt)("li",{parentName:"ul"},"Objects / documents are always converted to ",(0,l.kt)("em",{parentName:"li"},"true"))))),(0,l.kt)("p",null,"It's also possible to use double negation to cast to boolean:"),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'!!1 // true\n!!0 // false\n!!-0.0 // false\nnot not 1 // true\n!!"non-empty string" // true\n!!"" // false\n')),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TO_BOOL()")," is preferred however, because it states the intention clearer."),(0,l.kt)("h3",{id:"to_number"},"TO_NUMBER()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TO_NUMBER(value) \u2192 number")),(0,l.kt)("p",null,"Take an input ",(0,l.kt)("em",{parentName:"p"},"value")," of any type and convert it into a numeric value."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"number")," (number):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"null")," and ",(0,l.kt)("em",{parentName:"li"},"false")," are converted to the value ",(0,l.kt)("em",{parentName:"li"},"0")),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"true")," is converted to ",(0,l.kt)("em",{parentName:"li"},"1")),(0,l.kt)("li",{parentName:"ul"},"Numbers keep their original value"),(0,l.kt)("li",{parentName:"ul"},"Strings are converted to their numeric equivalent if the string contains a valid representation of a number. Whitespace at the start and end of the string is allowed. String values that do not contain any valid representation of a number will be converted to the number ",(0,l.kt)("em",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},"An empty array is converted to ",(0,l.kt)("em",{parentName:"li"},"0"),", an array with one member is converted into the result of ",(0,l.kt)("inlineCode",{parentName:"li"},"TO_NUMBER()")," for its sole member. An array with two or more members is converted to the number ",(0,l.kt)("em",{parentName:"li"},"0"),"."),(0,l.kt)("li",{parentName:"ul"},"An object / document is converted to the number ",(0,l.kt)("em",{parentName:"li"},"0"),".",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"A unary plus will also cast to a number, but `TO_NUMBER()` is the preferred way:\n```js\n")),"+'5' // 5\n+","[8]"," // 8\n+","[8,9]"," // 0\n+{} // 0",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"```\nA unary minus works likewise, except that a numeric value is also negated:\n```js\n")),"-'5' // -5\n-","[8]"," // -8\n-","[8,9]"," // 0\n-{} // 0",(0,l.kt)("pre",{parentName:"li"},(0,l.kt)("code",{parentName:"pre"},"```\n")))))),(0,l.kt)("h3",{id:"to_string"},"TO_STRING()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TO_STRING(value) \u2192 str")),(0,l.kt)("p",null,"Take an input ",(0,l.kt)("em",{parentName:"p"},"value")," of any type and convert it into a string value."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"str")," (string):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"null")," is converted to an empty string ",(0,l.kt)("inlineCode",{parentName:"li"},'""')),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"false")," is converted to the string ",(0,l.kt)("em",{parentName:"li"},'"false"'),", ",(0,l.kt)("em",{parentName:"li"},"true")," to the string ",(0,l.kt)("em",{parentName:"li"},'"true"')),(0,l.kt)("li",{parentName:"ul"},'Numbers are converted to their string representations. This can also be a scientific notation (e.g. "2e-7")'),(0,l.kt)("li",{parentName:"ul"},"Arrays and objects / documents are converted to string representations, which means JSON-encoded strings with no additional whitespace")))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'TO_STRING(null) // ""\nTO_STRING(true) // "true"\nTO_STRING(false) // "false"\nTO_STRING(123) // "123"\nTO_STRING(+1.23) // "1.23"\nTO_STRING(-1.23) // "-1.23"\nTO_STRING(0.0000002) // "2e-7"\nTO_STRING( [1, 2, 3] ) // "[1,2,3]"\nTO_STRING( { foo: "bar", baz: null } ) // "{\\"foo\\":\\"bar\\",\\"baz\\":null}"\n')),(0,l.kt)("h3",{id:"to_array"},"TO_ARRAY()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TO_ARRAY(value) \u2192 array")),(0,l.kt)("p",null,"Take an input ",(0,l.kt)("em",{parentName:"p"},"value")," of any type and convert it into an array value."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"array")," (array):",(0,l.kt)("ul",{parentName:"li"},(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("em",{parentName:"li"},"null")," is converted to an empty array"),(0,l.kt)("li",{parentName:"ul"},"Boolean values, numbers and strings are converted to an array containing the original value as its single element"),(0,l.kt)("li",{parentName:"ul"},"Arrays keep their original value"),(0,l.kt)("li",{parentName:"ul"},"Objects / documents are converted to an array containing their attribute ",(0,l.kt)("strong",{parentName:"li"},"values")," as array elements, just like ",(0,l.kt)("a",{parentName:"li",href:"/docs/c8ql/functions/document#values"},"VALUES()"))))),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-js"},'TO_ARRAY(null) // []\nTO_ARRAY(false) // [false]\nTO_ARRAY(true) // [true]\nTO_ARRAY(5) // [5]\nTO_ARRAY("foo") // ["foo"]\nTO_ARRAY([1, 2, "foo"]) // [1, 2, "foo"]\nTO_ARRAY({foo: 1, bar: 2, baz: [3, 4, 5]}) // [1, 2, [3, 4, 5]]\n')),(0,l.kt)("h3",{id:"to_list"},"TO_LIST()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TO_LIST(value) \u2192 array")),(0,l.kt)("p",null,"This is an alias for ",(0,l.kt)("a",{parentName:"p",href:"#to_array"},"TO_ARRAY()"),"."),(0,l.kt)("h2",{id:"type-check-functions"},"Type check functions"),(0,l.kt)("p",null,"C8QL also offers functions to check the data type of a value at runtime. The following type check functions are available. Each of these functions takes an argument of any data type and returns true if the value has the type that is checked for, and false otherwise."),(0,l.kt)("h3",{id:"is_null"},"IS_NULL()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_NULL(value) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is ",(0,l.kt)("em",{parentName:"p"},"null"),". Identical to ",(0,l.kt)("inlineCode",{parentName:"p"},"value == null"),"."),(0,l.kt)("p",null,"To test if an attribute exists, see ",(0,l.kt)("a",{parentName:"p",href:"/docs/c8ql/functions/document#has"},"HAS()")," instead."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): value to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"true")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise")),(0,l.kt)("h3",{id:"is_bool"},"IS_BOOL()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_BOOL(value) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is a ",(0,l.kt)("em",{parentName:"p"},"boolean")," value"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): value to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"true")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is ",(0,l.kt)("inlineCode",{parentName:"li"},"true")," or ",(0,l.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise")),(0,l.kt)("h3",{id:"is_number"},"IS_NUMBER()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_NUMBER(value) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is a number"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): value to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"true")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is a number, ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise")),(0,l.kt)("h3",{id:"is_string"},"IS_STRING()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_STRING(value) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is a string"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): value to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"true")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is a string, ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise")),(0,l.kt)("h3",{id:"is_array"},"IS_ARRAY()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_ARRAY(value) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is an array / list"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): value to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"true")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is an array / list, ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise")),(0,l.kt)("h3",{id:"is_list"},"IS_LIST()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_LIST(value) \u2192 bool")),(0,l.kt)("p",null,"This is an alias for ",(0,l.kt)("a",{parentName:"p",href:"#is_array"},"IS_ARRAY()")),(0,l.kt)("h3",{id:"is_object"},"IS_OBJECT()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_OBJECT(value) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is an object / document"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): value to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"true")," if ",(0,l.kt)("em",{parentName:"li"},"value")," is an object / document, ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise")),(0,l.kt)("h3",{id:"is_document"},"IS_DOCUMENT()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_DOCUMENT(value) \u2192 bool")),(0,l.kt)("p",null,"This is an alias for ",(0,l.kt)("a",{parentName:"p",href:"#is_object"},"IS_OBJECT()")),(0,l.kt)("h3",{id:"is_datestring"},"IS_DATESTRING()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_DATESTRING(str) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is a string that can be used in a date function. This includes partial dates such as ",(0,l.kt)("em",{parentName:"p"},'"2015"')," or ",(0,l.kt)("em",{parentName:"p"},'"2015-10"')," and strings containing properly formatted but invalid dates such as ",(0,l.kt)("em",{parentName:"p"},'"2015-02-31"'),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"str")," (string): date string to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): ",(0,l.kt)("em",{parentName:"li"},"true")," if ",(0,l.kt)("em",{parentName:"li"},"str")," is a correctly formatted date string, ",(0,l.kt)("em",{parentName:"li"},"false")," otherwise including all non-string values, even if some of them may be usable in date functions (numeric timestamps)")),(0,l.kt)("h3",{id:"is_key"},"IS_KEY()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"IS_KEY(str) \u2192 bool")),(0,l.kt)("p",null,"Check whether ",(0,l.kt)("em",{parentName:"p"},"value")," is a string that can be used as a document key, i.e. as the value of the ",(0,l.kt)("em",{parentName:"p"},"_key")," attribute. See ",(0,l.kt)("a",{parentName:"p",href:"../../collections/documents/naming-conventions#document-keys"},"Naming Conventions for Document Keys"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"str")," (string): document key to test"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"bool")," (boolean): whether ",(0,l.kt)("em",{parentName:"li"},"str")," can be used as document key")),(0,l.kt)("h3",{id:"typename"},"TYPENAME()"),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"TYPENAME(value) \u2192 typeName")),(0,l.kt)("p",null,"Return the data type name of ",(0,l.kt)("em",{parentName:"p"},"value"),"."),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("strong",{parentName:"li"},"value")," (any): input of arbitrary type"),(0,l.kt)("li",{parentName:"ul"},"returns ",(0,l.kt)("strong",{parentName:"li"},"typeName")," (string): data type name of ",(0,l.kt)("em",{parentName:"li"},"value"),"\n(",(0,l.kt)("inlineCode",{parentName:"li"},'"null"'),", ",(0,l.kt)("inlineCode",{parentName:"li"},'"bool"'),", ",(0,l.kt)("inlineCode",{parentName:"li"},'"number"'),", ",(0,l.kt)("inlineCode",{parentName:"li"},'"string"'),", ",(0,l.kt)("inlineCode",{parentName:"li"},'"array"')," or ",(0,l.kt)("inlineCode",{parentName:"li"},'"object"'),")")),(0,l.kt)("table",null,(0,l.kt)("thead",{parentName:"table"},(0,l.kt)("tr",{parentName:"thead"},(0,l.kt)("th",{parentName:"tr",align:"right"},"Example Value"),(0,l.kt)("th",{parentName:"tr",align:null},"Data Type Name"))),(0,l.kt)("tbody",{parentName:"table"},(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"null")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"null"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"true")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"bool"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"false")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"bool"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"123")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"number"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"-4.56")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"number"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"0")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"number"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},'"foobar"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"string"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},'"123"')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"string"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},'""')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"string"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"[ 1, 2, 3 ]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"array"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},'["foo",true]')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"array"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"[ ]")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"array"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},'{"foo":"bar"}')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"object"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},'{"foo": null}')),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"object"'))),(0,l.kt)("tr",{parentName:"tbody"},(0,l.kt)("td",{parentName:"tr",align:"right"},(0,l.kt)("inlineCode",{parentName:"td"},"{ }")),(0,l.kt)("td",{parentName:"tr",align:null},(0,l.kt)("inlineCode",{parentName:"td"},'"object"'))))))}d.isMDXComponent=!0}}]);