"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7542],{3905:function(e,t,i){i.d(t,{Zo:function(){return p},kt:function(){return h}});var n=i(67294);function r(e,t,i){return t in e?Object.defineProperty(e,t,{value:i,enumerable:!0,configurable:!0,writable:!0}):e[t]=i,e}function a(e,t){var i=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),i.push.apply(i,n)}return i}function o(e){for(var t=1;t<arguments.length;t++){var i=null!=arguments[t]?arguments[t]:{};t%2?a(Object(i),!0).forEach((function(t){r(e,t,i[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(i)):a(Object(i)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(i,t))}))}return e}function s(e,t){if(null==e)return{};var i,n,r=function(e,t){if(null==e)return{};var i,n,r={},a=Object.keys(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||(r[i]=e[i]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)i=a[n],t.indexOf(i)>=0||Object.prototype.propertyIsEnumerable.call(e,i)&&(r[i]=e[i])}return r}var c=n.createContext({}),l=function(e){var t=n.useContext(c),i=t;return e&&(i="function"==typeof e?e(t):o(o({},t),e)),i},p=function(e){var t=l(e.components);return n.createElement(c.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var i=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),d=l(i),h=r,f=d["".concat(c,".").concat(h)]||d[h]||u[h]||a;return i?n.createElement(f,o(o({ref:t},p),{},{components:i})):n.createElement(f,o({ref:t},p))}));function h(e,t){var i=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=i.length,o=new Array(a);o[0]=d;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var l=2;l<a;l++)o[l]=i[l];return n.createElement.apply(null,o)}return n.createElement.apply(null,i)}d.displayName="MDXCreateElement"},92173:function(e,t,i){i.r(t),i.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return h},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return u}});var n=i(87462),r=i(63366),a=(i(67294),i(3905)),o=["components"],s={sidebar_position:1,title:"Graph Queries"},c=void 0,l={unversionedId:"collections/graphs/tutorials/graph-queries",id:"collections/graphs/tutorials/graph-queries",title:"Graph Queries",description:"Dataset",source:"@site/docs/collections/graphs/tutorials/graph-queries.md",sourceDirName:"collections/graphs/tutorials",slug:"/collections/graphs/tutorials/graph-queries",permalink:"/docs/collections/graphs/tutorials/graph-queries",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/collections/graphs/tutorials/graph-queries.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Graph Queries"},sidebar:"tutorialSidebar",previous:{title:"Concepts",permalink:"/docs/collections/graphs/concepts"},next:{title:"Using Rest API",permalink:"/docs/collections/graphs/tutorials/using_rest_api"}},p={},u=[{value:"Dataset",id:"dataset",level:2},{value:"Queries",id:"queries",level:2},{value:"Breadth-first search",id:"breadth-first-search",level:3},{value:"Shortest path",id:"shortest-path",level:3},{value:"Get the distance on the shortest path from San Francisco to Paris:",id:"get-the-distance-on-the-shortest-path-from-san-francisco-to-paris",level:3},{value:"Nearest cities",id:"nearest-cities",level:3},{value:"Cities within a given distance",id:"cities-within-a-given-distance",level:3}],d={toc:u};function h(e){var t=e.components,i=(0,r.Z)(e,o);return(0,a.kt)("wrapper",(0,n.Z)({},d,i,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h2",{id:"dataset"},"Dataset"),(0,a.kt)("p",null,"Create a document collection named cities. Add a Geo Index to the collection cities with Fields location and Geo JSON set to true. To populate the cities collection, execute the following query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},'LET c = [\n    {"_key": "sanfrancisco", "location": [-122.416667, 37.783333]},\n    {"_key": "newyork", "location": [-74.0059, 40.7127]},\n    {"_key": "detroit", "location": [-83.045833, 42.331389]},\n    {"_key": "paris", "location": [2.3508, 48.8567]},\n    {"_key": "dublin", "location": [-6.260278, 53.349722]},\n    {"_key": "singapore", "location": [103.8, 1.3]},\n    {"_key": "houston", "location": [-95.383056, 29.762778]},\n    {"_key": "seattle", "location": [-122.333056, 47.609722]}\n]\nFOR city IN c\n    INSERT city IN cities\n')),(0,a.kt)("p",null,"Create an edge collection named flights. To populate the flights collection, execute the following query:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},'LET e = [\n    {"_from": "cities/sanfrancisco", "_to": "cities/singapore", "distance": 13600},\n    {"_from": "cities/sanfrancisco", "_to": "cities/newyork", "distance": 4000},\n    {"_from": "cities/sanfrancisco", "_to": "cities/detroit", "distance": 3300},\n    {"_from": "cities/sanfrancisco", "_to": "cities/houston", "distance": 2600},\n    {"_from": "cities/detroit", "_to": "cities/sanfrancisco", "distance": 3300},\n    {"_from": "cities/detroit", "_to": "cities/newyork", "distance": 800},\n    {"_from": "cities/newyork", "_to": "cities/sanfrancisco", "distance": 4000},\n    {"_from": "cities/newyork", "_to": "cities/detroit", "distance": 800},\n    {"_from": "cities/newyork", "_to": "cities/dublin", "distance": 5100},\n    {"_from": "cities/newyork", "_to": "cities/paris", "distance": 5800},\n    {"_from": "cities/newyork", "_to": "cities/houston", "distance": 2300},\n    {"_from": "cities/dublin", "_to": "cities/newyork", "distance": 5100},\n    {"_from": "cities/dublin", "_to": "cities/paris", "distance": 800},\n    {"_from": "cities/paris", "_to": "cities/newyork", "distance": 5800},\n    {"_from": "cities/paris", "_to": "cities/dublin", "distance": 800},\n    {"_from": "cities/paris", "_to": "cities/singapore", "distance": 10700},\n    {"_from": "cities/singapore", "_to": "cities/sanfrancisco", "distance": 13600},\n    {"_from": "cities/singapore", "_to": "cities/paris", "distance": 10700},\n    {"_from": "cities/houston", "_to": "cities/sanfrancisco", "distance": 2600},\n    {"_from": "cities/houston", "_to": "cities/newyork", "distance": 2300}\n]\nFOR edge IN e\n    INSERT edge IN flights\n')),(0,a.kt)("p",null,"Create a graph named airline with and edges in flights and both from and to vertices in cities."),(0,a.kt)("h2",{id:"queries"},"Queries"),(0,a.kt)("h3",{id:"breadth-first-search"},"Breadth-first search"),(0,a.kt)("p",null,"Get all cities with a direct flight to New York:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},'WITH cities\n     FOR city IN INBOUND "cities/newyork" flights\n     RETURN city\n')),(0,a.kt)("h3",{id:"shortest-path"},"Shortest path"),(0,a.kt)("p",null,"Get the shortest path from San Francisco to Paris:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},'WITH cities\n     LET path = (\n    FOR city IN OUTBOUND SHORTEST_PATH "cities/sanfrancisco" TO "cities/paris"\n        GRAPH "airline"\n        OPTIONS {"weightAttribute": "distance"}\n        RETURN city\n     )\n     RETURN path\n')),(0,a.kt)("h3",{id:"get-the-distance-on-the-shortest-path-from-san-francisco-to-paris"},"Get the distance on the shortest path from San Francisco to Paris:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},'WITH cities\n     LET path = (\n    FOR city, e IN OUTBOUND SHORTEST_PATH "cities/sanfrancisco" TO "cities/paris"\n        GRAPH "airline"\n        OPTIONS {"weightAttribute": "distance"}\n        RETURN e.distance\n    )\n    RETURN SUM(path)\n')),(0,a.kt)("h3",{id:"nearest-cities"},"Nearest cities"),(0,a.kt)("p",null,"Get the 2 nearest cities to a specified latitude and longitude."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},'FOR loc IN NEAR(cities, 53.35, -6.26, 2, "distance")\nRETURN {\n    name: loc._key,\n    latitude: loc.location[1],\n    longitude: loc.location[0],\n    distance: loc.distance / 1000\n    }\n')),(0,a.kt)("h3",{id:"cities-within-a-given-distance"},"Cities within a given distance"),(0,a.kt)("p",null,"Get the cities that are no more than 2500km away from houston."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-JavaScript"},'LET city = DOCUMENT("cities/houston")\nFOR loc IN WITHIN(cities, city.location[1], city.location[0], 2500 * 1000, "distance")\nRETURN {\n    name: loc._key,\n    latitude: loc.location[1],\n    longitude: loc.location[0],\n    distance: loc.distance / 1000\n    }\n')))}h.isMDXComponent=!0}}]);