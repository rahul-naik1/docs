"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[986],{3905:function(e,n,t){t.d(n,{Zo:function(){return u},kt:function(){return d}});var r=t(67294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),c=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},u=function(e){var n=c(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},p=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),p=c(t),d=a,f=p["".concat(s,".").concat(d)]||p[d]||m[d]||i;return t?r.createElement(f,l(l({ref:n},u),{},{components:t})):r.createElement(f,l({ref:n},u))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,l=new Array(i);l[0]=p;var o={};for(var s in n)hasOwnProperty.call(n,s)&&(o[s]=n[s]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var c=2;c<i;c++)l[c]=t[c];return r.createElement.apply(null,l)}return r.createElement.apply(null,t)}p.displayName="MDXCreateElement"},73842:function(e,n,t){t.r(n),t.d(n,{assets:function(){return u},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var r=t(87462),a=t(63366),i=(t(67294),t(3905)),l=["components"],o={sidebar_position:1,title:"Overview"},s=void 0,c={unversionedId:"essentials/CLI/overview",id:"essentials/CLI/overview",title:"Overview",description:"Macrometa Command Line Interface (CLI) is a command line interface that enables developers to:",source:"@site/docs/essentials/CLI/overview.md",sourceDirName:"essentials/CLI",slug:"/essentials/CLI/overview",permalink:"/docs/essentials/CLI/overview",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/essentials/CLI/overview.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Overview"},sidebar:"tutorialSidebar",previous:{title:"Drivers",permalink:"/docs/essentials/drivers"},next:{title:"Commands",permalink:"/docs/essentials/CLI/commands"}},u={},m=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"Install <code>gdnsl</code>",id:"install-gdnsl",level:2},{value:"Sample gdnsl.yaml:",id:"sample-gdnslyaml",level:3},{value:"Usage",id:"usage",level:2}],p={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,l);return(0,i.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Macrometa Command Line Interface (CLI) is a command line interface that enables developers to:"),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"Deploy serverless microservices and functions."),(0,i.kt)("li",{parentName:"ol"},"Script serverless workflows via GitHub."),(0,i.kt)("li",{parentName:"ol"},"Easily learn commands with consistent verbs, nouns, and flags.")),(0,i.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Install Node.js and npm. We recommend using a version manager such as ",(0,i.kt)("a",{parentName:"li",href:"https://github.com/nvm-sh/nvm/blob/master/README.md"},"nvm")," (Node Version Manager).")),(0,i.kt)("h2",{id:"install-gdnsl"},"Install ",(0,i.kt)("inlineCode",{parentName:"h2"},"gdnsl")),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"gdnsl")," is built with Node.js and installable via npm:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"npm install -g gdnsl\n# You will need a gdnsl.yaml file to connect to the Macrometa GDN. Execute the `init` command to create the yaml file in local directory.\ngdnsl init\n")),(0,i.kt)("h3",{id:"sample-gdnslyaml"},"Sample gdnsl.yaml:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre"},'```yaml\nurl: gdn.paas.macrometa.io\ntenant: demo@macrometa.io\napikey: "xxxxxxx"\nregions: [ ] # Valid values - LOCAL, ALL, comma separated list of regions.\n```\n')),(0,i.kt)("h2",{id:"usage"},"Usage"),(0,i.kt)("p",null,"Macrometa serverless client executable options:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-bash"},"  -h, --help                 Help for gdnsl\n  -c, --config string        gdnsl config file (default is ./gdnsl.yaml)  \n  -v, --version              Prints the client version\n")))}d.isMDXComponent=!0}}]);