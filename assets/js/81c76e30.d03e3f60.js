"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[4140],{3905:function(e,t,n){n.d(t,{Zo:function(){return m},kt:function(){return k}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},s=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,p=e.parentName,m=o(e,["components","mdxType","originalType","parentName"]),s=d(n),k=r,c=s["".concat(p,".").concat(k)]||s[k]||u[k]||i;return n?a.createElement(c,l(l({ref:t},m),{},{components:n})):a.createElement(c,l({ref:t},m))}));function k(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,l=new Array(i);l[0]=s;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:r,l[1]=o;for(var d=2;d<i;d++)l[d]=n[d];return a.createElement.apply(null,l)}return a.createElement.apply(null,n)}s.displayName="MDXCreateElement"},46820:function(e,t,n){n.r(t),n.d(t,{assets:function(){return m},contentTitle:function(){return p},default:function(){return k},frontMatter:function(){return o},metadata:function(){return d},toc:function(){return u}});var a=n(87462),r=n(63366),i=(n(67294),n(3905)),l=["components"],o={sidebar_position:4,title:"Data Cleansing"},p=void 0,d={unversionedId:"cep/reference/data-cleansing",id:"cep/reference/data-cleansing",title:"Data Cleansing",description:"Value based Filtering",source:"@site/docs/cep/reference/data-cleansing.md",sourceDirName:"cep/reference",slug:"/cep/reference/data-cleansing",permalink:"/docs/cep/reference/data-cleansing",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/data-cleansing.md",tags:[],version:"current",sidebarPosition:4,frontMatter:{sidebar_position:4,title:"Data Cleansing"},sidebar:"tutorialSidebar",previous:{title:"Values & Types",permalink:"/docs/cep/reference/values-n-types"},next:{title:"Data Transformation",permalink:"/docs/cep/reference/data-transformation"}},m={},u=[{value:"Value based Filtering",id:"value-based-filtering",level:2},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"If-Then-Else",id:"if-then-else",level:2},{value:"Events at each stream",id:"events-at-each-stream",level:3},{value:"Regex Matching",id:"regex-matching",level:2},{value:"Input",id:"input-1",level:3},{value:"Output",id:"output-1",level:3},{value:"Default",id:"default",level:2},{value:"Input",id:"input-2",level:3},{value:"Output",id:"output-2",level:3},{value:"Type based Filtering",id:"type-based-filtering",level:2},{value:"Input",id:"input-3",level:3},{value:"Output",id:"output-3",level:3},{value:"Remove Duplicate Events",id:"remove-duplicate-events",level:2},{value:"Example",id:"example",level:3},{value:"Behavior",id:"behavior",level:3}],s={toc:u};function k(e){var t=e.components,n=(0,r.Z)(e,l);return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h2",{id:"value-based-filtering"},"Value based Filtering"),(0,i.kt)("p",null,"This example shows filter-out events based on simple conditions such as ",(0,i.kt)("inlineCode",{parentName:"p"},"number value"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"range")," or ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," type."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `TemperatureStream` stream to process events having `sensorId` and `temperature`(F).\nCREATE STREAM TemperatureStream (sensorId string, temperature double);\n\n@info(name = 'EqualsFilter')\n-- Filter out events with `sensorId` equalling `A1234`\ninsert into SenorA1234TemperatureStream\nselect *\nfrom TemperatureStream[ sensorId == 'A1234'];\n\n\n@info(name = 'RangeFilter') \n-- Filter out events where `-2 < temperature < 40`\ninsert into NormalTemperatureStream\nselect *\nfrom TemperatureStream[ temperature > -2 and temperature < 40];\n\n\n@info(name = 'NullFilter') \n-- Filter out events with `SensorId` being `null`\ninsert into InValidTemperatureStream\nselect *\nfrom TemperatureStream[ sensorId is null ];\n")),(0,i.kt)("h3",{id:"input"},"Input"),(0,i.kt)("p",null,"Below events are sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"TemperatureStream"),","),(0,i.kt)("ol",null,(0,i.kt)("li",{parentName:"ol"},"[",(0,i.kt)("inlineCode",{parentName:"li"},"'A1234'"),", 39]"),(0,i.kt)("li",{parentName:"ol"},"[",(0,i.kt)("inlineCode",{parentName:"li"},"'sensor1'"),", 35]"),(0,i.kt)("li",{parentName:"ol"},"[",(0,i.kt)("inlineCode",{parentName:"li"},"null"),", 43]")),(0,i.kt)("h3",{id:"output"},"Output"),(0,i.kt)("p",null,"After processing, the following events will be arriving at each stream:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"SenorA1234TemperatureStream: ",(0,i.kt)("br",null),"[",(0,i.kt)("inlineCode",{parentName:"p"},"'A1234'"),", 39]"," only")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"NormalTemperatureStream:  ",(0,i.kt)("br",null),"[",(0,i.kt)("inlineCode",{parentName:"p"},"'sensor1'"),", 35]"," only")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("p",{parentName:"li"},"InValidTemperatureStream: ",(0,i.kt)("br",null),"[",(0,i.kt)("inlineCode",{parentName:"p"},"null"),", 43]"," only "))),(0,i.kt)("h2",{id:"if-then-else"},"If-Then-Else"),(0,i.kt)("p",null,"This example shows how to enrich events based on a simple ",(0,i.kt)("inlineCode",{parentName:"p"},"if-then-else")," conditions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `TemperatureStream` stream to process events having `sensorId` and `temperature`(F).\nCREATE STREAM TemperatureStream (sensorId string, temperature double);\n\n@info(name = 'SimpleIfElseQuery')\ninsert into ValidTemperatureStream\nselect sensorId,\n-- if `temperature` > -2, `isValid` will be `true` else `false` \n    ifThenElse(temperature > -2, 'Valid', 'InValid') as isValid \nfrom TemperatureStream;\n\n@info(name = 'ComplexIfElseQuery') \ninsert into ProcessedTemperatureStream\nselect sensorId, \n-- If the `temperature` > 40 the status is set to `High`, between -2 and 40 as `Normal` & less than -2 as `InValid` \n    ifThenElse(temperature > -2, \n        ifThenElse(temperature > 40, 'High', 'Normal'), \n        'InValid') \n    as tempStatus\nfrom TemperatureStream  ;\n")),(0,i.kt)("h3",{id:"events-at-each-stream"},"Events at each stream"),(0,i.kt)("p",null,"When an event with values ","[",(0,i.kt)("inlineCode",{parentName:"p"},"'sensor1'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"35.4"),"]"," is sent to TemperatureStream stream it will get converted and travel through the streams as below."),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"ValidTemperatureStream : ","[",(0,i.kt)("inlineCode",{parentName:"li"},"'sensor1'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"'Valid'"),"]"),(0,i.kt)("li",{parentName:"ul"},"ProcessedTemperatureStream : ","[",(0,i.kt)("inlineCode",{parentName:"li"},"'sensor1'"),", ",(0,i.kt)("inlineCode",{parentName:"li"},"'Normal'"),"]")),(0,i.kt)("h2",{id:"regex-matching"},"Regex Matching"),(0,i.kt)("p",null,"This example demonstrates event cleansing using regex expressions."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `SweetProductionStream` having information of `name` and `amount`\ndefine stream SweetProductionStream (name string, amount int);\n\n@info(name='ProcessSweetProductionStream')\ninsert into ChocolateProductStream\nselect name, \n-- Matches if `name` begins with the word 'chocolate'\n   regex:matches('chocolate(.*)', name) as isAChocolateProduct, \n-- Captures the `sweetType` of the sweet following the flavour in `name`\n   regex:group('.*\\s(.*)', name, 1) as sweetType\nfrom SweetProductionStream;\n")),(0,i.kt)("h3",{id:"input-1"},"Input"),(0,i.kt)("p",null,"Below event is sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"SweetProductionStream"),", "),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"34"),"]"),(0,i.kt)("h3",{id:"output-1"},"Output"),(0,i.kt)("p",null,"After processing, the event arriving at ",(0,i.kt)("inlineCode",{parentName:"p"},"ChocolateProductStream")," will be as follows:"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'cake'"),"]"),(0,i.kt)("h2",{id:"default"},"Default"),(0,i.kt)("p",null,"This example shows how to use ",(0,i.kt)("inlineCode",{parentName:"p"},"default")," function to process attributes with ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," values."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `PatientRegistrationInputStream` having information in all primitive types.\nCREATE STREAM PatientRegistrationInputStream (\n                 seqNo long, name string, age int,\n                 height float, weight double, photo object,\n                 isEmployee bool, wardNo object);\n\n\n@info(name = 'SimpleIfElseQuery')\ninsert into PreprocessedPatientRegistrationInputStream\nselect \n-- Default value of `invalid` to be used if `name` is `null` \n    default(name, 'invalid') as name, \n\n-- Default value of `0l` to be used if `seqNo` is `null` \n    default(seqNo, 0l) as seqNo, \n\n-- Default value of `0d` to be used if `weight` is `null` \n    default(weight, 0d) as weight,\n    \n-- Default value of `0` to be used if `age` is `null` \n    default(age, 0) as age, \n\n-- Default value of `0f` to be used if `height` is `null` \n    default(height, 0f) as height   \n\nfrom PatientRegistrationInputStream;\n")),(0,i.kt)("h3",{id:"input-2"},"Input"),(0,i.kt)("p",null,"An event of all ",(0,i.kt)("inlineCode",{parentName:"p"},"null")," attributes is sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"PatientRegistrationInputStream"),","),(0,i.kt)("h3",{id:"output-2"},"Output"),(0,i.kt)("p",null,"After processing, the event arriving at ",(0,i.kt)("inlineCode",{parentName:"p"},"PreprocessedPatientRegistrationInputStream")," will be as follows, "),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'invalid'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0")," ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"0.0"),"]"),(0,i.kt)("p",null,"with types,"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"string"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"long"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"double"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"float"),"]"),(0,i.kt)("h2",{id:"type-based-filtering"},"Type based Filtering"),(0,i.kt)("p",null,"This example shows filter-out events based on data ",(0,i.kt)("inlineCode",{parentName:"p"},"type")," of the attribute."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `SweetProductionStream` having information of `name` and `amount`\nCREATE STREAM SweetProductionStream (name string, amount int);\n\n@info(name='ProcessSweetProductionStream')\ninsert into ProcessedSweetProductionStream\nselect \n-- `true` if `amount` is of `int` type\n   instanceOfInteger(amount) as isAIntInstance,\n    name, \n    amount\nfrom SweetProductionStream;\n")),(0,i.kt)("h3",{id:"input-3"},"Input"),(0,i.kt)("p",null,"Below event is sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"SweetProductionStream"),", "),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'invalid'"),"]"),(0,i.kt)("h3",{id:"output-3"},"Output"),(0,i.kt)("p",null,"After processing, the event arriving at ",(0,i.kt)("inlineCode",{parentName:"p"},"ProcessedSweetProductionStream")," will be as follows:"),(0,i.kt)("p",null,"[",(0,i.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'chocolate cake'"),", ",(0,i.kt)("inlineCode",{parentName:"p"},"'invalid'"),"]"),(0,i.kt)("h2",{id:"remove-duplicate-events"},"Remove Duplicate Events"),(0,i.kt)("p",null,"Provides examples of removing ",(0,i.kt)("inlineCode",{parentName:"p"},"duplicate")," events that arrive within a given time duration."),(0,i.kt)("h3",{id:"example"},"Example"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM TemperatureStream (sensorId string, seqNo string, temperature double);\n\n@info(name = 'Deduplicate-sensorId')\n-- Remove duplicate events arriving within `1 minute` time gap, based on unique `sensorId`.\ninsert into UniqueSensorStream\nselect *\nfrom TemperatureStream#unique:deduplicate(sensorId, 1 min);\n\n@info(name = 'Deduplicate-sensorId-and-seqNo')\n-- Remove duplicate events arriving within `1 minute` time gap, based on unique `sensorId` and `seqNo` combination.\ninsert into UniqueSensorStream\nselect *\nfrom TemperatureStream#unique:deduplicate(str:concat(sensorId,'-',seqNo), 1 min)\ninsert into UniqueSensorSeqNoStream;\n")),(0,i.kt)("h3",{id:"behavior"},"Behavior"),(0,i.kt)("p",null,"When events are sent to ",(0,i.kt)("inlineCode",{parentName:"p"},"TemperatureStream")," stream, following events will get emitted after deduplication on ",(0,i.kt)("inlineCode",{parentName:"p"},"UniqueSensorStream")," stream via ",(0,i.kt)("inlineCode",{parentName:"p"},"Deduplicate-sensorId")," query, and ",(0,i.kt)("inlineCode",{parentName:"p"},"UniqueSensorSeqNoStream")," stream via ",(0,i.kt)("inlineCode",{parentName:"p"},"Deduplicate-sensorId-and-seqNo")," query."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Time"),(0,i.kt)("th",{parentName:"tr",align:null},"Input to ",(0,i.kt)("inlineCode",{parentName:"th"},"TemperatureStream")),(0,i.kt)("th",{parentName:"tr",align:null},"Output at ",(0,i.kt)("inlineCode",{parentName:"th"},"UniqueSensorStream")),(0,i.kt)("th",{parentName:"tr",align:null},"Output at ",(0,i.kt)("inlineCode",{parentName:"th"},"UniqueSensorSeqNoStream")))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:00"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:10"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'201'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"23.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'201'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"23.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:20"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'500'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'500'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'500'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:40"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'200'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"18.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"-")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:00:50"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:01:05"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'501'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'FR45'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'501'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"22.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:01:10"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'203'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'203'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'203'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:02:20"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'202'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"28.0"),"]")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},"9:03:10"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'204'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]"),(0,i.kt)("td",{parentName:"tr",align:null},"-"),(0,i.kt)("td",{parentName:"tr",align:null},"[",(0,i.kt)("inlineCode",{parentName:"td"},"'AD11'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"'204'"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"30.0"),"]")))))}k.isMDXComponent=!0}}]);