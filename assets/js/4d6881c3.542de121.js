"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[6897],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return d}});var i=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},r=Object.keys(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(i=0;i<r.length;i++)n=r[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=i.createContext({}),s=function(e){var t=i.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},u=function(e){var t=s(e.components);return i.createElement(p.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},c=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,r=e.originalType,p=e.parentName,u=o(e,["components","mdxType","originalType","parentName"]),c=s(n),d=a,k=c["".concat(p,".").concat(d)]||c[d]||m[d]||r;return n?i.createElement(k,l(l({ref:t},u),{},{components:n})):i.createElement(k,l({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var r=n.length,l=new Array(r);l[0]=c;var o={};for(var p in t)hasOwnProperty.call(t,p)&&(o[p]=t[p]);o.originalType=e,o.mdxType="string"==typeof e?e:a,l[1]=o;for(var s=2;s<r;s++)l[s]=n[s];return i.createElement.apply(null,l)}return i.createElement.apply(null,n)}c.displayName="MDXCreateElement"},73986:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return p},default:function(){return d},frontMatter:function(){return o},metadata:function(){return s},toc:function(){return m}});var i=n(87462),a=n(63366),r=(n(67294),n(3905)),l=["components"],o={sidebar_position:3,title:"Values & Types"},p=void 0,s={unversionedId:"cep/reference/values-n-types",id:"cep/reference/values-n-types",title:"Values & Types",description:"Basic Types",source:"@site/docs/cep/reference/values-n-types.md",sourceDirName:"cep/reference",slug:"/cep/reference/values-n-types",permalink:"/docs/cep/reference/values-n-types",draft:!1,editUrl:"https://github.com/macrometacorp/docs/edit/master/docs/cep/reference/values-n-types.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,title:"Values & Types"},sidebar:"tutorialSidebar",previous:{title:"Basics",permalink:"/docs/cep/reference/basics"},next:{title:"Data Cleansing",permalink:"/docs/cep/reference/data-cleansing"}},u={},m=[{value:"Basic Types",id:"basic-types",level:2},{value:"Example",id:"example",level:3},{value:"Input",id:"input",level:3},{value:"Output",id:"output",level:3},{value:"Map",id:"map",level:2},{value:"Example",id:"example-1",level:3},{value:"Input",id:"input-1",level:3},{value:"Output",id:"output-1",level:3},{value:"List",id:"list",level:2},{value:"Example",id:"example-2",level:3},{value:"Input",id:"input-2",level:3},{value:"Output",id:"output-2",level:3},{value:"Null",id:"null",level:2},{value:"Example",id:"example-3",level:3},{value:"Input",id:"input-3",level:3},{value:"Output",id:"output-3",level:3}],c={toc:m};function d(e){var t=e.components,n=(0,a.Z)(e,l);return(0,r.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"basic-types"},"Basic Types"),(0,r.kt)("p",null,"Provides introduction to basic Stream app attribute types which are ",(0,r.kt)("inlineCode",{parentName:"p"},"int"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"long"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"float"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"double"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"string"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"object"),", and some key functions such as ",(0,r.kt)("inlineCode",{parentName:"p"},"convert()"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"instanceOf...()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"cast()"),"."),(0,r.kt)("p",null,"In Stream apps, other types such as list, map, etc, should be passed as ",(0,r.kt)("inlineCode",{parentName:"p"},"object")," into streams. For more information on other types refer other examples under Values and Types section."),(0,r.kt)("p",null,"For information on ",(0,r.kt)("a",{parentName:"p",href:"query-guide#value"},"values"),", and other useful ",(0,r.kt)("a",{parentName:"p",href:"query-guide#function"},"functions"),", refer the ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/reference/query-guide"},"stream query guide"),"."),(0,r.kt)("h3",{id:"example"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `PatientRegistrationInputStream` having information in all primitive types.\nCREATE STREAM PatientRegistrationInputStream (\n                 seqNo long, name string, age int,\n                 height float, weight double, photo object,\n                 isEmployee bool, wardNo object);\n\n\n-- Defines the resulting `PatientRegistrationStream` after processing.\nCREATE STREAM PatientRegistrationStream (\n                 seqNo long, name string, age int,\n                 height double, weight double, photo object,\n                 isPhotoString bool, isEmployee bool,\n                 wardNo int);\n\n\n@info(name = 'Type-processor')\ninsert into PatientRegistrationStream\nselect seqNo, name, age,\n-- `convert()` used to convert `float` type to `double`.\n       convert(height, 'double') as height,\n\n       weight, photo,\n-- `instanceOfString()` checks if the photo is an instance of `string`.\n       instanceOfString(photo) as isPhotoString,\n\n       isEmployee,\n-- `cast()` cast the value of wardNo to `int`.\n       cast(wardNo, 'int') as wardNo\nfrom PatientRegistrationInputStream;\n")),(0,r.kt)("h3",{id:"input"},"Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"PatientRegistrationInputStream"),","),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"1200098"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Peter Johnson'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"194.3f"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"69.6"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"#Fjoiu59%3hkjnknk$#nFT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),"]"),(0,r.kt)("p",null,"Here, assume that the content of the photo (",(0,r.kt)("inlineCode",{parentName:"p"},"#Fjoiu59%3hkjnknk$#nFT"),") is binary."),(0,r.kt)("h3",{id:"output"},"Output"),(0,r.kt)("p",null,"After processing, the event arriving at ",(0,r.kt)("inlineCode",{parentName:"p"},"PatientRegistrationStream")," will be as follows:"),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"1200098"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Peter Johnson'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"194.3"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"69.6"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"#Fjoiu59%3hkjnknk$#nFT"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"34"),"]"),(0,r.kt)("h2",{id:"map"},"Map"),(0,r.kt)("p",null,"Provides examples on basic map functions provided via ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/reference/extensions/execution/map"},"map")," extension."),(0,r.kt)("p",null,"For information of performing scatter and gather using ",(0,r.kt)("inlineCode",{parentName:"p"},"map:tokenize()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"map:collect()")," refer the examples in Data Pipelining section. The information on all map functions is ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/reference/extensions/execution/map"},"here"),"."),(0,r.kt)("h3",{id:"example-1"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `CoupleDealInfoStream` having attributes `item1`, `price1`, `item2`, and `price2` with `string` and `double` types.\nCREATE STREAM CoupleDealInfoStream ( item1 string, price1 double, item2 string, price2 double);\n\n@info(name = 'Create-map')\n-- Create a map with values of `item1` and `item2` as keys, and `price1` and `price2` as values.\ninsert into NewMapStream\nselect map:create(item1, price1, item2, price2) as itemPriceMap\nfrom CoupleDealInfoStream;\n\n@info(name = 'Check-map')\n-- Check if `itemPriceMap` is a Map.\ninsert into MapAnalysisStream\nselect map:isMap(itemPriceMap) as isMap,\n-- Check if `itemPriceMap` contains a key `'Cookie'`.\n       map:containsKey(itemPriceMap, 'Cookie')\n            as isCookiePresent,\n-- Check if `itemPriceMap` contains a value `24.0`.\n       map:containsValue(itemPriceMap, 24.0)\n            as isThereItemWithPrice24,\n-- Check if `itemPriceMap` is empty.\n       map:isEmpty(itemPriceMap) as isEmpty,\n-- Get all keys of `itemPriceMap` as a List.\n       map:keys(itemPriceMap) as keys,\n-- Get size of `itemPriceMap`.\n       map:size(itemPriceMap) as size\nfrom NewMapStream;\n\n@info(name = 'Clone-and-update')\n-- Clone `itemPriceMap`, put `Gift` key with value `1.0` to it, and replace `Cake` key with value `12.0`.\ninsert into ItemInsertedMapStream\nselect map:replace(\n                   map:put(map:clone(itemPriceMap),\n                           \"Gift\",\n                           1.0),\n                   \"Cake\",\n                   12.0) as itemPriceMap\nfrom NewMapStream;\n")),(0,r.kt)("h3",{id:"input-1"},"Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"CoupleDealInfoStream"),","),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"'Chocolate'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"18.0"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Ice Cream'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"24.0"),"]"),(0,r.kt)("h3",{id:"output-1"},"Output"),(0,r.kt)("p",null,"After processing, the following events will be arriving at each stream:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NewMapStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"{Ice Cream=24.0, Chocolate =18.0}"),"]"),(0,r.kt)("li",{parentName:"ul"},"MapAnalysisStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"[Ice Cream, Chocolate]"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"2"),"]"),(0,r.kt)("li",{parentName:"ul"},"ItemInsertedMapStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"{Ice Cream=24.0, Gift=1.0, Chocolate =18.0}"),"]")),(0,r.kt)("h2",{id:"list"},"List"),(0,r.kt)("p",null,"Provides examples on basic list functions provided via ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/reference/extensions/execution/list"},"list")," extension."),(0,r.kt)("p",null,"For information of performing scatter and gather using ",(0,r.kt)("inlineCode",{parentName:"p"},"list:tokenize()"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"list:collect()")," refer the examples in Data Pipelining section. The information on all list functions is ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/reference/extensions/execution/list"},"here"),"."),(0,r.kt)("h3",{id:"example-2"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"-- Defines `ProductComboStream` having `string` type attributes `product1`, `product2`, and `product3`.\nCREATE STREAM ProductComboStream ( product1 string, product2 string, product3 string);\n\n\n@info(name = 'Create-list')\n-- Create a list with values of `product1`, `product2`, and `product3`.\ninsert into NewListStream\nselect list:create(product1, product2, product3)\n            as productList\nfrom ProductComboStream;\n\n\n@info(name = 'Check-list')\n-- Check if `productList` is a List.\ninsert into ListAnalysisStream\nselect list:isList(productList) as isList,\n-- Check if `productList` contains `'Cake'`.\n       list:contains(productList, 'Cake')\n            as isCakePresent,\n-- Check if `productList` is empty.\n       list:isEmpty(productList) as isEmpty,\n-- Get the value at index `1` from `productList` .\n       list:get(productList, 1) as valueAt1,\n-- Get size of `productList`.\n       list:size(productList) as size\nfrom NewListStream;\n\n\n@info(name = 'Clone-and-update')\n-- Clone `productList`, add `Toffee` to the end of the list, and remove `Cake` from the list.\ninsert into UpdatedListStream\nselect list:remove(\n            list:add(list:clone(productList), \"Toffee\"),\n            \"Cake\") as productList\nfrom NewListStream;\n")),(0,r.kt)("h3",{id:"input-2"},"Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"ProductComboStream"),","),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"'Ice Cream'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Chocolate'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"'Cake'"),"]"),(0,r.kt)("h3",{id:"output-2"},"Output"),(0,r.kt)("p",null,"After processing, the following events will be arriving at each stream:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"NewListStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"[Ice Cream, Chocolate, Cake]"),"]"),(0,r.kt)("li",{parentName:"ul"},"ListAnalysisStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"Chocolate"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"3"),"]"),(0,r.kt)("li",{parentName:"ul"},"UpdatedListStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"[Ice Cream, Chocolate, Toffee]"),"]")),(0,r.kt)("h2",{id:"null"},"Null"),(0,r.kt)("p",null,"Provides examples on using nulls in Stream Apps."),(0,r.kt)("p",null,"For more information refer the ",(0,r.kt)("a",{parentName:"p",href:"/docs/cep/reference/query-guide"},"stream query guide"),"."),(0,r.kt)("h3",{id:"example-3"},"Example"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sql"},"CREATE STREAM ProductInputStream (item string, price double);\n\n-- Empty `ProductInfoTable` with attributes `item` and `discount`.\nCREATE TABLE ProductInfoTable (item string, discount double);\n\n@info(name = 'Check-for-null')\n-- Checks if `price` contains `null` value.\ninsert into ProductValidationStream\nselect item, price is null as isPriceNull\n-- Filter events with `item` not having `null` value.\nfrom ProductInputStream [not(item is null)];\n\n@info(name = 'Outer-join-with-table')\ninsert into DiscountValidationStream\nselect s.item, s.price, t.discount,\n-- Check if `math:power()` returns `null`.\n       math:power(t.discount, 2) is null\n            as isFunctionReturnsNull,\n-- Check if streams `t` and `s` are `null`.\n       t is null as isTNull,\n       s is null as isSNull,\n-- Check if streams attributes `t.discount` and `s.item` are `null`.\n       t.discount is null as isTDiscountNull,\n       s.item is null as isSItemNull\nfrom ProductInputStream as s\n    left outer join ProductInfoTable as t\n    on s.item == t.item;\n")),(0,r.kt)("h3",{id:"input-3"},"Input"),(0,r.kt)("p",null,"Below event is sent to ",(0,r.kt)("inlineCode",{parentName:"p"},"ProductInputStream"),","),(0,r.kt)("p",null,"[",(0,r.kt)("inlineCode",{parentName:"p"},"'Cake'"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"12.0"),"]"),(0,r.kt)("h3",{id:"output-3"},"Output"),(0,r.kt)("p",null,"After processing, the following events will be arriving at each stream:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"ProductValidationStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"Cake"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"]"),(0,r.kt)("li",{parentName:"ul"},"DiscountValidationStream: ",(0,r.kt)("br",null),"[",(0,r.kt)("inlineCode",{parentName:"li"},"Cake"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"12.0"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"null"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"true"),", ",(0,r.kt)("inlineCode",{parentName:"li"},"false"),"]")))}d.isMDXComponent=!0}}]);